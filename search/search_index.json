{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Overview","text":""},{"location":"#aria2p","title":"aria2p","text":"<p>Command-line tool and Python library to interact with an <code>aria2c</code> daemon process through JSON-RPC.</p> <p></p> <p>To avoid confusion:</p> <ul> <li>aria2 is a lightweight multi-protocol &amp; multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink.</li> <li><code>aria2c</code> is the name of the command-line executable provided by aria2. It can act as a daemon.</li> <li><code>aria2p</code> (<code>p</code> for Python) is a command-line client that can interact with an <code>aria2c</code> daemon.   It is not an official client. There are other Python packages allowing you to interact with an <code>aria2c</code> daemon.   These other packages do not offer enough usability (in my opinion), this is why I'm developing <code>aria2p</code>.</li> </ul> <p>Purpose: <code>aria2c</code> can run in the foreground, for one-time downloads, or in the background, as a daemon. This is where <code>aria2p</code> intervenes: when an instance of <code>aria2c</code> is running in the background, <code>aria2p</code> will be able to communicate with it to add downloads to the queue, remove, pause or resume them, etc.</p> <p>In order for <code>aria2p</code> to be able to communicate with the <code>aria2c</code> process, RPC mode must be enabled with the <code>--enable-rpc</code> option of <code>aria2c</code>. RPC stands for Remote Procedure Call. Although <code>aria2c</code> supports both JSON-RPC and XML-RPC protocols, <code>aria2p</code> works with JSON only (not XML). More information about how to configure <code>aria2c</code> to run as a daemon with RPC mode enabled can be found in the Configuration section of the documentation.</p> <p>Table of contents</p> <ul> <li>Requirements</li> <li>Installation</li> <li>Usage as a library</li> <li>Usage on the command line</li> <li>Troubleshoot</li> <li>Support</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>aria2 must be installed. On systems with <code>apt-get</code>:</p> <pre><code>sudo apt-get install aria2\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>python3.6 -m pip install aria2p[tui]\n</code></pre> <p>With <code>uv</code>:</p> <pre><code>uv tool install aria2p[tui]\n</code></pre> <p>The <code>tui</code> extra is needed for the interactive interface. If you don't need the interface (for example when you are writing a Python package with a dependency to aria2p), simply install <code>aria2p</code> without any extra.</p>"},{"location":"#usage-as-a-library","title":"Usage (as a library)","text":"<p>This library is still a work in progress. More examples will be added later. In the meantime, you can read the Reference section on the official documentation.</p> <pre><code>import aria2p\n\n# initialization, these are the default values\naria2 = aria2p.API(\n    aria2p.Client(\n        host=\"http://localhost\",\n        port=6800,\n        secret=\"\"\n    )\n)\n\n# list downloads\ndownloads = aria2.get_downloads()\n\nfor download in downloads:\n    print(download.name, download.download_speed)\n\n# add downloads\nmagnet_uri = \"magnet:?xt=urn:...\"\n\ndownload = aria2.add_magnet(magnet_uri)\n</code></pre>"},{"location":"#usage-command-line","title":"Usage (command-line)","text":"<pre><code>usage: aria2p [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...]\n\nCommand-line tool and Python library to interact with an `aria2c` daemon\nprocess through JSON-RPC.\n\nGlobal options:\n  -h, --help            Show this help message and exit. Commands also accept\n                        the -h/--help option.\n  -p PORT, --port PORT  Port to use to connect to the remote server.\n  -H HOST, --host HOST  Host address for the remote server.\n  -s SECRET, --secret SECRET\n                        Secret token to use to connect to the remote server.\n  -L {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL}, --log-level {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL}\n                        Log level to use\n  -P LOG_PATH, --log-path LOG_PATH\n                        Log path to use. Can be a directory or a file.\n  -T CLIENT_TIMEOUT, --client-timeout CLIENT_TIMEOUT\n                        Timeout in seconds for requests to the remote server.\n                        Floats supported. Default: 60.0.\n\nCommands:\n\n    add                 Add downloads with URIs/Magnets/torrents/Metalinks.\n    add-magnets (add-magnet)\n                        Add downloads with Magnet URIs.\n    add-metalinks (add-metalink)\n                        Add downloads with Metalink files.\n    add-torrents (add-torrent)\n                        Add downloads with torrent files.\n    autopurge (autoclear)\n                        Automatically purge completed/removed/failed\n                        downloads.\n    call                Call a remote method through the JSON-RPC client.\n    pause (stop)        Pause downloads.\n    remove (rm, del, delete)\n                        Remove downloads.\n    resume (start)      Resume downloads.\n    show                Show the download progression.\n    top                 Launch the top-like interactive interface.\n    listen              Listen to notifications.\n</code></pre> <p>Calling <code>aria2p</code> without any arguments will by default call the <code>top</code> command, which is a console interactive interface.</p> <p>Commands:</p> <ul> <li><code>add</code></li> <li><code>add-magnets</code></li> <li><code>add-metalinks</code></li> <li><code>add-torrents</code></li> <li><code>autopurge</code></li> <li><code>call</code></li> <li><code>listen</code></li> <li><code>pause</code></li> <li><code>remove</code></li> <li><code>resume</code></li> <li><code>show</code></li> <li><code>top</code></li> </ul>"},{"location":"#add","title":"<code>add</code>","text":"<pre><code>usage: aria2p add [-h] [-f FROM_FILE] [uris [uris ...]]\n\nAdd downloads with URIs/Magnets/torrents/Metalinks.\n\npositional arguments:\n  uris                  The URIs/file-paths to add.\n\noptional arguments:\n  -h, --help            Show this help message and exit.\n  -f FROM_FILE, --from-file FROM_FILE\n                        Load URIs from a file.\n</code></pre>"},{"location":"#add-magnets","title":"<code>add-magnets</code>","text":"<pre><code>usage: aria2p add-magnets [-h] [-f FROM_FILE] [uris [uris ...]]\n\nAdd downloads with Magnet URIs.\n\npositional arguments:\n  uris                  The magnet URIs to add.\n\noptional arguments:\n  -h, --help            Show this help message and exit.\n  -f FROM_FILE, --from-file FROM_FILE\n                        Load URIs from a file.\n</code></pre>"},{"location":"#add-metalinks","title":"<code>add-metalinks</code>","text":"<pre><code>usage: aria2p add-metalinks [-h] [-f FROM_FILE]\n                            [metalink_files [metalink_files ...]]\n\nAdd downloads with Metalink files.\n\npositional arguments:\n  metalink_files        The paths to the metalink files.\n\noptional arguments:\n  -h, --help            Show this help message and exit.\n  -f FROM_FILE, --from-file FROM_FILE\n                        Load file paths from a file.\n</code></pre>"},{"location":"#add-torrents","title":"<code>add-torrents</code>","text":"<pre><code>usage: aria2p add-torrents [-h] [-f FROM_FILE]\n                           [torrent_files [torrent_files ...]]\n\nAdd downloads with torrent files.\n\npositional arguments:\n  torrent_files         The paths to the torrent files.\n\noptional arguments:\n  -h, --help            Show this help message and exit.\n  -f FROM_FILE, --from-file FROM_FILE\n                        Load file paths from a file.\n</code></pre>"},{"location":"#autopurge","title":"<code>autopurge</code>","text":"<pre><code>usage: aria2p autopurge [-h]\n\nAutomatically purge completed/removed/failed downloads.\n\noptional arguments:\n  -h, --help  Show this help message and exit.\n</code></pre>"},{"location":"#call","title":"<code>call</code>","text":"<pre><code>usage: aria2p call [-h] [-P PARAMS [PARAMS ...] | -J PARAMS] method\n\nCall a remote method through the JSON-RPC client.\n\npositional arguments:\n  method                The method to call (case insensitive). Dashes and\n                        underscores will be removed so you can use as many as\n                        you want, or none. Prefixes like 'aria2.' or 'system.'\n                        are also optional.\n\noptional arguments:\n  -h, --help            Show this help message and exit.\n  -P PARAMS [PARAMS ...], --params-list PARAMS [PARAMS ...]\n                        Parameters as a list of strings.\n  -J PARAMS, --json-params PARAMS\n                        Parameters as a JSON string. You should always wrap it\n                        at least once in an array '[]'.\n</code></pre> <p>As explained in the help text, the <code>method</code> can be the exact method name, or just the name without the prefix. It is case-insensitive, and dashes and underscores will be removed.</p> <p>The following are all equivalent: - <code>aria2.addUri</code> - <code>aria2.adduri</code> - <code>addUri</code> - <code>ADDURI</code> - <code>aria2.ADD-URI</code> - <code>add_uri</code> - <code>A-d_D-u_R-i</code> (yes it's valid) - <code>A---R---I---A---2.a__d__d__u__r__i</code> (I think you got it) - and even more ugly forms...</p>"},{"location":"#examples","title":"Examples","text":"<p>List all available methods. This example uses <code>jq</code>. <pre><code>$ aria2p call listmethods | jq\n[\n  \"aria2.addUri\",\n  \"aria2.addTorrent\",\n  \"aria2.getPeers\",\n  \"aria2.addMetalink\",\n  \"aria2.remove\",\n  \"aria2.pause\",\n  \"aria2.forcePause\",\n  \"aria2.pauseAll\",\n  \"aria2.forcePauseAll\",\n  \"aria2.unpause\",\n  \"aria2.unpauseAll\",\n  \"aria2.forceRemove\",\n  \"aria2.changePosition\",\n  \"aria2.tellStatus\",\n  \"aria2.getUris\",\n  \"aria2.getFiles\",\n  \"aria2.getServers\",\n  \"aria2.tellActive\",\n  \"aria2.tellWaiting\",\n  \"aria2.tellStopped\",\n  \"aria2.getOption\",\n  \"aria2.changeUri\",\n  \"aria2.changeOption\",\n  \"aria2.getGlobalOption\",\n  \"aria2.changeGlobalOption\",\n  \"aria2.purgeDownloadResult\",\n  \"aria2.removeDownloadResult\",\n  \"aria2.getVersion\",\n  \"aria2.getSessionInfo\",\n  \"aria2.shutdown\",\n  \"aria2.forceShutdown\",\n  \"aria2.getGlobalStat\",\n  \"aria2.saveSession\",\n  \"system.multicall\",\n  \"system.listMethods\",\n  \"system.listNotifications\"\n]\n</code></pre></p> <p>List the GIDs (identifiers) of all active downloads. Note that we must give the parameters as a JSON string. <pre><code>$ aria2p call tellactive -J '[[\"gid\"]]'\n[{\"gid\": \"b686cad55029d4df\"}, {\"gid\": \"4b39a1ad8fd94e26\"}, {\"gid\": \"9d331cc4b287e5df\"}, {\"gid\": \"8c9de0df753a5195\"}]\n</code></pre></p> <p>Pause a download using its GID. Note that when a single string argument is required, it can be passed directly with <code>-P</code>. <pre><code>$ aria2p call pause -P b686cad55029d4df\n\"b686cad55029d4df\"\n</code></pre></p> <p>Add a download using magnet URIs. This example uses <code>jq -r</code> to remove the quotation marks around the result. <pre><code>$ aria2p call adduri -J '[[\"magnet:?xt=urn:...\"]]' | jq -r\n4b39a1ad8fd94e26f\n</code></pre></p> <p>Purge download results (remove completed downloads from the list). <pre><code>$ aria2p call purge_download_result\n\"OK\"\n</code></pre></p>"},{"location":"#listen","title":"<code>listen</code>","text":"<pre><code>usage: aria2p listen [-h] [-c CALLBACKS_MODULE] [-t TIMEOUT]\n                     [event_types [event_types ...]]\n\nListen to notifications.\n\npositional arguments:\n  event_types           The types of notifications to process: start, pause,\n                        stop, error, complete or btcomplete. Example: aria2p\n                        listen error btcomplete. Useful if you want to spawn\n                        multiple specialized aria2p listener, for example one\n                        for each type of notification, but still want to use\n                        only one callback file.\n\noptional arguments:\n  -h, --help            Show this help message and exit.\n  -c CALLBACKS_MODULE, --callbacks-module CALLBACKS_MODULE\n                        Path to the Python module defining your notifications\n                        callbacks.\n  -t TIMEOUT, --timeout TIMEOUT\n                        Timeout in seconds to use when waiting for data over\n                        the WebSocket at each iteration. Use small values for\n                        faster reactivity when stopping to listen.\n</code></pre>"},{"location":"#pause","title":"<code>pause</code>","text":"<pre><code>usage: aria2p pause [-h] [-a] [-f] [gids [gids ...]]\n\nPause downloads.\n\npositional arguments:\n  gids         The GIDs of the downloads to pause.\n\noptional arguments:\n  -h, --help   Show this help message and exit.\n  -a, --all    Pause all the downloads.\n  -f, --force  Pause without contacting servers first.\n</code></pre>"},{"location":"#remove","title":"<code>remove</code>","text":"<pre><code>usage: aria2p remove [-h] [-a] [-f] [gids [gids ...]]\n\nRemove downloads.\n\npositional arguments:\n  gids         The GIDs of the downloads to remove.\n\noptional arguments:\n  -h, --help   Show this help message and exit.\n  -a, --all    Remove all the downloads.\n  -f, --force  Remove without contacting servers first.\n</code></pre>"},{"location":"#resume","title":"<code>resume</code>","text":"<pre><code>usage: aria2p resume [-h] [-a] [gids [gids ...]]\n\nResume downloads.\n\npositional arguments:\n  gids        The GIDs of the downloads to resume.\n\noptional arguments:\n  -h, --help  Show this help message and exit.\n  -a, --all   Resume all the downloads.\n</code></pre>"},{"location":"#show","title":"<code>show</code>","text":"<pre><code>usage: aria2p show [-h]\n\nShow the download progression.\n\noptional arguments:\n  -h, --help  Show this help message and exit.\n</code></pre>"},{"location":"#top","title":"<code>top</code>","text":"<pre><code>usage: aria2p top [-h]\n\nLaunch the top-like interactive interface.\n\noptional arguments:\n  -h, --help  Show this help message and exit.\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Error outputs like below when using <code>aria2p</code> as a Python library:</li> </ul> <pre><code>requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=6800): Max retries exceeded with url: /jsonrpc (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x1115b1908&gt;: Failed to establish a new connection: [Errno 61] Connection refused',))\n</code></pre> <p>Solution: <code>aria2c</code> needs to be up and running first.</p>"},{"location":"#support","title":"Support","text":"<p>To support me as an open-source software author, consider donating or be a supporter through one of the following platforms</p> <ul> <li>GitHub</li> <li>Ko-fi</li> <li>Liberapay</li> <li>Patreon</li> <li>Paypal</li> </ul> <p>Thank you!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0121-2024-12-25","title":"0.12.1 - 2024-12-25","text":"<p>Compare with 0.12.0</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Drop support for Python 3.8 (1ca3aac by Timoth\u00e9e Mazzucotelli).</li> <li>Use platformdirs instead of deprecated appdirs (95caaba by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Log error with hint about possibly too big torrent when adding it fails with a connection error (77d9fca by Timoth\u00e9e Mazzucotelli). Issue-130</li> </ul>"},{"location":"changelog/#0120-2024-01-11","title":"0.12.0 - 2024-01-11","text":"<p>Compare with 0.11.3</p>"},{"location":"changelog/#possible-breaking-changes","title":"Possible breaking changes","text":"<p>Automatic detection of API breaking changes thanks to Griffe:</p> <ul> <li>src/aria2p/api.py:23: <code>PathOrStr</code>: Public object was removed</li> <li>src/aria2p/downloads.py:16: <code>aria2p</code>: Public object was removed</li> <li>src/aria2p/downloads.py:19: <code>PathOrStr</code>: Public object was removed</li> <li>src/aria2p/interface.py:22: <code>Dict</code>: Public object was removed</li> <li>src/aria2p/interface.py:476: <code>Interface.width</code>: Attribute value was changed: None -&gt; 80</li> <li>src/aria2p/interface.py:475: <code>Interface.height</code>: Attribute value was changed: None -&gt; 20</li> <li>src/aria2p/interface.py:352: <code>Interface.screen</code>: Attribute value was changed: None -&gt; unset</li> <li>src/aria2p/interface.py:355: <code>Interface.scroller</code>: Attribute value was changed: None -&gt; unset</li> <li>src/aria2p/options.py:13: <code>aria2p</code>: Public object was removed</li> <li>src/aria2p/options.py:20: <code>GenericMeta</code>: Public object was removed</li> <li>src/aria2p/types.py:0: <code>&lt;module&gt;</code>: Public object was removed</li> <li>src/aria2p/utils.py:14: <code>Dict</code>: Public object was removed</li> <li>src/aria2p/utils.py:16: <code>pkg_resources</code>: Public object was removed</li> <li>src/aria2p/utils.py:17: <code>toml</code>: Public object was removed</li> <li>src/aria2p/utils.py:21: <code>PathOrStr</code>: Public object was removed</li> <li>src/aria2p/cli/commands/listen.py:10: <code>PathOrStr</code>: Public object was removed</li> </ul> <p>These objects removal have very few chances of breaking user code, because they're almost entirely related to type annotations for aria2p itself, which users shouldn't rely upon. The rest were non-public imports.</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix autoclear commands parsing (6b7555d by Timoth\u00e9e Mazzucotelli). Issue #128</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Use <code>importlib.metadata</code> instead of <code>pkg_resources</code> (e259a40 by Timoth\u00e9e Mazzucotelli).</li> <li>Use <code>tomli</code>, and <code>tomllib</code> on Python 3.11+ (8effdac by Micha\u0142 Fluder). PR #127</li> </ul>"},{"location":"changelog/#0113-2022-12-15","title":"0.11.3 - 2022-12-15","text":"<p>Compare with 0.11.2</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Don't clean up when retrying downloads (37b2253 by Timoth\u00e9e Mazzucotelli). Issue #114. Thanks @Links662!</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Import and use future annotations (721fef2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0112-2022-04-17","title":"0.11.2 - 2022-04-17","text":"<p>Compare with 0.11.1</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Don't crash when trying to compute a download's name (c0cfbce by Timoth\u00e9e Mazzucotelli). Issue #68, #103</li> </ul>"},{"location":"changelog/#0111-2021-12-17","title":"0.11.1 - 2021-12-17","text":"<p>Compare with 0.11.0</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix checking arguments of add-torrent and add-metalink (fa9ede5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0110-2021-12-17","title":"0.11.0 - 2021-12-17","text":"<p>Compare with 0.10.4</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Support passing options and position from the command-line (3ec3673 by jonnieey). PR #93</li> <li>Support transparency (use default colors) (ff35d2b by blackCauldron7). PR #84</li> <li>Support aria2c input files with options (a603961 by jonnieey). Issue #70, PR #91</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Reorganize CLI commands (3497d2b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0104-2021-01-06","title":"0.10.4 - 2021-01-06","text":"<p>Compare with 0.10.3</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Always depend on appdirs (not only in tui extra) (7f36a04 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0103-2020-12-30","title":"0.10.3 - 2020-12-30","text":"<p>Compare with 0.10.2</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Add missing extra dependencies for tui group (60f9e69 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0102-2020-12-30","title":"0.10.2 - 2020-12-30","text":"<p>Compare with 0.10.1</p>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Add back missing commands aliases (cd25e78 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0101-2020-11-28","title":"0.10.1 - 2020-11-28","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix missing toml dependency (4d385f1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0100-2020-11-28","title":"0.10.0 - 2020-11-28","text":"<p>Compare with 0.9.1</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Security fix (requests vulnerability) (17777c0 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix TUI crashes when removing files for downloads without (c066971 by jonnieey).</li> <li>Fix TUI crash when URI is longer than screen width (dc1f11b by Jonnieey).</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Use purge instead of autopurge in interface (045b4d3 by Timoth\u00e9e Mazzucotelli).</li> <li>Various quality improvements (e8aca77 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove deprecated subcommands (da9664c by Timoth\u00e9e Mazzucotelli).</li> <li>Move <code>add</code> command logic into API (6f36116 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add new downloads from TUI (with the <code>a</code> key by default) (052a0ae by Jonnieey).</li> <li>Add user configuration (f3512b7 by Jonnieey). References: #60, #62</li> <li>Add <code>retry_downloads</code> API method (77678f5 by Jonnieey).</li> </ul>"},{"location":"changelog/#091-2020-05-14","title":"0.9.1 - 2020-05-14","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Forbid version of <code>asciimatics</code> below 1.11.0 (c305b9b by Timoth\u00e9e Mazzucotelli). References: #57</li> </ul>"},{"location":"changelog/#090-2020-04-08","title":"0.9.0 - 2020-04-08","text":"<p>Compare with 0.8.1</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add a timeout to client's requests (26bb0b6 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #52</li> <li>Add the <code>is_torrent</code> property to <code>download</code> objects. (0c7760e by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #53</li> <li><code>download.bittorrent</code> returns <code>none</code> if no \"bittorrent\" key present (74106fe by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #53 BREAKING CHANGE: this could be a breaking change if your code does not check if <code>download.bittorrent</code> is an instance of <code>BitTorrent</code> before accessing its attributes.</li> </ul>"},{"location":"changelog/#081-2020-03-29","title":"0.8.1 - 2020-03-29","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fix download <code>followed_by</code> not being reset properly when updating (19510a7).   See issue #51.</li> </ul>"},{"location":"changelog/#080-2020-03-27","title":"0.8.0 - 2020-03-27","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Add a <code>live</code> property to <code>Download</code> (98a8504).   See issue #44.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Re-apply <code>pywal</code> color theme if any when screen is resized (3e19deb).</li> </ul>"},{"location":"changelog/#071-2020-01-18","title":"0.7.1 - 2020-01-18","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix Windows OSError when checking if path exists (2a17c75).   See issue #41.</li> </ul>"},{"location":"changelog/#070-2019-12-14","title":"0.7.0 - 2019-12-14","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#breaking-changes","title":"BREAKING CHANGES","text":"<ul> <li>Set asciimatics dependency as optional (<code>aria2p[tui]</code>) (95a404c).   Starting at version 0.7.0, you need to install aria2p with the <code>tui</code> extra if you want to use the interactive interface.   Example: <code>pip install aria2p[tui]</code>.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Remove deprecated <code>purge</code> and <code>purge_all</code> methods from API (6baf63c).</li> <li>Remove deprecated <code>purge</code> CLI command (8668c8d).</li> </ul>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>Add makefile rule to bundle app with <code>pyinstaller</code> (7eabbb4).</li> </ul>"},{"location":"changelog/#060-2019-10-20","title":"0.6.0 - 2019-10-20","text":"<p>Compare with 0.5.2</p>"},{"location":"changelog/#breaking-changes_1","title":"BREAKING CHANGES","text":"<ul> <li>Default command when calling <code>aria2p</code> without arguments is now <code>top</code> instead of <code>show</code>.</li> </ul>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add command \"add\", and allow multiple parameters for \"add-\" commands (12f8667).</li> <li>Add <code>-f, --from-file FILE</code> option to <code>add</code> commands (63a137d).</li> <li>Add a clean parameter to API.remove to delete aria2 control file (d4b9a51).</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Commands add-magnet, add-torrent and add-metalink are now called add-magnets, add-torrents and add-metalinks.   Previous names are added as aliases to maintain backward compatibility.</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Functions <code>cli.subcommand_add_magnet</code>, <code>cli.subcommand_add_torrent</code> or <code>cli.subcommand_add_metalink</code>   are deprecated in favor of their pluralized names,   <code>cli.subcommand_add_magnets</code>, <code>cli.subcommand_add_torrents</code> or <code>cli.subcommand_add_metalinks</code>,   and will be removed in version 0.9.0.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Always force remove files when removing download (7283a15).</li> <li>Don't try to fetch download when GID is None (8970385).</li> </ul>"},{"location":"changelog/#052-2019-10-15","title":"0.5.2 - 2019-10-15","text":"<p>Compare with 0.5.1</p>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Don't crash when trying to remove a single file (14114c1).</li> </ul>"},{"location":"changelog/#051-2019-10-15","title":"0.5.1 - 2019-10-15","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Fix interface exit (oops) (ca4adc5).</li> </ul>"},{"location":"changelog/#050-2019-10-15","title":"0.5.0 - 2019-10-15","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#breaking-changes_2","title":"BREAKING CHANGES","text":"<ul> <li>Commands finishing with <code>-all</code> were removed. Use their equivalent with the <code>-a</code> or <code>--all</code> option.   Example: <code>aria2p pause-all</code> becomes <code>aria2p pause --all</code>.</li> </ul>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Add log path global option (7103e0b).</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Interface does not crash anymore when trying to remove a completed/failed download (157e137).   See issue GH-31.</li> <li>Run extra arguments-checks for aliases as well (cb70dae).   See issue GH-15.</li> </ul>"},{"location":"changelog/#040-2019-10-13","title":"0.4.0 - 2019-10-13","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add interactive interface (top command) (last commit: d8a2db2).   Run the interactive interface with <code>aria2p top</code>. Hit \"h\" to show help.   The interface is not finished, but I'm releasing it now to get early feedback.</li> <li> <p>Api</p> <p>add option to remove files as well when removing downloads (981dcc0).</p> </li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Fix Download.move_up method (it was doing the inverse) (96a287a).</li> </ul>"},{"location":"changelog/#030-2019-10-11","title":"0.3.0 - 2019-10-11","text":"<p>Compare with 0.2.5</p>"},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Add listen subcommand (09195ae).</li> <li>Implement notifications listener (33ee9ae).</li> <li>Provide function to enable/configure logger (8620a09).</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Fix API pause_all and resume_all methods (0bf2209).   See issue GH-24.</li> </ul>"},{"location":"changelog/#025-2019-08-09","title":"0.2.5 - 2019-08-09","text":"<p>Compare with 0.2.4</p>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Use path for name when download is metadata (d18af50).</li> </ul>"},{"location":"changelog/#024-2019-08-09","title":"0.2.4 - 2019-08-09","text":"<p>Compare with 0.2.3</p>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Don't cause exception when download name is not ready (604a0ab).</li> </ul>"},{"location":"changelog/#023-2019-08-08","title":"0.2.3 - 2019-08-08","text":"<p>Compare with 0.2.2</p>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Add some aliases (14ef63a).</li> <li>Add file moving and purge ability to Download class (08d129a).</li> <li>Add move/copy files methods to API (e1d3994).</li> <li>Combine -all commands to normal ones, with -a, --all option, keep old ones as deprecated (e5d287c and 939402f).</li> <li>Improve exceptions handling with <code>loguru</code> (e0ded18).</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Cast return value in get method with argument (5ee651a).</li> <li>Fix Download.name and always initialize struct arguments to empty dictionaries (874deb9).</li> <li>Pass exceptions when download result cannot be removed (9a7659e).</li> </ul>"},{"location":"changelog/#022-2019-02-21","title":"0.2.2 - 2019-02-21","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#documented","title":"Documented","text":"<ul> <li>Add configuration documentation (9525743).</li> <li>Add information in README (840c4b5).</li> <li>Add credits (6900eb2).</li> </ul>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Fix format of secret in params (e01fd9c).</li> <li>Print warning when connection to remote fails (57287fb).</li> </ul>"},{"location":"changelog/#021-2019-01-23","title":"0.2.1 - 2019-01-23","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Fix commands not being mapped properly (f9a0b29).</li> </ul>"},{"location":"changelog/#020-2019-01-23","title":"0.2.0 - 2019-01-23","text":"<p>Compare with 0.1.7</p> <p>Version 0.2.0 adds subcommands to the CLI tool. The package now also provides documentation and tests. Various improvements and fixes. Status is still alpha, things might break!</p>"},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Add subcommands to CLI (93821cc).</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Fix Download following API refactor (37f3b71).</li> <li>Fix encoding torrent content to base64/utf-8 (a17eb92).</li> </ul>"},{"location":"changelog/#017-2018-12-29","title":"0.1.7 - 2018-12-29","text":"<p>Compare with 0.1.6</p>"},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Fix specifier for Python version (allow 3.6+) (f451df9).   See issue GH-1.</li> </ul>"},{"location":"changelog/#016-2018-12-26","title":"0.1.6 - 2018-12-26","text":"<p>Compare with 0.1.5</p>"},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Add methods to Download to improve usability (5fe4649).</li> <li>Add refetch method for download objects (c87e752).</li> <li>Add upload speed to display (5c8be6c).</li> </ul>"},{"location":"changelog/#misc_1","title":"Misc","text":"<ul> <li>Handle return code and exceptions better (14f47f8).</li> <li>Improve JSONRPC errors messages, use defaults (a3692dc).</li> <li>Write documentation (f5c9ffd).</li> </ul>"},{"location":"changelog/#015-2018-12-20","title":"0.1.5 - 2018-12-20","text":"<p>Compare with 0.1.4</p>"},{"location":"changelog/#misc_2","title":"Misc","text":"<ul> <li>Improve basic display (84ae386).</li> </ul>"},{"location":"changelog/#014-2018-12-20","title":"0.1.4 - 2018-12-20","text":"<p>Compare with 0.1.3</p>"},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Add download speed and eta to display (1dd23bc).</li> </ul>"},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>Fix error handling in client.post (7f9e8aa).</li> </ul>"},{"location":"changelog/#misc_3","title":"Misc","text":"<ul> <li>Use dynamic get/set attr for options (fa0b962).</li> <li>Use properties (6efe3a6).</li> </ul>"},{"location":"changelog/#013-2018-12-17","title":"0.1.3 - 2018-12-17","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#misc_4","title":"Misc","text":"<ul> <li>Various tweaks and improvements for packaging the application.</li> </ul>"},{"location":"changelog/#010-2018-12-17","title":"0.1.0 - 2018-12-17","text":"<p>Compare with first commit</p>"},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Add pyproject.toml for black configuration (dacb85e).</li> <li>Add README (683086c).</li> </ul>"},{"location":"changelog/#misc_5","title":"Misc","text":"<ul> <li>Package with Poetry! (648d0a5).</li> <li>Hello Git(Hub|Lab) (878497b).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Since version 0.10, aria2p reads configuration from <code>$XDG_CONFIG_HOME/aria2p/config.toml</code>.</p> <p>Things that can be configured are:</p> <ul> <li>key bindings</li> <li>colors</li> </ul> <p>Upon running aria2p version 0.10 or above, the configuration will be created with default values if it doesn't already exist.</p> <p>The format of the configuration file is TOML.</p> <p>You can bind several key to a single action if you want:</p> <pre><code>FOLLOW_ROW = \"F\"    # only one key\nHELP = [\"F1\", \"?\"]  # multiple keys\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd aria2p\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run aria2p [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build aria2p. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License asciimatics A cross-platform package to replace curses (mouse/keyboard input &amp; text colours/positioning) and create ASCII animations <code>&gt;=1.13</code> <code>1.15.0</code> Apache 2.0 certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.12.14</code> MPL-2.0 charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT colorama Cross-platform colored terminal text. <code>&gt;=0.3.4</code> <code>0.4.6</code> BSD License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License loguru Python logging made (stupidly) simple <code>&gt;=0.5</code> <code>0.7.3</code> MIT License pillow Python Imaging Library (Fork) <code>&gt;=2.7.0</code> <code>11.0.0</code> MIT-CMU platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=4.2, &gt;=2.2</code> <code>4.3.6</code> MIT pyfiglet Pure-python FIGlet implementation <code>&gt;=0.7.2</code> <code>1.0.2</code> MIT pyperclip A cross-platform clipboard module for Python. (Only handles plain text for now.) <code>&gt;=1.8</code> <code>1.9.0</code> BSD requests Python HTTP for Humans. <code>&gt;=2.30.0, &gt;=2.19, &lt;3.0</code> <code>2.32.3</code> Apache-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=2, &gt;=1.21.1, &lt;3</code> <code>2.3.0</code> MIT License wcwidth Measures the displayed width of unicode strings in a terminal <code>0.2.13</code> MIT websocket-client WebSocket client for Python with low level API options <code>&gt;=0.58</code> <code>1.8.0</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License annotated-types Reusable constraint types to use with typing.Annotated <code>&gt;=0.6.0</code> <code>0.7.0</code> MIT License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License anyio High level compatibility layer for multiple asynchronous event loop implementations <code>&gt;=3.4.0, &lt;5</code> <code>4.7.0</code> MIT appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.16.0</code> BSD-3-Clause backports.tarfile Backport of CPython tarfile module <code>1.2.0</code> MIT License black The uncompromising code formatter. <code>&gt;=24.4</code> <code>24.10.0</code> MIT build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.12.14</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>&gt;=0.3.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.6.9</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.0</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.4</code> <code>1.4.3</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC fastapi FastAPI framework, high performance, easy to learn, fast to code, ready for production <code>&gt;=0.100</code> <code>0.115.6</code> MIT License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.11</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.49</code> <code>1.5.1.1.2.0</code> ISC h11 A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 <code>&gt;=0.8</code> <code>0.14.0</code> MIT htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License importlib_metadata Read metadata from Python packages <code>&gt;=4.6</code> <code>8.5.0</code> Apache Software License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.8.0</code> MIT License Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.5</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.9.3.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>3.0.2</code> BSD License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.2</code> <code>1.2.0</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.3.0</code> MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.5.44+insiders.4.53.14</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.25</code> <code>0.27.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.12.2.1.9.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.5.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.14.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.20</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pkginfo Query metadata from sdists / bdists / installed packages. <code>&gt;=1.8.1</code> <code>1.12.0</code> MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=4.2, &gt;=2.2</code> <code>4.3.6</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT psutil Cross-platform lib for process and system monitoring in Python. <code>&gt;=5.9.5</code> <code>6.1.1</code> BSD-3-Clause ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydantic Data validation using Python type hints <code>&gt;=1.7.4, &lt;3.0.0, !=2.1.0, !=2.0.1, !=2.0.0, !=1.8.1, !=1.8</code> <code>2.10.4</code> MIT pydantic_core Core functionality for Pydantic validation and serialization <code>==2.27.2</code> <code>2.27.2</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.18.0</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.13</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.4</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-rerunfailures pytest plugin to re-run tests to eliminate flaky failures <code>&gt;=11.1</code> <code>15.0</code> Mozilla Public License 2.0 (MPL 2.0) pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>2024.2</code> MIT PyYAML YAML parser and emitter for Python <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 regex Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.11.6</code> Apache Software License requests Python HTTP for Humans. <code>&gt;=2.30.0, &gt;=2.19, &lt;3.0</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 responses A utility library for mocking out the <code>requests</code> Python library. <code>&gt;=0.23</code> <code>0.25.3</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.8.4</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.1</code> BSD sniffio Sniff out which async library your code is running under <code>&gt;=1.1</code> <code>1.3.1</code> MIT OR Apache-2.0 starlette The little ASGI library that shines. <code>&gt;=0.40.0, &lt;0.42.0</code> <code>0.41.3</code> BSD-3-Clause twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.0.1</code> Apache Software License types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20241204</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20241221</code> Apache-2.0 types-requests Typing stubs for requests <code>&gt;=2.32</code> <code>2.32.0.20241016</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.6.0</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=2, &gt;=1.21.1, &lt;3</code> <code>2.3.0</code> MIT License uvicorn The lightning-fast ASGI server. <code>&gt;=0.23</code> <code>0.34.0</code> BSD-3-Clause watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=3.20</code> <code>3.21.0</code> MIT License <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2018, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Extensive usage instructions will be added later, when the application is more stable. You can also refer to the README / Overview.</p>"},{"location":"usage/#listening-to-notifications","title":"Listening to notifications","text":"<p>Since version 0.3, it is possible to listen to the server notifications thanks to the <code>websocket-client</code> Python package.</p> <p>The server sends a notification to the client through a WebSocket for each of these events: - a download is started, - a download is paused, - a download is stopped, - a download fails, - a download is complete, - a bittorrent download is complete (received 100%, still seeding).</p>"},{"location":"usage/#through-the-command-line","title":"Through the command line","text":"<p>The command line interface offers a <code>listen</code> subcommand:</p> <pre><code>aria2p listen -c /path/to/callbacks.py\n</code></pre> <p>In the future, a default path will be used for the callbacks module.</p> <p>The <code>callbacks.py</code> file is a Python module defining one or more of these callback functions: - <code>on_download_start</code>, - <code>on_download_pause</code>, - <code>on_download_stop</code>, - <code>on_download_error</code>, - <code>on_download_complete</code>, - <code>on_bt_download_complete</code>.</p> <p>Each one of these callbacks must accept two parameters: the API instance and the GID of the download. You can use the names you want.</p> <p>Example:</p> <pre><code># ~/callbacks.py\nimport subprocess\nfrom pathlib import Path\n\n\ndef on_download_error(api, gid):\n    # pop a desktop notification using notify-send\n    download = api.get_download(gid)\n    summary = f\"A download failed\"\n    body = f\"{download.name}\\n{download.error_message} (code: {download.error_code}).\"\n    subprocess.call([\"notify-send\", \"-t\", \"10000\", summary, body])\n\n\ndef on_download_complete(api, gid):\n    download = api.get_download(gid)\n    # purge if it was a magnet metadata download\n    if download.is_metadata:\n        download.purge()\n        return\n    # move files to another folder\n    destination = Path.home() / \"library\"\n    if download.move_files(destination):\n        download.control_file_path.unlink()\n        download.purge()\n</code></pre> <p>You can now use this callbacks module with <code>aria2p listen -c ~/callbacks.py</code>.</p>"},{"location":"usage/#process-specific-types-of-notifications","title":"Process specific types of notifications","text":"<p>If you want to listen to only a particular type of notification, even though your callbacks module defines all the possible callbacks, you can pass additional arguments:</p> <pre><code># let say you want to run multiple listeners:\n# one for errors, one for completions, and one for the rest\naria2p listen -c ~/callbacks.py error &amp;\naria2p listen -c ~/callbacks.py complete btcomplete &amp;\naria2p listen -c ~/callbacks.py start pause stop &amp;\n</code></pre> <p>This is possible because the server sends the notifications to every client that is listening.</p>"},{"location":"usage/#interruption","title":"Interruption","text":"<p>To stop listening, send a SIGTERM or SIGINT signal to the process, for example by hitting Control-C if aria2p is running in the foreground. If a notification is currently being handled, it will finish before the listener is stopped.</p>"},{"location":"usage/#timeout","title":"Timeout","text":"<p>If you find the default five seconds to be too long when interrupting the process, you can decrease this timeout value by passing the <code>-t</code> or <code>--timeout</code> option:</p> <pre><code>aria2p listen -c ~/callbacks.py -t 1\n</code></pre>"},{"location":"usage/#programmatically","title":"Programmatically","text":"<p>Both the <code>API</code> and <code>Client</code> classes provide a method called <code>listen_to_notifications</code>, and another one called <code>stop_listening</code>. Please check their respective documentation. </p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> aria2p<ul> <li> api</li> <li> cli<ul> <li> commands<ul> <li> add</li> <li> add_magnet</li> <li> add_metalink</li> <li> add_torrent</li> <li> call</li> <li> listen</li> <li> pause</li> <li> purge</li> <li> remove</li> <li> resume</li> <li> show</li> <li> top</li> </ul> </li> <li> main</li> <li> parser</li> </ul> </li> <li> client</li> <li> debug</li> <li> downloads</li> <li> interface</li> <li> options</li> <li> stats</li> <li> utils</li> </ul> </li> </ul>"},{"location":"reference/aria2p/","title":"aria2p","text":""},{"location":"reference/aria2p/#aria2p","title":"aria2p","text":"<p>aria2p package.</p> <p>Command-line tool and library to interact with an aria2c daemon process with JSON-RPC.</p> <p>Modules:</p> <ul> <li> <code>api</code>           \u2013            <p>Aria2 API.</p> </li> <li> <code>cli</code>           \u2013            <p>The CLI submodule.</p> </li> <li> <code>client</code>           \u2013            <p>Client module.</p> </li> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> <li> <code>downloads</code>           \u2013            <p>This module defines the BitTorrent, File and Download classes.</p> </li> <li> <code>interface</code>           \u2013            <p>This module contains all the code responsible for the HTOP-like interface.</p> </li> <li> <code>options</code>           \u2013            <p>Module for aria2c options.</p> </li> <li> <code>stats</code>           \u2013            <p>This module defines the Stats class.</p> </li> <li> <code>utils</code>           \u2013            <p>Utils module.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>API</code>           \u2013            <p>A class providing high-level methods to interact with a remote aria2c process.</p> </li> <li> <code>BitTorrent</code>           \u2013            <p>Information retrieved from a torrent file.</p> </li> <li> <code>Client</code>           \u2013            <p>The JSON-RPC client class.</p> </li> <li> <code>ClientException</code>           \u2013            <p>An exception specific to JSON-RPC errors.</p> </li> <li> <code>Download</code>           \u2013            <p>Class containing all information about a download, as retrieved with the client.</p> </li> <li> <code>File</code>           \u2013            <p>Information about a download's file.</p> </li> <li> <code>Options</code>           \u2013            <p>This class holds information retrieved with the <code>get_option</code> or <code>get_global_option</code> methods of the client.</p> </li> <li> <code>Stats</code>           \u2013            <p>This class holds information retrieved with the <code>get_global_stat</code> method of the client.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>enable_logger</code>             \u2013              <p>Enable the logging of messages.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.API","title":"API","text":"<pre><code>API(client: Client | None = None)\n</code></pre> <p>A class providing high-level methods to interact with a remote aria2c process.</p> <p>This class is instantiated with a reference to a <code>Client</code> instance. It then uses this client to call remote procedures, or remote methods. While the client methods reflect exactly what aria2c is providing through JSON-RPC, this class's methods allow for easier / faster control of the remote process. It also wraps the information the client retrieves in Python object, like <code>Download</code>, allowing for even more Pythonic interactions, without worrying about payloads, responses, JSON, etc..</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>Client | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the aria2p.client.Client class.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add</code>             \u2013              <p>Add a download (guess its type).</p> </li> <li> <code>add_magnet</code>             \u2013              <p>Add a download with a Magnet URI.</p> </li> <li> <code>add_metalink</code>             \u2013              <p>Add a download with a Metalink file.</p> </li> <li> <code>add_torrent</code>             \u2013              <p>Add a download with a torrent file (usually .torrent extension).</p> </li> <li> <code>add_uris</code>             \u2013              <p>Add a download with a URL (or more).</p> </li> <li> <code>autopurge</code>             \u2013              <p>Purge completed, removed or failed downloads from the queue.</p> </li> <li> <code>copy_files</code>             \u2013              <p>Copy downloaded files to another directory.</p> </li> <li> <code>get_download</code>             \u2013              <p>Get a <code>Download</code> object thanks to its GID.</p> </li> <li> <code>get_downloads</code>             \u2013              <p>Get a list of <code>Download</code> object thanks to their GIDs.</p> </li> <li> <code>get_global_options</code>             \u2013              <p>Get the global options.</p> </li> <li> <code>get_options</code>             \u2013              <p>Get options for each of the given downloads.</p> </li> <li> <code>get_stats</code>             \u2013              <p>Get the stats of the remote aria2c process.</p> </li> <li> <code>listen_to_notifications</code>             \u2013              <p>Start listening to aria2 notifications via WebSocket.</p> </li> <li> <code>move</code>             \u2013              <p>Move a download in the queue, relatively to its current position.</p> </li> <li> <code>move_down</code>             \u2013              <p>Move a download down in the queue.</p> </li> <li> <code>move_files</code>             \u2013              <p>Move downloaded files to another directory.</p> </li> <li> <code>move_to</code>             \u2013              <p>Move a download in the queue, with absolute positioning.</p> </li> <li> <code>move_to_bottom</code>             \u2013              <p>Move a download to the bottom of the queue.</p> </li> <li> <code>move_to_top</code>             \u2013              <p>Move a download to the top of the queue.</p> </li> <li> <code>move_up</code>             \u2013              <p>Move a download up in the queue.</p> </li> <li> <code>parse_input_file</code>             \u2013              <p>Parse a file with URIs or an aria2c input file.</p> </li> <li> <code>pause</code>             \u2013              <p>Pause the given (active) downloads.</p> </li> <li> <code>pause_all</code>             \u2013              <p>Pause all (active) downloads.</p> </li> <li> <code>purge</code>             \u2013              <p>Purge completed, removed or failed downloads from the queue.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove the given downloads from the list.</p> </li> <li> <code>remove_all</code>             \u2013              <p>Remove all downloads from the list.</p> </li> <li> <code>remove_files</code>             \u2013              <p>Remove downloaded files.</p> </li> <li> <code>resume</code>             \u2013              <p>Resume (unpause) the given downloads.</p> </li> <li> <code>resume_all</code>             \u2013              <p>Resume (unpause) all downloads.</p> </li> <li> <code>retry_downloads</code>             \u2013              <p>Resume failed downloads from where they left off with new GIDs.</p> </li> <li> <code>search</code>             \u2013              <p>Not implemented.</p> </li> <li> <code>set_global_options</code>             \u2013              <p>Set global options.</p> </li> <li> <code>set_options</code>             \u2013              <p>Set options for specific downloads.</p> </li> <li> <code>split_input_file</code>             \u2013              <p>Helper to split downloads in an input file.</p> </li> <li> <code>stop_listening</code>             \u2013              <p>Stop listening to notifications.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def __init__(self, client: Client | None = None) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        client: An instance of the [aria2p.client.Client][] class.\n    \"\"\"\n    self.client = client or Client()\n    self.listener: threading.Thread | None = None\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.add","title":"add","text":"<pre><code>add(\n    uri: str,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]\n</code></pre> <p>Add a download (guess its type).</p> <p>If the provided URI is in fact a file-path, and is neither a torrent or a metalink, then we read its lines and try to add each line as a download, recursively.</p> <p>Parameters:</p> <ul> <li> <code>uri</code>               (<code>str</code>)           \u2013            <p>The URI or file-path to add.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>The created downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add(\n    self,\n    uri: str,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]:\n    \"\"\"Add a download (guess its type).\n\n    If the provided URI is in fact a file-path, and is neither a torrent or a metalink,\n    then we read its lines and try to add each line as a download, recursively.\n\n    Parameters:\n        uri: The URI or file-path to add.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The created downloads.\n    \"\"\"\n    new_downloads = []\n    path = Path(uri)\n\n    # On Windows, path.exists() generates an OSError when path is an URI\n    # See https://github.com/pawamoy/aria2p/issues/41\n    try:\n        path_exists = path.exists()\n    except OSError:\n        path_exists = False\n\n    if path_exists:\n        if path.suffix == \".torrent\":\n            new_downloads.append(self.add_torrent(path, options=options, position=position))\n        elif path.suffix == \".metalink\":\n            new_downloads.extend(self.add_metalink(path, options=options, position=position))\n        else:\n            for uris, download_options in self.parse_input_file(path):\n                # Add batch downloads in specified position in queue.\n                new_downloads.append(self.add_uris(uris, options=download_options, position=position))\n                if position is not None:\n                    position += 1\n\n    elif uri.startswith(\"magnet:?\"):\n        new_downloads.append(self.add_magnet(uri, options=options, position=position))\n    else:\n        new_downloads.append(self.add_uris([uri], options=options, position=position))\n\n    return new_downloads\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.add_magnet","title":"add_magnet","text":"<pre><code>add_magnet(\n    magnet_uri: str,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download\n</code></pre> <p>Add a download with a Magnet URI.</p> <p>Parameters:</p> <ul> <li> <code>magnet_uri</code>               (<code>str</code>)           \u2013            <p>The Magnet URI.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The newly created download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_magnet(self, magnet_uri: str, options: OptionsType | None = None, position: int | None = None) -&gt; Download:\n    \"\"\"Add a download with a Magnet URI.\n\n    Parameters:\n        magnet_uri: The Magnet URI.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download object.\n    \"\"\"\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    gid = self.client.add_uri([magnet_uri], client_options, position)\n\n    return self.get_download(gid)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.add_metalink","title":"add_metalink","text":"<pre><code>add_metalink(\n    metalink_file_path: str | Path,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]\n</code></pre> <p>Add a download with a Metalink file.</p> <p>Parameters:</p> <ul> <li> <code>metalink_file_path</code>               (<code>str | Path</code>)           \u2013            <p>The path to the Metalink file.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>The newly created download objects.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_metalink(\n    self,\n    metalink_file_path: str | Path,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]:\n    \"\"\"Add a download with a Metalink file.\n\n    Parameters:\n        metalink_file_path: The path to the Metalink file.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download objects.\n    \"\"\"\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    with open(metalink_file_path, \"rb\") as stream:\n        metalink_contents = stream.read()\n    encoded_contents = b64encode(metalink_contents).decode(\"utf8\")\n\n    gids = self.client.add_metalink(encoded_contents, client_options, position)\n\n    return self.get_downloads(gids)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.add_torrent","title":"add_torrent","text":"<pre><code>add_torrent(\n    torrent_file_path: str | Path,\n    uris: list[str] | None = None,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download\n</code></pre> <p>Add a download with a torrent file (usually .torrent extension).</p> <p>Parameters:</p> <ul> <li> <code>torrent_file_path</code>               (<code>str | Path</code>)           \u2013            <p>The path to the torrent file.</p> </li> <li> <code>uris</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of URIs used for Web-seeding.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The newly created download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_torrent(\n    self,\n    torrent_file_path: str | Path,\n    uris: list[str] | None = None,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download:\n    \"\"\"Add a download with a torrent file (usually .torrent extension).\n\n    Parameters:\n        torrent_file_path: The path to the torrent file.\n        uris: A list of URIs used for Web-seeding.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download object.\n    \"\"\"\n    if uris is None:\n        uris = []\n\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    with open(torrent_file_path, \"rb\") as stream:\n        torrent_contents = stream.read()\n    encoded_contents = b64encode(torrent_contents).decode(\"utf8\")\n\n    try:\n        gid = self.client.add_torrent(encoded_contents, uris, client_options, position)\n    except ConnectionError:\n        logger.error(\"Torrent too big? Try increasing max size with aria2c's --rpc-max-request-size option\")\n        raise\n\n    return self.get_download(gid)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.add_uris","title":"add_uris","text":"<pre><code>add_uris(\n    uris: list[str],\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download\n</code></pre> <p>Add a download with a URL (or more).</p> <p>Parameters:</p> <ul> <li> <code>uris</code>               (<code>list[str]</code>)           \u2013            <p>A list of URIs that point to the same resource.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The newly created download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_uris(\n    self,\n    uris: list[str],\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download:\n    \"\"\"Add a download with a URL (or more).\n\n    Parameters:\n        uris: A list of URIs that point to the same resource.\n        options: An instance of the `Options` class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download object.\n\n    \"\"\"\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    gid = self.client.add_uri(uris, client_options, position)\n\n    return self.get_download(gid)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.autopurge","title":"autopurge","text":"<pre><code>autopurge() -&gt; bool\n</code></pre> <p>Purge completed, removed or failed downloads from the queue.</p> <p>Deprecated. Use <code>purge</code> instead.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def autopurge(self) -&gt; bool:\n    \"\"\"Purge completed, removed or failed downloads from the queue.\n\n    Deprecated. Use [`purge`][aria2p.api.API.purge] instead.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    logger.warning(\"Deprecation warning: API method 'autopurge' is deprecated, use 'purge' instead.\")\n    return self.purge()\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.copy_files","title":"copy_files  <code>staticmethod</code>","text":"<pre><code>copy_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,\n) -&gt; list[bool]\n</code></pre> <p>Copy downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>the list of downloads for which to move files.</p> </li> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to copy files into.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>@staticmethod\ndef copy_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[bool]:\n    \"\"\"Copy downloaded files to another directory.\n\n    Parameters:\n        downloads:  the list of downloads for which to move files.\n        to_directory: The target directory to copy files into.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    if isinstance(to_directory, str):\n        to_directory = Path(to_directory)\n\n    # raises FileExistsError when target is already a file\n    to_directory.mkdir(parents=True, exist_ok=True)\n\n    results = []\n    for download in downloads:\n        if download.is_complete or force:\n            for path in download.root_files_paths:\n                if path.is_dir():\n                    shutil.copytree(str(path), str(to_directory / path.name))\n                elif path.is_file():\n                    shutil.copy(str(path), str(to_directory))\n\n            results.append(True)\n        else:\n            results.append(False)\n    return results\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.get_download","title":"get_download","text":"<pre><code>get_download(gid: str) -&gt; Download\n</code></pre> <p>Get a <code>Download</code> object thanks to its GID.</p> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The GID of the download to get.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The retrieved download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_download(self, gid: str) -&gt; Download:\n    \"\"\"Get a [`Download`][aria2p.downloads.Download] object thanks to its GID.\n\n    Parameters:\n        gid: The GID of the download to get.\n\n    Returns:\n        The retrieved download object.\n    \"\"\"\n    return Download(self, self.client.tell_status(gid))\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.get_downloads","title":"get_downloads","text":"<pre><code>get_downloads(\n    gids: list[str] | None = None,\n) -&gt; list[Download]\n</code></pre> <p>Get a list of <code>Download</code> object thanks to their GIDs.</p> <p>Parameters:</p> <ul> <li> <code>gids</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The GIDs of the downloads to get. If None, return all the downloads.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>The retrieved download objects.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_downloads(self, gids: list[str] | None = None) -&gt; list[Download]:\n    \"\"\"Get a list of [`Download`][aria2p.downloads.Download] object thanks to their GIDs.\n\n    Parameters:\n        gids: The GIDs of the downloads to get. If None, return all the downloads.\n\n    Returns:\n        The retrieved download objects.\n    \"\"\"\n    downloads = []\n\n    if gids:\n        for gid in gids:\n            downloads.append(Download(self, self.client.tell_status(gid)))\n    else:\n        structs = []\n        structs.extend(self.client.tell_active())\n        structs.extend(self.client.tell_waiting(0, 1000))\n        structs.extend(self.client.tell_stopped(0, 1000))\n        downloads = [Download(self, struct) for struct in structs]\n\n    return downloads\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.get_global_options","title":"get_global_options","text":"<pre><code>get_global_options() -&gt; Options\n</code></pre> <p>Get the global options.</p> <p>Returns:</p> <ul> <li> <code>Options</code>           \u2013            <p>The global aria2c options.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_global_options(self) -&gt; Options:\n    \"\"\"Get the global options.\n\n    Returns:\n        The global aria2c options.\n    \"\"\"\n    return Options(self, self.client.get_global_option())\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.get_options","title":"get_options","text":"<pre><code>get_options(downloads: list[Download]) -&gt; list[Options]\n</code></pre> <p>Get options for each of the given downloads.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to get the options of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Options]</code>           \u2013            <p>Options object for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_options(self, downloads: list[Download]) -&gt; list[Options]:\n    \"\"\"Get options for each of the given downloads.\n\n    Parameters:\n        downloads: The list of downloads to get the options of.\n\n    Returns:\n        Options object for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    options = []\n    for download in downloads:\n        options.append(Options(self, self.client.get_option(download.gid), download))\n    return options\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Stats\n</code></pre> <p>Get the stats of the remote aria2c process.</p> <p>Returns:</p> <ul> <li> <code>Stats</code>           \u2013            <p>The global stats returned by the remote process.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_stats(self) -&gt; Stats:\n    \"\"\"Get the stats of the remote aria2c process.\n\n    Returns:\n        The global stats returned by the remote process.\n    \"\"\"\n    return Stats(self.client.get_global_stat())\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.listen_to_notifications","title":"listen_to_notifications","text":"<pre><code>listen_to_notifications(\n    threaded: bool = False,\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,\n) -&gt; None\n</code></pre> <p>Start listening to aria2 notifications via WebSocket.</p> <p>This method differs from <code>Client.listen_to_notifications</code> in that it expects callbacks accepting two arguments, <code>api</code> and <code>gid</code>, instead of only <code>gid</code>. Accepting <code>api</code> allows to use the high-level methods of the <code>API</code> class.</p> <p>Stop listening to notifications with the <code>API.stop_listening</code> method.</p> <p>Parameters:</p> <ul> <li> <code>threaded</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to start the listening loop in a thread or not (non-blocking or blocking).</p> </li> <li> <code>on_download_start</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStart</code> event.</p> </li> <li> <code>on_download_pause</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadPause</code> event.</p> </li> <li> <code>on_download_stop</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStop</code> event.</p> </li> <li> <code>on_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadComplete</code> event.</p> </li> <li> <code>on_download_error</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadError</code> event.</p> </li> <li> <code>on_bt_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onBtDownloadComplete</code> event.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds.</p> </li> <li> <code>handle_signals</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def listen_to_notifications(\n    self,\n    threaded: bool = False,  # noqa: FBT001,FBT002\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,  # noqa: FBT001,FBT002\n) -&gt; None:\n    \"\"\"Start listening to aria2 notifications via WebSocket.\n\n    This method differs from [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications]\n    in that it expects callbacks accepting two arguments, `api` and `gid`, instead of only `gid`.\n    Accepting `api` allows to use the high-level methods of the [`API`][aria2p.api.API] class.\n\n    Stop listening to notifications with the [`API.stop_listening`][aria2p.api.API.stop_listening] method.\n\n    Parameters:\n        threaded: Whether to start the listening loop in a thread or not (non-blocking or blocking).\n        on_download_start: Callback for the `onDownloadStart` event.\n        on_download_pause: Callback for the `onDownloadPause` event.\n        on_download_stop: Callback for the `onDownloadStop` event.\n        on_download_complete: Callback for the `onDownloadComplete` event.\n        on_download_error: Callback for the `onDownloadError` event.\n        on_bt_download_complete: Callback for the `onBtDownloadComplete` event.\n        timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity\n            when stopping to listen. Default is 5 seconds.\n        handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.\n    \"\"\"\n\n    def closure(callback: Callable | None) -&gt; Callable | None:\n        return functools.partial(callback, self) if callable(callback) else None\n\n    kwargs = {\n        \"on_download_start\": closure(on_download_start),\n        \"on_download_pause\": closure(on_download_pause),\n        \"on_download_stop\": closure(on_download_stop),\n        \"on_download_complete\": closure(on_download_complete),\n        \"on_download_error\": closure(on_download_error),\n        \"on_bt_download_complete\": closure(on_bt_download_complete),\n        \"timeout\": timeout,\n        \"handle_signals\": handle_signals,\n    }\n\n    if threaded:\n        kwargs[\"handle_signals\"] = False\n        self.listener = threading.Thread(target=self.client.listen_to_notifications, kwargs=kwargs)\n        self.listener.start()\n    else:\n        self.client.listen_to_notifications(**kwargs)  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.move","title":"move","text":"<pre><code>move(download: Download, pos: int) -&gt; int\n</code></pre> <p>Move a download in the queue, relatively to its current position.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move(self, download: Download, pos: int) -&gt; int:\n    \"\"\"Move a download in the queue, relatively to its current position.\n\n    Parameters:\n        download: The download object to move.\n        pos: The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.).\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, pos, \"POS_CUR\")\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.move_down","title":"move_down","text":"<pre><code>move_down(download: Download, pos: int = 1) -&gt; int\n</code></pre> <p>Move a download down in the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move down. With negative values, will move up (use move or move_up instead).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_down(self, download: Download, pos: int = 1) -&gt; int:\n    \"\"\"Move a download down in the queue.\n\n    Parameters:\n        download: The download object to move.\n        pos: Number of times to move down. With negative values, will move up (use move or move_up instead).\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, pos, \"POS_CUR\")\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.move_files","title":"move_files  <code>staticmethod</code>","text":"<pre><code>move_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,\n) -&gt; list[bool]\n</code></pre> <p>Move downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>the list of downloads for which to move files.</p> </li> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to move files to.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>@staticmethod\ndef move_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[bool]:\n    \"\"\"Move downloaded files to another directory.\n\n    Parameters:\n        downloads:  the list of downloads for which to move files.\n        to_directory: The target directory to move files to.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    if isinstance(to_directory, str):\n        to_directory = Path(to_directory)\n\n    # raises FileExistsError when target is already a file\n    to_directory.mkdir(parents=True, exist_ok=True)\n\n    results = []\n    for download in downloads:\n        if download.is_complete or force:\n            for path in download.root_files_paths:\n                shutil.move(str(path), str(to_directory))\n            results.append(True)\n        else:\n            results.append(False)\n    return results\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.move_to","title":"move_to","text":"<pre><code>move_to(download: Download, pos: int) -&gt; int\n</code></pre> <p>Move a download in the queue, with absolute positioning.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>The absolute position in the queue where to move the download. 0 for top, -1 for bottom.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_to(self, download: Download, pos: int) -&gt; int:\n    \"\"\"Move a download in the queue, with absolute positioning.\n\n    Parameters:\n        download: The download object to move.\n        pos: The absolute position in the queue where to move the download. 0 for top, -1 for bottom.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    if pos &lt; 0:\n        how = \"POS_END\"\n        pos = -pos\n    else:\n        how = \"POS_SET\"\n    return self.client.change_position(download.gid, pos, how)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.move_to_bottom","title":"move_to_bottom","text":"<pre><code>move_to_bottom(download: Download) -&gt; int\n</code></pre> <p>Move a download to the bottom of the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_to_bottom(self, download: Download) -&gt; int:\n    \"\"\"Move a download to the bottom of the queue.\n\n    Parameters:\n        download: The download object to move.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, 0, \"POS_END\")\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.move_to_top","title":"move_to_top","text":"<pre><code>move_to_top(download: Download) -&gt; int\n</code></pre> <p>Move a download to the top of the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_to_top(self, download: Download) -&gt; int:\n    \"\"\"Move a download to the top of the queue.\n\n    Parameters:\n        download: The download object to move.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, 0, \"POS_SET\")\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.move_up","title":"move_up","text":"<pre><code>move_up(download: Download, pos: int = 1) -&gt; int\n</code></pre> <p>Move a download up in the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move up. With negative values, will move down (use move or move_down instead).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_up(self, download: Download, pos: int = 1) -&gt; int:\n    \"\"\"Move a download up in the queue.\n\n    Parameters:\n        download: The download object to move.\n        pos: Number of times to move up. With negative values, will move down (use move or move_down instead).\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, -pos, \"POS_CUR\")\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.parse_input_file","title":"parse_input_file","text":"<pre><code>parse_input_file(\n    input_file: str | Path,\n) -&gt; InputFileContentsType\n</code></pre> <p>Parse a file with URIs or an aria2c input file.</p> <p>Parameters:</p> <ul> <li> <code>input_file</code>               (<code>str | Path</code>)           \u2013            <p>Path to file with URIs or aria2c input file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>InputFileContentsType</code>           \u2013            <p>List of tuples containing list of URIs and dictionary with aria2c options.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def parse_input_file(self, input_file: str | Path) -&gt; InputFileContentsType:\n    \"\"\"Parse a file with URIs or an aria2c input file.\n\n    Parameters:\n        input_file: Path to file with URIs or aria2c input file.\n\n    Returns:\n        List of tuples containing list of URIs and dictionary with aria2c options.\n    \"\"\"\n    downloads = []\n    with Path(input_file).open() as fd:\n        for download_lines in self.split_input_file(fd):\n            uris = download_lines[0].split(\"\\t\")\n            options = {}\n            try:\n                for option_line in download_lines[1:]:\n                    option_name, option_value = option_line.split(\"=\", 1)\n                    options[option_name.lstrip()] = option_value\n                downloads.append((uris, options))\n            except ValueError as error:\n                logger.error(f\"Skipping download because of invalid option line '{option_line}'\")\n                logger.opt(exception=True).trace(error)\n    return downloads\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.pause","title":"pause","text":"<pre><code>pause(\n    downloads: list[Download], force: bool = False\n) -&gt; list[OperationResult]\n</code></pre> <p>Pause the given (active) downloads.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to pause.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to pause immediately without contacting servers or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def pause(self, downloads: list[Download], force: bool = False) -&gt; list[OperationResult]:  # noqa: FBT001,FBT002\n    \"\"\"Pause the given (active) downloads.\n\n    Parameters:\n        downloads: The list of downloads to pause.\n        force: Whether to pause immediately without contacting servers or not.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    pause_func = self.client.force_pause if force else self.client.pause\n\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        try:\n            pause_func(download.gid)\n        except ClientException as error:\n            logger.debug(f\"Failed to pause download {download.gid}\")\n            logger.opt(exception=True).trace(error)\n            result.append(error)\n        else:\n            result.append(True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.pause_all","title":"pause_all","text":"<pre><code>pause_all(force: bool = False) -&gt; bool\n</code></pre> <p>Pause all (active) downloads.</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to pause immediately without contacting servers or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation to pause all downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def pause_all(self, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Pause all (active) downloads.\n\n    Parameters:\n        force: Whether to pause immediately without contacting servers or not.\n\n    Returns:\n        Success or failure of the operation to pause all downloads.\n    \"\"\"\n    pause_func = self.client.force_pause_all if force else self.client.pause_all\n    return pause_func() == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.purge","title":"purge","text":"<pre><code>purge() -&gt; bool\n</code></pre> <p>Purge completed, removed or failed downloads from the queue.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def purge(self) -&gt; bool:\n    \"\"\"Purge completed, removed or failed downloads from the queue.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.client.purge_download_result() == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.remove","title":"remove","text":"<pre><code>remove(\n    downloads: list[Download],\n    force: bool = False,\n    files: bool = False,\n    clean: bool = True,\n) -&gt; list[OperationResult]\n</code></pre> <p>Remove the given downloads from the list.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to remove.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force the removal or not.</p> </li> <li> <code>files</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove downloads files as well.</p> </li> <li> <code>clean</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove the aria2 control file as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def remove(\n    self,\n    downloads: list[Download],\n    force: bool = False,  # noqa: FBT001,FBT002\n    files: bool = False,  # noqa: FBT001,FBT002\n    clean: bool = True,  # noqa: FBT001,FBT002\n) -&gt; list[OperationResult]:\n    \"\"\"Remove the given downloads from the list.\n\n    Parameters:\n        downloads: The list of downloads to remove.\n        force: Whether to force the removal or not.\n        files: Whether to remove downloads files as well.\n        clean: Whether to remove the aria2 control file as well.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    remove_func = self.client.force_remove if force else self.client.remove\n\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        if download.is_complete or download.is_removed or download.has_failed:\n            logger.debug(f\"Try to remove download result {download.gid}\")\n            try:\n                self.client.remove_download_result(download.gid)\n            except ClientException as error:\n                logger.exception(error)\n                result.append(error)\n            else:\n                logger.success(f\"Removed download result {download.gid}\")\n                result.append(True)\n        else:\n            logger.debug(f\"Try to remove download {download.gid}\")\n            try:\n                removed_gid = remove_func(download.gid)\n            except ClientException as error:\n                logger.exception(error)\n                result.append(error)\n            else:\n                logger.success(f\"Removed download {download.gid}\")\n                result.append(True)\n                try:  # (nested try)\n                    self.client.remove_download_result(download.gid)\n                except ClientException as error:\n                    logger.debug(f\"Failed to remove download result {download.gid}\")\n                    logger.opt(exception=True).trace(error)\n                if removed_gid != download.gid:\n                    logger.debug(\n                        f\"Removed download GID#{removed_gid} is different than download GID#{download.gid}\",\n                    )\n                    try:\n                        self.client.remove_download_result(removed_gid)\n                    except ClientException as error:\n                        logger.debug(f\"Failed to remove download result {removed_gid}\")\n                        logger.opt(exception=True).trace(error)\n\n        if clean:\n            download.control_file_path.unlink(missing_ok=True)\n            logger.debug(f\"Removed control file {download.control_file_path}\")\n\n        if files and result[-1]:\n            self.remove_files([download], force=True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.remove_all","title":"remove_all","text":"<pre><code>remove_all(force: bool = False) -&gt; bool\n</code></pre> <p>Remove all downloads from the list.</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force the removal or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation to remove all downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def remove_all(self, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Remove all downloads from the list.\n\n    Parameters:\n        force: Whether to force the removal or not.\n\n    Returns:\n        Success or failure of the operation to remove all downloads.\n    \"\"\"\n    return all(self.remove(self.get_downloads(), force=force))\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.remove_files","title":"remove_files  <code>staticmethod</code>","text":"<pre><code>remove_files(\n    downloads: list[Download], force: bool = False\n) -&gt; list[bool]\n</code></pre> <p>Remove downloaded files.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>the list of downloads for which to remove files.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>@staticmethod\ndef remove_files(\n    downloads: list[Download],\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[bool]:\n    \"\"\"Remove downloaded files.\n\n    Parameters:\n        downloads:  the list of downloads for which to remove files.\n        force: Whether to remove files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    results = []\n    for download in downloads:\n        if download.is_complete or force:\n            for path in download.root_files_paths:\n                if path.is_dir():\n                    try:\n                        shutil.rmtree(str(path))\n                    except OSError as error:\n                        logger.error(f\"Could not delete directory '{path}'\")\n                        logger.opt(exception=True).trace(error)\n                        results.append(False)\n                    else:\n                        results.append(True)\n                else:\n                    try:\n                        path.unlink()\n                    except FileNotFoundError as error:\n                        logger.warning(f\"File '{path}' did not exist when trying to delete it\")\n                        logger.opt(exception=True).trace(error)\n                    results.append(True)\n        else:\n            results.append(False)\n    return results\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.resume","title":"resume","text":"<pre><code>resume(downloads: list[Download]) -&gt; list[OperationResult]\n</code></pre> <p>Resume (unpause) the given downloads.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to resume.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def resume(self, downloads: list[Download]) -&gt; list[OperationResult]:\n    \"\"\"Resume (unpause) the given downloads.\n\n    Parameters:\n        downloads: The list of downloads to resume.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        try:\n            self.client.unpause(download.gid)\n        except ClientException as error:\n            logger.debug(f\"Failed to resume download {download.gid}\")\n            logger.opt(exception=True).trace(error)\n            result.append(error)\n        else:\n            result.append(True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.resume_all","title":"resume_all","text":"<pre><code>resume_all() -&gt; bool\n</code></pre> <p>Resume (unpause) all downloads.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation to resume all downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def resume_all(self) -&gt; bool:\n    \"\"\"Resume (unpause) all downloads.\n\n    Returns:\n        Success or failure of the operation to resume all downloads.\n    \"\"\"\n    return self.client.unpause_all() == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.retry_downloads","title":"retry_downloads","text":"<pre><code>retry_downloads(\n    downloads: list[Download], clean: bool = False\n) -&gt; list[OperationResult]\n</code></pre> <p>Resume failed downloads from where they left off with new GIDs.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to remove.</p> </li> <li> <code>clean</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove the aria2 control file as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def retry_downloads(\n    self,\n    downloads: list[Download],\n    clean: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[OperationResult]:\n    \"\"\"Resume failed downloads from where they left off with new GIDs.\n\n    Parameters:\n        downloads: The list of downloads to remove.\n        clean: Whether to remove the aria2 control file as well.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        if not download.has_failed:\n            continue\n        try:\n            uri = download.files[0].uris[0][\"uri\"]\n        except IndexError:\n            continue\n        try:\n            new_download_gid = self.add_uris([uri], download.options)\n        except ClientException as error:\n            result.append(error)\n        else:\n            if not new_download_gid:\n                continue\n\n            self.remove([download], clean=clean)\n            result.append(True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.search","title":"search","text":"<pre><code>search(patterns: list[str]) -&gt; list[Download]\n</code></pre> <p>Not implemented.</p> <p>Search and return <code>Download</code> objects based on multiple patterns.</p> <p>Parameters:</p> <ul> <li> <code>patterns</code>               (<code>list[str]</code>)           \u2013            <p>The patterns used to filter the download list.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>This method is not implemented yet.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def search(self, patterns: list[str]) -&gt; list[Download]:\n    \"\"\"Not implemented.\n\n    Search and return [`Download`][aria2p.downloads.Download] objects based on multiple patterns.\n\n    Parameters:\n        patterns: The patterns used to filter the download list.\n\n    Raises:\n        NotImplementedError: This method is not implemented yet.\n    \"\"\"\n    # gid\n    # status\n    # totalLength\n    # completedLength\n    # uploadLength\n    # bitfield\n    # downloadSpeed\n    # uploadSpeed\n    # infoHash\n    # numSeeders\n    # seeder\n    # pieceLength\n    # numPieces\n    # connections\n    # errorCode\n    # errorMessage\n    # followedBy\n    # following\n    # belongsTo\n    # dir\n    # files\n    # bittorrent\n    #        announceList\n    #        comment\n    #        creationDate\n    #        mode\n    #        info\n    #               name\n    # verifiedLength\n    # verifyIntegrityPending\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.set_global_options","title":"set_global_options","text":"<pre><code>set_global_options(options: OptionsType) -&gt; bool\n</code></pre> <p>Set global options.</p> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>OptionsType</code>)           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation for changing global options.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def set_global_options(self, options: OptionsType) -&gt; bool:\n    \"\"\"Set global options.\n\n    Parameters:\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n\n    Returns:\n        Success or failure of the operation for changing global options.\n    \"\"\"\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    return self.client.change_global_option(client_options) == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.set_options","title":"set_options","text":"<pre><code>set_options(\n    options: OptionsType, downloads: list[Download]\n) -&gt; list[bool]\n</code></pre> <p>Set options for specific downloads.</p> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>OptionsType</code>)           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to set the options for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for changing options for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def set_options(self, options: OptionsType, downloads: list[Download]) -&gt; list[bool]:\n    \"\"\"Set options for specific downloads.\n\n    Parameters:\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        downloads: The list of downloads to set the options for.\n\n    Returns:\n        Success or failure of the operation for changing options for each given download.\n    \"\"\"\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    # Note: batch/multicall candidate\n    results = []\n    for download in downloads:\n        results.append(self.client.change_option(download.gid, client_options) == \"OK\")\n    return results\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.split_input_file","title":"split_input_file","text":"<pre><code>split_input_file(\n    lines: list[str] | TextIO,\n) -&gt; Iterator[list[str]]\n</code></pre> <p>Helper to split downloads in an input file.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>list[str] | TextIO</code>)           \u2013            <p>The lines of the input file.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list[str]: Blocks of lines.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def split_input_file(self, lines: list[str] | TextIO) -&gt; Iterator[list[str]]:\n    \"\"\"Helper to split downloads in an input file.\n\n    Parameters:\n         lines: The lines of the input file.\n\n    Yields:\n        list[str]: Blocks of lines.\n    \"\"\"\n    block: list[str] = []\n    for line in lines:\n        if line.lstrip().startswith(\"#\"):  # Ignore Comments\n            continue\n        if not line.strip():  # Ignore empty line\n            continue\n        if not line.startswith(\" \") and block:  # URIs line\n            yield block\n            block = []\n        block.append(line.rstrip(\"\\n\"))\n    if block:\n        yield block\n</code></pre>"},{"location":"reference/aria2p/#aria2p.API.stop_listening","title":"stop_listening","text":"<pre><code>stop_listening() -&gt; None\n</code></pre> <p>Stop listening to notifications.</p> <p>If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling <code>listen_to_notifications</code>.</p> Source code in <code>src/aria2p/api.py</code> <pre><code>def stop_listening(self) -&gt; None:\n    \"\"\"Stop listening to notifications.\n\n    If the listening loop was threaded, this method will wait for the thread to finish.\n    The time it takes for the thread to finish will depend on the timeout given while calling\n    [`listen_to_notifications`][aria2p.api.API.listen_to_notifications].\n    \"\"\"\n    self.client.stop_listening()\n    if self.listener:\n        self.listener.join()\n    self.listener = None\n</code></pre>"},{"location":"reference/aria2p/#aria2p.BitTorrent","title":"BitTorrent","text":"<pre><code>BitTorrent(struct: dict)\n</code></pre> <p>Information retrieved from a torrent file.</p> <p>Parameters:</p> <ul> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>announce_list</code>               (<code>list[list[str]] | None</code>)           \u2013            <p>List of lists of announce URIs.</p> </li> <li> <code>comment</code>               (<code>str | None</code>)           \u2013            <p>Return the comment of the torrent.</p> </li> <li> <code>creation_date</code>               (<code>datetime</code>)           \u2013            <p>Return the creation time of the torrent.</p> </li> <li> <code>info</code>               (<code>dict | None</code>)           \u2013            <p>Struct which contains data from Info dictionary.</p> </li> <li> <code>mode</code>               (<code>str | None</code>)           \u2013            <p>File mode of the torrent.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def __init__(self, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/#aria2p.BitTorrent.announce_list","title":"announce_list  <code>property</code>","text":"<pre><code>announce_list: list[list[str]] | None\n</code></pre> <p>List of lists of announce URIs.</p> <p>If the torrent contains announce and no announce-list, announce is converted to the announce-list format.</p> <p>Returns:</p> <ul> <li> <code>list[list[str]] | None</code>           \u2013            <p>The announce URIs.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.BitTorrent.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str | None\n</code></pre> <p>Return the comment of the torrent.</p> <p>comment.utf-8 is used if available.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The torrent's comment.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.BitTorrent.creation_date","title":"creation_date  <code>property</code>","text":"<pre><code>creation_date: datetime\n</code></pre> <p>Return the creation time of the torrent.</p> <p>The value is an integer since the epoch, measured in seconds.</p> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The creation date.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.BitTorrent.info","title":"info  <code>property</code>","text":"<pre><code>info: dict | None\n</code></pre> <p>Struct which contains data from Info dictionary.</p> <p>It contains the <code>name</code> key: name in info dictionary. <code>name.utf-8</code> is used if available.</p> <p>Returns:</p> <ul> <li> <code>dict | None</code>           \u2013            <p>The torrent's info.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.BitTorrent.mode","title":"mode  <code>property</code>","text":"<pre><code>mode: str | None\n</code></pre> <p>File mode of the torrent.</p> <p>The value is either single or multi.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The file mode.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Client","title":"Client","text":"<pre><code>Client(\n    host: str = DEFAULT_HOST,\n    port: int = DEFAULT_PORT,\n    secret: str = \"\",\n    timeout: float = DEFAULT_TIMEOUT,\n)\n</code></pre> <p>The JSON-RPC client class.</p> <p>In this documentation, all the following terms refer to the same entity, the remote aria2c process: remote process, remote server, server, daemon process, background process, remote.</p> <p>This class implements method to communicate with a daemon aria2c process through the JSON-RPC protocol. Each method offered by the aria2c process is implemented in this class, in snake_case instead of camelCase (example: add_uri instead of addUri).</p> <p>The class defines a <code>METHODS</code> variable which contains the names of the available methods.</p> <p>The class is instantiated using an address and port, and optionally a secret token. The token is never passed as a method argument.</p> <p>The class provides utility methods:</p> <ul> <li><code>call</code>, which performs a JSON-RPC call for a single method;</li> <li><code>batch_call</code>, which performs a JSON-RPC call for a list of methods;</li> <li><code>multicall2</code>, which is an equivalent of multicall, but easier to use;</li> <li><code>post</code>, which is responsible for actually sending a payload to the remote process using a POST request;</li> <li><code>get_payload</code>, which is used to build payloads;</li> <li><code>get_params</code>, which is used to build list of parameters.</li> </ul> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>, default:                   <code>DEFAULT_HOST</code> )           \u2013            <p>The remote process address.</p> </li> <li> <code>port</code>               (<code>int</code>, default:                   <code>DEFAULT_PORT</code> )           \u2013            <p>The remote process port.</p> </li> <li> <code>secret</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The secret token.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>DEFAULT_TIMEOUT</code> )           \u2013            <p>The timeout to use for requests towards the remote server.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add_metalink</code>             \u2013              <p>Add a Metalink download.</p> </li> <li> <code>add_torrent</code>             \u2013              <p>Add a BitTorrent download.</p> </li> <li> <code>add_uri</code>             \u2013              <p>Add a new download.</p> </li> <li> <code>batch_call</code>             \u2013              <p>Call multiple methods in one request.</p> </li> <li> <code>call</code>             \u2013              <p>Call a single JSON-RPC method.</p> </li> <li> <code>change_global_option</code>             \u2013              <p>Change the global options dynamically.</p> </li> <li> <code>change_option</code>             \u2013              <p>Change a download options dynamically.</p> </li> <li> <code>change_position</code>             \u2013              <p>Change position of a download.</p> </li> <li> <code>change_uri</code>             \u2013              <p>Remove the URIs in <code>del_uris</code> from and appends the URIs in <code>add_uris</code> to download denoted by gid.</p> </li> <li> <code>force_pause</code>             \u2013              <p>Force pause a download.</p> </li> <li> <code>force_pause_all</code>             \u2013              <p>Force pause all active/waiting downloads.</p> </li> <li> <code>force_remove</code>             \u2013              <p>Force remove a download.</p> </li> <li> <code>force_shutdown</code>             \u2013              <p>Force shutdown aria2.</p> </li> <li> <code>get_files</code>             \u2013              <p>Return file list of a download.</p> </li> <li> <code>get_global_option</code>             \u2013              <p>Return the global options.</p> </li> <li> <code>get_global_stat</code>             \u2013              <p>Return global statistics such as the overall download and upload speeds.</p> </li> <li> <code>get_option</code>             \u2013              <p>Return options of a download.</p> </li> <li> <code>get_params</code>             \u2013              <p>Build the list of parameters.</p> </li> <li> <code>get_payload</code>             \u2013              <p>Build a payload.</p> </li> <li> <code>get_peers</code>             \u2013              <p>Return peers list of a download.</p> </li> <li> <code>get_servers</code>             \u2013              <p>Return servers currently connected for a download.</p> </li> <li> <code>get_session_info</code>             \u2013              <p>Return session information.</p> </li> <li> <code>get_uris</code>             \u2013              <p>Return URIs used in a download.</p> </li> <li> <code>get_version</code>             \u2013              <p>Return aria2 version and the list of enabled features.</p> </li> <li> <code>list_methods</code>             \u2013              <p>Return the available RPC methods.</p> </li> <li> <code>list_notifications</code>             \u2013              <p>Return all the available RPC notifications.</p> </li> <li> <code>listen_to_notifications</code>             \u2013              <p>Start listening to aria2 notifications via WebSocket.</p> </li> <li> <code>multicall</code>             \u2013              <p>Call multiple methods in a single request.</p> </li> <li> <code>multicall2</code>             \u2013              <p>Call multiple methods in one request.</p> </li> <li> <code>pause</code>             \u2013              <p>Pause a download.</p> </li> <li> <code>pause_all</code>             \u2013              <p>Pause all active/waiting downloads.</p> </li> <li> <code>post</code>             \u2013              <p>Send a POST request to the server.</p> </li> <li> <code>purge_download_result</code>             \u2013              <p>Purge completed/error/removed downloads from memory.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove a download.</p> </li> <li> <code>remove_download_result</code>             \u2013              <p>Remove a completed/error/removed download from memory.</p> </li> <li> <code>res_or_raise</code>             \u2013              <p>Return the result of the response, or raise an error with code and message.</p> </li> <li> <code>response_as_exception</code>             \u2013              <p>Transform the response as a <code>ClientException</code> instance and return it.</p> </li> <li> <code>save_session</code>             \u2013              <p>Save the current session to a file.</p> </li> <li> <code>shutdown</code>             \u2013              <p>Shutdown aria2.</p> </li> <li> <code>stop_listening</code>             \u2013              <p>Stop listening to notifications.</p> </li> <li> <code>tell_active</code>             \u2013              <p>Return the list of active downloads.</p> </li> <li> <code>tell_status</code>             \u2013              <p>Tell status of a download.</p> </li> <li> <code>tell_stopped</code>             \u2013              <p>Return the list of stopped downloads.</p> </li> <li> <code>tell_waiting</code>             \u2013              <p>Return the list of waiting downloads.</p> </li> <li> <code>unpause</code>             \u2013              <p>Resume a download.</p> </li> <li> <code>unpause_all</code>             \u2013              <p>Resume all downloads.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>server</code>               (<code>str</code>)           \u2013            <p>Return the full remote process / server address.</p> </li> <li> <code>ws_server</code>               (<code>str</code>)           \u2013            <p>Return the full WebSocket remote server address.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def __init__(\n    self,\n    host: str = DEFAULT_HOST,\n    port: int = DEFAULT_PORT,\n    secret: str = \"\",\n    timeout: float = DEFAULT_TIMEOUT,\n) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        host: The remote process address.\n        port: The remote process port.\n        secret: The secret token.\n        timeout: The timeout to use for requests towards the remote server.\n    \"\"\"\n    host = host.rstrip(\"/\")\n\n    self.host = host\n    self.port = port\n    self.secret = secret\n    self.timeout = timeout\n    self.listening = False\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.server","title":"server  <code>property</code>","text":"<pre><code>server: str\n</code></pre> <p>Return the full remote process / server address.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The server address.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Client.ws_server","title":"ws_server  <code>property</code>","text":"<pre><code>ws_server: str\n</code></pre> <p>Return the full WebSocket remote server address.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The WebSocket server address.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Client.add_metalink","title":"add_metalink","text":"<pre><code>add_metalink(\n    metalink: str,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; list[str]\n</code></pre> <p>Add a Metalink download.</p> <p>This method adds a Metalink download by uploading a \".metalink\" file and returns an array of GIDs of newly registered downloads.</p> <p>Original signature:</p> <pre><code>aria2.addMetalink([secret], metalink[, options[, position]])\n</code></pre> <p>If <code>--rpc-save-upload-metadata</code> is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by <code>--dir</code> option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or <code>--rpc-save-upload-metadata</code> is false, the downloads added by this method are not saved by <code>--save-session</code>.</p> <p>Parameters:</p> <ul> <li> <code>metalink</code>               (<code>str</code>)           \u2013            <p><code>metalink</code> is a base64-encoded string which contains the contents of the \".metalink\" file.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p><code>options</code> is a struct and its members are pairs of option name and value. See Options for more details.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>If <code>position</code> is given, it must be an integer starting from 0. The new download will be inserted at <code>position</code> in the waiting queue. If <code>position</code> is omitted or <code>position</code> is larger than the current size of the queue, the new download is appended to the end of the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The GID of the created download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples add local file file.meta4.</p> <pre><code>&gt;&gt;&gt; import urllib2, json, base64\n&gt;&gt;&gt; metalink = base64.b64encode(open(\"file.meta4\").read())\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.addMetalink\",\n...         \"params\": [metalink],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def add_metalink(\n    self,\n    metalink: str,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; list[str]:\n    \"\"\"Add a Metalink download.\n\n    This method adds a Metalink download by uploading a \".metalink\" file\n    and returns an array of GIDs of newly registered downloads.\n\n    Original signature:\n\n        aria2.addMetalink([secret], metalink[, options[, position]])\n\n    If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true,\n    the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\"\n    in the directory specified by [`--dir`][aria2p.options.Options.dir] option.\n    E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink.\n    If a file with the same name already exists, it is overwritten!\n    If the file cannot be saved successfully\n    or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false,\n    the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session].\n\n    Parameters:\n        metalink: `metalink` is a base64-encoded string which contains the contents of the \".metalink\" file.\n        options: `options` is a struct and its members are pairs of option name and value.\n            See [Options][aria2p.options.Options] for more details.\n        position: If `position` is given, it must be an integer starting from 0.\n            The new download will be inserted at `position` in the waiting queue.\n            If `position` is omitted or `position` is larger than the current size of the queue,\n            the new download is appended to the end of the queue.\n\n    Returns:\n        The GID of the created download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples add local file file.meta4.\n\n        &gt;&gt;&gt; import urllib2, json, base64\n        &gt;&gt;&gt; metalink = base64.b64encode(open(\"file.meta4\").read())\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.addMetalink\",\n        ...         \"params\": [metalink],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}'\n    \"\"\"\n    return self.call(self.ADD_METALINK, [metalink, options, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.add_torrent","title":"add_torrent","text":"<pre><code>add_torrent(\n    torrent: str,\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str\n</code></pre> <p>Add a BitTorrent download.</p> <p>This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the newly registered download.</p> <p>Original signature:</p> <pre><code>aria2.addTorrent([secret], torrent[, uris[, options[, position]]])\n</code></pre> <p>If you want to add a BitTorrent Magnet URI, use the <code>add_uri()</code> method instead.</p> <p>If <code>--rpc-save-upload-metadata</code> is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by <code>--dir</code> option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or <code>--rpc-save-upload-metadata</code> is false, the downloads added by this method are not saved by <code>--save-session</code>.</p> <p>Parameters:</p> <ul> <li> <code>torrent</code>               (<code>str</code>)           \u2013            <p><code>torrent</code> must be a base64-encoded string containing the contents of the \".torrent\" file.</p> </li> <li> <code>uris</code>               (<code>list[str]</code>)           \u2013            <p><code>uris</code> is an array of URIs (string). <code>uris</code> is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p><code>options</code> is a struct and its members are pairs of option name and value. See Options for more details.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>If <code>position</code> is given, it must be an integer starting from 0. The new download will be inserted at <code>position</code> in the waiting queue. If <code>position</code> is omitted or <code>position</code> is larger than the current size of the queue, the new download is appended to the end of the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the created download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples add local file file.torrent.</p> <pre><code>&gt;&gt;&gt; import urllib2, json, base64\n&gt;&gt;&gt; torrent = base64.b64encode(open(\"file.torrent\").read())\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"asdf\",\n...         \"method\": \"aria2.addTorrent\",\n...         \"params\": [torrent],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def add_torrent(\n    self,\n    torrent: str,\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str:\n    \"\"\"Add a BitTorrent download.\n\n    This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the\n    newly registered download.\n\n    Original signature:\n\n        aria2.addTorrent([secret], torrent[, uris[, options[, position]]])\n\n    If you want to add a BitTorrent Magnet URI, use the [`add_uri()`][aria2p.client.Client.add_uri] method instead.\n\n    If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true,\n    the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\"\n    in the directory specified by [`--dir`][aria2p.options.Options.dir] option.\n    E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent.\n    If a file with the same name already exists, it is overwritten!\n    If the file cannot be saved successfully\n    or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false,\n    the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session].\n\n    Parameters:\n        torrent: `torrent` must be a base64-encoded string containing the contents of the \".torrent\" file.\n        uris: `uris` is an array of URIs (string). `uris` is used for Web-seeding.\n            For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /,\n            name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI\n            for each file.\n        options: `options` is a struct and its members are pairs of option name and value.\n            See [Options][aria2p.options.Options] for more details.\n        position: If `position` is given, it must be an integer starting from 0.\n            The new download will be inserted at `position` in the waiting queue.\n            If `position` is omitted or `position` is larger than the current size of the queue,\n            the new download is appended to the end of the queue.\n\n    Returns:\n        The GID of the created download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples add local file file.torrent.\n\n        &gt;&gt;&gt; import urllib2, json, base64\n        &gt;&gt;&gt; torrent = base64.b64encode(open(\"file.torrent\").read())\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"asdf\",\n        ...         \"method\": \"aria2.addTorrent\",\n        ...         \"params\": [torrent],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n    \"\"\"\n    return self.call(self.ADD_TORRENT, [torrent, uris, options, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.add_uri","title":"add_uri","text":"<pre><code>add_uri(\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str\n</code></pre> <p>Add a new download.</p> <p>This method adds a new download and returns the GID of the newly registered download.</p> <p>Original signature:</p> <pre><code>aria2.addUri([secret], uris[, options[, position]])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>uris</code>               (<code>list[str]</code>)           \u2013            <p><code>uris</code> is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p><code>options</code> is a struct and its members are pairs of option name and value. See Options for more details.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>If <code>position</code> is given, it must be an integer starting from 0. The new download will be inserted at <code>position</code> in the waiting queue. If <code>position</code> is omitted or <code>position</code> is larger than the current size of the queue, the new download is appended to the end of the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the created download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following example adds http://example.org/file:</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.addUri\",\n...         \"params\": [[\"http://example.org/file\"]],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def add_uri(\n    self,\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str:\n    \"\"\"Add a new download.\n\n    This method adds a new download and returns the GID of the newly registered download.\n\n    Original signature:\n\n        aria2.addUri([secret], uris[, options[, position]])\n\n    Parameters:\n        uris: `uris` is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource.\n            If you mix URIs pointing to different resources,\n            then the download may fail or be corrupted without aria2 complaining.\n            When adding BitTorrent Magnet URIs,\n            uris must have only one element and it should be BitTorrent Magnet URI.\n        options: `options` is a struct and its members are pairs of option name and value.\n            See [Options][aria2p.options.Options] for more details.\n        position: If `position` is given, it must be an integer starting from 0.\n            The new download will be inserted at `position` in the waiting queue.\n            If `position` is omitted or `position` is larger than the current size of the queue,\n            the new download is appended to the end of the queue.\n\n    Returns:\n        The GID of the created download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following example adds http://example.org/file:\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.addUri\",\n        ...         \"params\": [[\"http://example.org/file\"]],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n    \"\"\"\n    return self.call(self.ADD_URI, params=[uris, options, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.batch_call","title":"batch_call","text":"<pre><code>batch_call(\n    calls: CallsType, insert_secret: bool = True\n) -&gt; list[CallReturnType]\n</code></pre> <p>Call multiple methods in one request.</p> <p>A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are:</p> <ul> <li>multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods</li> <li>multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in   each part of the batch_call payload</li> <li>as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the   ID in multicall is optional</li> </ul> <p>Parameters:</p> <ul> <li> <code>calls</code>               (<code>CallsType</code>)           \u2013            <p>A list of tuples composed of method name, parameters and ID.</p> </li> <li> <code>insert_secret</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to insert the secret token in the parameters or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[CallReturnType]</code>           \u2013            <p>The results for each call in the batch.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def batch_call(\n    self,\n    calls: CallsType,\n    insert_secret: bool = True,  # noqa: FBT001,FBT002\n) -&gt; list[CallReturnType]:\n    \"\"\"Call multiple methods in one request.\n\n    A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a\n    multicall are:\n\n    - multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods\n    - multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in\n      each part of the batch_call payload\n    - as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the\n      ID in multicall is optional\n\n    Parameters:\n        calls: A list of tuples composed of method name, parameters and ID.\n        insert_secret: Whether to insert the secret token in the parameters or not.\n\n    Returns:\n        The results for each call in the batch.\n    \"\"\"\n    payloads = []\n\n    for method, params, msg_id in calls:\n        params = self.get_params(*params)  # noqa: PLW2901\n        if insert_secret and self.secret and method.startswith(\"aria2.\"):\n            params.insert(0, f\"token:{self.secret}\")\n        payloads.append(self.get_payload(method, params, msg_id, as_json=False))\n\n    payload: str = json.dumps(payloads)\n    responses = self.post(payload)\n    return [self.res_or_raise(resp) for resp in responses]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.call","title":"call","text":"<pre><code>call(\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    insert_secret: bool = True,\n) -&gt; CallReturnType\n</code></pre> <p>Call a single JSON-RPC method.</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>str</code>)           \u2013            <p>The method name. You can use the constant defined in <code>Client</code>.</p> </li> <li> <code>params</code>               (<code>list[Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of parameters.</p> </li> <li> <code>msg_id</code>               (<code>int | str | None</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the call, sent back with the server's answer.</p> </li> <li> <code>insert_secret</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to insert the secret token in the parameters or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CallReturnType</code>           \u2013            <p>The answer from the server, as a Python object.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def call(\n    self,\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    insert_secret: bool = True,  # noqa: FBT001,FBT002\n) -&gt; CallReturnType:\n    \"\"\"Call a single JSON-RPC method.\n\n    Parameters:\n        method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client].\n        params: A list of parameters.\n        msg_id: The ID of the call, sent back with the server's answer.\n        insert_secret: Whether to insert the secret token in the parameters or not.\n\n    Returns:\n        The answer from the server, as a Python object.\n    \"\"\"\n    params = self.get_params(*(params or []))\n\n    if insert_secret and self.secret:\n        if method.startswith(\"aria2.\"):\n            params.insert(0, f\"token:{self.secret}\")\n        elif method == self.MULTICALL:\n            for param in params[0]:\n                param[\"params\"].insert(0, f\"token:{self.secret}\")\n\n    payload: str = self.get_payload(method, params, msg_id=msg_id)  # type: ignore\n    return self.res_or_raise(self.post(payload))\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.change_global_option","title":"change_global_option","text":"<pre><code>change_global_option(options: dict) -&gt; str\n</code></pre> <p>Change the global options dynamically.</p> <p>Original signature:</p> <pre><code>aria2.changeGlobalOption([secret], options)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>dict</code>)           \u2013            <p>The following options are available:</p> <ul> <li><code>bt-max-open-files</code></li> <li><code>download-result</code></li> <li><code>keep-unfinished-download-result</code></li> <li><code>log</code></li> <li><code>log-level</code></li> <li><code>max-concurrent-downloads</code></li> <li><code>max-download-result</code></li> <li><code>max-overall-download-limit</code></li> <li><code>max-overall-upload-limit</code></li> <li><code>optimize-concurrent-downloads</code></li> <li><code>save-cookies</code></li> <li><code>save-session</code></li> <li><code>server-stat-of</code></li> </ul> <p>In addition, options listed in the Input File subsection are available, except for following options: <code>checksum</code>, <code>index-out</code>, <code>out</code>, <code>pause</code> and <code>select-file</code>.</p> <p>With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string (\"\") as the parameter value. Note that log file is always opened in append mode.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> for success.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_global_option(self, options: dict) -&gt; str:\n    \"\"\"Change the global options dynamically.\n\n    Original signature:\n\n        aria2.changeGlobalOption([secret], options)\n\n    Parameters:\n        options: The following options are available:\n\n            - `bt-max-open-files`\n            - `download-result`\n            - `keep-unfinished-download-result`\n            - `log`\n            - `log-level`\n            - `max-concurrent-downloads`\n            - `max-download-result`\n            - `max-overall-download-limit`\n            - `max-overall-upload-limit`\n            - `optimize-concurrent-downloads`\n            - `save-cookies`\n            - `save-session`\n            - `server-stat-of`\n\n            In addition, options listed in the Input File subsection are available, except for following options:\n            `checksum`, `index-out`, `out`, `pause` and `select-file`.\n\n            With the log option, you can dynamically start logging or change log file. To stop logging, specify an\n            empty string (\"\") as the parameter value. Note that log file is always opened in append mode.\n\n    Returns:\n        `\"OK\"` for success.\n    \"\"\"\n    return self.call(self.CHANGE_GLOBAL_OPTION, [options])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.change_option","title":"change_option","text":"<pre><code>change_option(gid: str, options: dict) -&gt; str\n</code></pre> <p>Change a download options dynamically.</p> <p>Original signature:</p> <pre><code>aria2.changeOption([secret], gid, options)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to change options of.</p> </li> <li> <code>options</code>               (<code>dict</code>)           \u2013            <p>The options listed in Input File subsection are available, except for following options:</p> <ul> <li><code>dry-run</code></li> <li><code>metalink-base-uri</code></li> <li><code>parameterized-uri</code></li> <li><code>pause</code></li> <li><code>piece-length</code></li> <li><code>rpc-save-upload-metadata</code></li> </ul> <p>Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required):</p> <ul> <li><code>bt-max-peers</code></li> <li><code>bt-request-peer-speed-limit</code></li> <li><code>bt-remove-unselected-file</code></li> <li><code>force-save</code></li> <li><code>max-download-limit</code></li> <li><code>max-upload-limit</code></li> </ul> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> for success.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples set the max-download-limit option to 20K for the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.changeOption\",\n...         \"params\": [\"0000000000000001\", {\"max-download-limit\": \"10K\"}],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_option(self, gid: str, options: dict) -&gt; str:\n    \"\"\"Change a download options dynamically.\n\n    Original signature:\n\n        aria2.changeOption([secret], gid, options)\n\n    Parameters:\n        gid: The download to change options of.\n        options: The options listed in Input File subsection are available, except for following options:\n\n            - `dry-run`\n            - `metalink-base-uri`\n            - `parameterized-uri`\n            - `pause`\n            - `piece-length`\n            - `rpc-save-upload-metadata`\n\n            Except for the following options, changing the other options of active download makes it restart (restart\n            itself is managed by aria2, and no user intervention is required):\n\n            - `bt-max-peers`\n            - `bt-request-peer-speed-limit`\n            - `bt-remove-unselected-file`\n            - `force-save`\n            - `max-download-limit`\n            - `max-upload-limit`\n\n    Returns:\n        `\"OK\"` for success.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples set the max-download-limit option to 20K for the download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.changeOption\",\n        ...         \"params\": [\"0000000000000001\", {\"max-download-limit\": \"10K\"}],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n    \"\"\"\n    return self.call(self.CHANGE_OPTION, [gid, options])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.change_position","title":"change_position","text":"<pre><code>change_position(gid: str, pos: int, how: str) -&gt; int\n</code></pre> <p>Change position of a download.</p> <p>This method changes the position of the download denoted by <code>gid</code> in the queue.</p> <p>Original signature:</p> <pre><code>aria2.changePosition([secret], gid, pos, how)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to change the position of.</p> </li> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>An integer.</p> </li> <li> <code>how</code>               (<code>str</code>)           \u2013            <p><code>POS_SET</code>, <code>POS_CUR</code> or <code>POS_END</code>.</p> <ul> <li>If <code>how</code> is <code>POS_SET</code>, it moves the download to a position relative to the beginning of the queue.</li> <li>If <code>how</code> is <code>POS_CUR</code>, it moves the download to a position relative to the current position.</li> <li>If <code>how</code> is <code>POS_END</code>, it moves the download to a position relative to the end of the queue.</li> <li>If the destination position is less than 0 or beyond the end of the queue,   it moves the download to the beginning or the end of the queue respectively.</li> </ul> <p>For example, if GID#0000000000000001 is currently in position 3, <code>change_position('0000000000000001', -1, 'POS_CUR')</code> will change its position to 2. Additionally <code>change_position('0000000000000001', 0, 'POS_SET')</code> will change its position to 0 (the beginning of the queue).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An integer denoting the resulting position.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples move the download GID#0000000000000001 to the front of the queue.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.changePosition\",\n...         \"params\": [\"0000000000000001\", 0, \"POS_SET\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_position(self, gid: str, pos: int, how: str) -&gt; int:\n    \"\"\"Change position of a download.\n\n    This method changes the position of the download denoted by `gid` in the queue.\n\n    Original signature:\n\n        aria2.changePosition([secret], gid, pos, how)\n\n    Parameters:\n        gid: The download to change the position of.\n        pos: An integer.\n        how: `POS_SET`, `POS_CUR` or `POS_END`.\n\n            - If `how` is `POS_SET`, it moves the download to a position relative to the beginning of the queue.\n            - If `how` is `POS_CUR`, it moves the download to a position relative to the current position.\n            - If `how` is `POS_END`, it moves the download to a position relative to the end of the queue.\n            - If the destination position is less than 0 or beyond the end of the queue,\n              it moves the download to the beginning or the end of the queue respectively.\n\n            For example, if GID#0000000000000001 is currently in position 3,\n            `change_position('0000000000000001', -1, 'POS_CUR')` will change its position to 2. Additionally\n            `change_position('0000000000000001', 0, 'POS_SET')` will change its position to 0 (the beginning of the queue).\n\n    Returns:\n        An integer denoting the resulting position.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples move the download GID#0000000000000001 to the front of the queue.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.changePosition\",\n        ...         \"params\": [\"0000000000000001\", 0, \"POS_SET\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0}\n    \"\"\"\n    return self.call(self.CHANGE_POSITION, [gid, pos, how])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.change_uri","title":"change_uri","text":"<pre><code>change_uri(\n    gid: str,\n    file_index: int,\n    del_uris: list[str],\n    add_uris: list[str],\n    position: int | None = None,\n) -&gt; list[int]\n</code></pre> <p>Remove the URIs in <code>del_uris</code> from and appends the URIs in <code>add_uris</code> to download denoted by gid.</p> <p>Original signature:</p> <pre><code>aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to change URIs of.</p> </li> <li> <code>file_index</code>               (<code>int</code>)           \u2013            <p>Used to select which file to remove/attach given URIs. <code>file_index</code> is 1-based.</p> </li> <li> <code>del_uris</code>               (<code>list[str]</code>)           \u2013            <p>List of strings.</p> </li> <li> <code>add_uris</code>               (<code>list[str]</code>)           \u2013            <p>List of strings.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Used to specify where URIs are inserted in the existing waiting URI list. <code>position</code> is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. <code>position</code> is the position after URIs are removed, not the position when this method is called.</p> </li> </ul> <p>A download can contain multiple files and URIs are attached to each file. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in <code>del_uris</code>. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in <code>del_uris</code>.</p> <p>Returns:</p> <ul> <li> <code>list[int]</code>           \u2013            <p>A list which contains two integers.</p> </li> <li> <code>list[int]</code>           \u2013            <p>The first integer is the number of URIs deleted.</p> </li> <li> <code>list[int]</code>           \u2013            <p>The second integer is the number of URIs added.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer',\n...                       'method':'aria2.changeUri',\n...                       'params':['0000000000000001', 1, [],\n                                   ['http://example.org/file']]})\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_uri(\n    self,\n    gid: str,\n    file_index: int,\n    del_uris: list[str],\n    add_uris: list[str],\n    position: int | None = None,\n) -&gt; list[int]:\n    \"\"\"Remove the URIs in `del_uris` from and appends the URIs in `add_uris` to download denoted by gid.\n\n    Original signature:\n\n        aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position])\n\n    Parameters:\n        gid: The download to change URIs of.\n        file_index: Used to select which file to remove/attach given URIs. `file_index` is 1-based.\n        del_uris: List of strings.\n        add_uris: List of strings.\n        position: Used to specify where URIs are inserted in the existing waiting URI list. `position` is 0-based.\n            When position is omitted, URIs are appended to the back of the list.\n            This method first executes the removal and then the addition.\n            `position` is the position after URIs are removed, not the position when this\n            method is called.\n\n    A download can contain multiple files and URIs are attached to each file.\n    When removing an URI, if the same URIs exist in download, only one of them is removed for\n    each URI in `del_uris`. In other words, if there are three URIs http://example.org/aria2 and you want\n    remove them all, you have to specify (at least) 3 http://example.org/aria2 in `del_uris`.\n\n    Returns:\n        A list which contains two integers.\n        The first integer is the number of URIs deleted.\n        The second integer is the number of URIs added.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the\n        download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer',\n        ...                       'method':'aria2.changeUri',\n        ...                       'params':['0000000000000001', 1, [],\n                                           ['http://example.org/file']]})\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]}\n    \"\"\"\n    return self.call(self.CHANGE_URI, [gid, file_index, del_uris, add_uris, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.force_pause","title":"force_pause","text":"<pre><code>force_pause(gid: str) -&gt; str\n</code></pre> <p>Force pause a download.</p> <p>This method pauses the download denoted by gid. This method behaves just like <code>pause()</code> except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first.</p> <p>Original signature:</p> <pre><code>aria2.forcePause([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to force pause.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the paused download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_pause(self, gid: str) -&gt; str:\n    \"\"\"Force pause a download.\n\n    This method pauses the download denoted by gid.\n    This method behaves just like [`pause()`][aria2p.client.Client.pause] except that\n    this method pauses downloads without performing any actions which take time,\n    such as contacting BitTorrent trackers to unregister the download first.\n\n    Original signature:\n\n        aria2.forcePause([secret], gid)\n\n    Parameters:\n        gid: The download to force pause.\n\n    Returns:\n        The GID of the paused download.\n    \"\"\"\n    return self.call(self.FORCE_PAUSE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.force_pause_all","title":"force_pause_all","text":"<pre><code>force_pause_all() -&gt; str\n</code></pre> <p>Force pause all active/waiting downloads.</p> <p>This method is equal to calling <code>force_pause()</code> for every active/waiting download.</p> <p>Original signature:</p> <pre><code>aria2.forcePauseAll([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_pause_all(self) -&gt; str:\n    \"\"\"Force pause all active/waiting downloads.\n\n    This method is equal to calling [`force_pause()`][aria2p.client.Client.force_pause] for every active/waiting download.\n\n    Original signature:\n\n        aria2.forcePauseAll([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.FORCE_PAUSE_ALL)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.force_remove","title":"force_remove","text":"<pre><code>force_remove(gid: str) -&gt; str\n</code></pre> <p>Force remove a download.</p> <p>This method removes the download denoted by gid. This method behaves just like <code>remove()</code> except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first.</p> <p>Original signature:</p> <pre><code>aria2.forceRemove([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to force remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the removed download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_remove(self, gid: str) -&gt; str:\n    \"\"\"Force remove a download.\n\n    This method removes the download denoted by gid.\n    This method behaves just like [`remove()`][aria2p.client.Client.remove] except\n    that this method removes the download without performing any actions which take time, such as contacting\n    BitTorrent trackers to unregister the download first.\n\n    Original signature:\n\n        aria2.forceRemove([secret], gid)\n\n    Parameters:\n        gid: The download to force remove.\n\n    Returns:\n        The GID of the removed download.\n    \"\"\"\n    return self.call(self.FORCE_REMOVE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.force_shutdown","title":"force_shutdown","text":"<pre><code>force_shutdown() -&gt; str\n</code></pre> <p>Force shutdown aria2.</p> <p>This method shuts down aria2. This method behaves like <code>shutdown()</code> without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first.</p> <p>Original signature:</p> <pre><code>aria2.forceShutdown([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_shutdown(self) -&gt; str:\n    \"\"\"Force shutdown aria2.\n\n    This method shuts down aria2. This method behaves like [`shutdown()`][aria2p.client.Client.shutdown] without performing any\n    actions which take time, such as contacting BitTorrent trackers to unregister downloads first.\n\n    Original signature:\n\n        aria2.forceShutdown([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.FORCE_SHUTDOWN)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_files","title":"get_files","text":"<pre><code>get_files(gid: str) -&gt; dict\n</code></pre> <p>Return file list of a download.</p> <p>This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings.</p> <ul> <li><code>index</code>: Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.</li> <li><code>path</code>: File path.</li> <li><code>length</code>: File size in bytes.</li> <li><code>completedLength</code>: Completed length of this file in bytes.   Please note that it is possible that sum of <code>completedLength</code>   is less than the <code>completedLength</code> returned by the <code>tell_status()</code> method.   This is because <code>completedLength</code> in <code>get_files()</code> only includes completed pieces.   On the other hand, <code>completedLength</code> in <code>tell_status()</code>   also includes partially completed pieces.</li> <li><code>selected</code>: true if this file is selected by <code>--select-file</code> option.   If <code>--select-file</code> is not specified   or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false.</li> <li><code>uris</code> Returns a list of URIs for this file.   The element type is the same struct used in the <code>get_uris()</code> method.</li> </ul> <p>Original signature:</p> <pre><code>aria2.getFiles([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to list files of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The file list of a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getFiles\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'index': u'1',\n              u'length': u'34896138',\n              u'completedLength': u'34896138',\n              u'path': u'/downloads/file',\n              u'selected': u'true',\n              u'uris': [{u'status': u'used',\n                         u'uri': u'http://example.org/file'}]}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_files(self, gid: str) -&gt; dict:\n    \"\"\"Return file list of a download.\n\n    This method returns the file list of the download denoted by gid (string). The response is an array of\n    structs which contain following keys. Values are strings.\n\n    - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.\n    - `path`: File path.\n    - `length`: File size in bytes.\n    - `completedLength`: Completed length of this file in bytes.\n      Please note that it is possible that sum of `completedLength`\n      is less than the `completedLength` returned by the [`tell_status()`][aria2p.client.Client.tell_status] method.\n      This is because `completedLength` in [`get_files()`][aria2p.client.Client.get_files] only includes completed pieces.\n      On the other hand, `completedLength` in [`tell_status()`][aria2p.client.Client.tell_status]\n      also includes partially completed pieces.\n    - `selected`: true if this file is selected by [`--select-file`][aria2p.options.Options.select_file] option.\n      If [`--select-file`][aria2p.options.Options.select_file] is not specified\n      or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false.\n    - `uris` Returns a list of URIs for this file.\n      The element type is the same struct used in the [`get_uris()`][aria2p.client.Client.get_uris] method.\n\n    Original signature:\n\n        aria2.getFiles([secret], gid)\n\n    Parameters:\n        gid: The download to list files of.\n\n    Returns:\n        The file list of a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getFiles\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'index': u'1',\n                      u'length': u'34896138',\n                      u'completedLength': u'34896138',\n                      u'path': u'/downloads/file',\n                      u'selected': u'true',\n                      u'uris': [{u'status': u'used',\n                                 u'uri': u'http://example.org/file'}]}]}\n    \"\"\"\n    return self.call(self.GET_FILES, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_global_option","title":"get_global_option","text":"<pre><code>get_global_option() -&gt; dict\n</code></pre> <p>Return the global options.</p> <p>Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the <code>get_option()</code> method.</p> <p>Original signature:</p> <pre><code>aria2.getGlobalOption([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The global options. The response is a struct. Its keys are the names of options.</p> </li> <li> <code>dict</code>           \u2013            <p>Values are strings.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_global_option(self) -&gt; dict:\n    \"\"\"Return the global options.\n\n    Note that this method does not return options which have no default value and have not\n    been set on the command-line, in configuration files or RPC methods. Because global options are used as a\n    template for the options of newly added downloads, the response contains keys returned by the\n    [`get_option()`][aria2p.client.Client.get_option] method.\n\n    Original signature:\n\n        aria2.getGlobalOption([secret])\n\n    Returns:\n        The global options. The response is a struct. Its keys are the names of options.\n        Values are strings.\n    \"\"\"\n    return self.call(self.GET_GLOBAL_OPTION)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_global_stat","title":"get_global_stat","text":"<pre><code>get_global_stat() -&gt; dict\n</code></pre> <p>Return global statistics such as the overall download and upload speeds.</p> <p>Original signature:</p> <pre><code>aria2.getGlobalStat([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A struct that contains the following keys (values are strings):</p> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>downloadSpeed</code>: Overall download speed (byte/sec).</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>uploadSpeed</code>: Overall upload speed(byte/sec).</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numActive</code>: The number of active downloads.</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numWaiting</code>: The number of waiting downloads.</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numStopped</code>: The number of stopped downloads in the current session. This value is capped by the <code>--max-download-result</code> option.</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numStoppedTotal</code>: The number of stopped downloads in the current session and not capped by the <code>--max-download-result</code> option.</li> </ul> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getGlobalStat\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'downloadSpeed': u'21846',\n             u'numActive': u'2',\n             u'numStopped': u'0',\n             u'numWaiting': u'0',\n             u'uploadSpeed': u'0'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_global_stat(self) -&gt; dict:\n    \"\"\"Return global statistics such as the overall download and upload speeds.\n\n    Original signature:\n\n        aria2.getGlobalStat([secret])\n\n    Returns:\n        A struct that contains the following keys (values are strings):\n\n        - `downloadSpeed`: Overall download speed (byte/sec).\n        - `uploadSpeed`: Overall upload speed(byte/sec).\n        - `numActive`: The number of active downloads.\n        - `numWaiting`: The number of waiting downloads.\n        - `numStopped`: The number of stopped downloads in the current session. This value is capped by the\n            [`--max-download-result`][aria2p.options.Options.max_download_result] option.\n        - `numStoppedTotal`: The number of stopped downloads in the current session and not capped by the\n            [`--max-download-result`][aria2p.options.Options.max_download_result] option.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getGlobalStat\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'downloadSpeed': u'21846',\n                     u'numActive': u'2',\n                     u'numStopped': u'0',\n                     u'numWaiting': u'0',\n                     u'uploadSpeed': u'0'}}\n    \"\"\"\n    return self.call(self.GET_GLOBAL_STAT)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_option","title":"get_option","text":"<pre><code>get_option(gid: str) -&gt; dict\n</code></pre> <p>Return options of a download.</p> <p>Original signature:</p> <pre><code>aria2.getOption([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to get the options of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A struct where keys are the names of options. The values are strings.</p> </li> <li> <code>dict</code>           \u2013            <p>Note that this method does not return options which have</p> </li> <li> <code>dict</code>           \u2013            <p>no default value and have not been set on the command-line, in configuration files or RPC methods.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples get options of the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getOption\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'allow-overwrite': u'false',\n             u'allow-piece-length-change': u'false',\n             u'always-resume': u'true',\n             u'async-dns': u'true',\n ...\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_option(self, gid: str) -&gt; dict:\n    \"\"\"Return options of a download.\n\n    Original signature:\n\n        aria2.getOption([secret], gid)\n\n    Parameters:\n        gid: The download to get the options of.\n\n    Returns:\n        A struct where keys are the names of options. The values are strings.\n        Note that this method does not return options which have\n        no default value and have not been set on the command-line, in configuration files or RPC methods.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples get options of the download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getOption\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'allow-overwrite': u'false',\n                     u'allow-piece-length-change': u'false',\n                     u'always-resume': u'true',\n                     u'async-dns': u'true',\n         ...\n    \"\"\"\n    return self.call(self.GET_OPTION, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_params","title":"get_params  <code>staticmethod</code>","text":"<pre><code>get_params(*args: Any) -&gt; list\n</code></pre> <p>Build the list of parameters.</p> <p>This method simply removes the <code>None</code> values from the given arguments.</p> <p>Parameters:</p> <ul> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>List of parameters.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>           \u2013            <p>A new list, with <code>None</code> values filtered out.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef get_params(*args: Any) -&gt; list:\n    \"\"\"Build the list of parameters.\n\n    This method simply removes the `None` values from the given arguments.\n\n    Parameters:\n        *args: List of parameters.\n\n    Returns:\n        A new list, with `None` values filtered out.\n    \"\"\"\n    return [_ for _ in args if _ is not None]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_payload","title":"get_payload  <code>staticmethod</code>","text":"<pre><code>get_payload(\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    as_json: bool = True,\n) -&gt; str | dict\n</code></pre> <p>Build a payload.</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>str</code>)           \u2013            <p>The method name. You can use the constant defined in <code>Client</code>.</p> </li> <li> <code>params</code>               (<code>list[Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>The list of parameters.</p> </li> <li> <code>msg_id</code>               (<code>int | str | None</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the call, sent back with the server's answer.</p> </li> <li> <code>as_json</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to return the payload as a JSON-string or Python dictionary.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | dict</code>           \u2013            <p>The payload as a JSON string or as Python dictionary.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef get_payload(\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    as_json: bool = True,  # noqa: FBT001,FBT002\n) -&gt; str | dict:\n    \"\"\"Build a payload.\n\n    Parameters:\n        method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client].\n        params: The list of parameters.\n        msg_id: The ID of the call, sent back with the server's answer.\n        as_json: Whether to return the payload as a JSON-string or Python dictionary.\n\n    Returns:\n        The payload as a JSON string or as Python dictionary.\n    \"\"\"\n    payload: dict[str, Any] = {\"jsonrpc\": \"2.0\", \"method\": method}\n\n    if msg_id is None:\n        payload[\"id\"] = DEFAULT_ID\n    else:\n        payload[\"id\"] = msg_id\n\n    if params:\n        payload[\"params\"] = params\n\n    return json.dumps(payload) if as_json else payload\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_peers","title":"get_peers","text":"<pre><code>get_peers(gid: str) -&gt; dict\n</code></pre> <p>Return peers list of a download.</p> <p>This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings.</p> <ul> <li><code>peerId</code>: Percent-encoded peer ID.</li> <li><code>ip</code>: IP address of the peer.</li> <li><code>port</code>: Port number of the peer.</li> <li><code>bitfield</code>: Hexadecimal representation of the download progress of the peer. The highest bit corresponds to   the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is   missing. Any spare bits at the end are set to zero.</li> <li><code>amChoking</code>: true if aria2 is choking the peer. Otherwise false.</li> <li><code>peerChoking</code>: true if the peer is choking aria2. Otherwise false.</li> <li><code>downloadSpeed</code>: Download speed (byte/sec) that this client obtains from the peer.</li> <li><code>uploadSpeed</code>: Upload speed(byte/sec) that this client uploads to the peer.</li> <li><code>seeder</code>: true if this peer is a seeder. Otherwise false.</li> </ul> <p>Original signature:</p> <pre><code>aria2.getPeers([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to get peers from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The peers connected to a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getPeers\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'amChoking': u'true',\n              u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff',\n              u'downloadSpeed': u'10602',\n              u'ip': u'10.0.0.9',\n              u'peerChoking': u'false',\n              u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6',\n              u'port': u'6881',\n              u'seeder': u'true',\n              u'uploadSpeed': u'0'},\n             {u'amChoking': u'false',\n              u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff',\n              u'downloadSpeed': u'8654',\n              u'ip': u'10.0.0.30',\n              u'peerChoking': u'false',\n              u'peerId': u'bittorrent client758',\n              u'port': u'37842',\n              u'seeder': u'false',\n              u'uploadSpeed': u'6890'}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_peers(self, gid: str) -&gt; dict:\n    \"\"\"Return peers list of a download.\n\n    This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent\n    only. The response is an array of structs and contains the following keys. Values are strings.\n\n    - `peerId`: Percent-encoded peer ID.\n    - `ip`: IP address of the peer.\n    - `port`: Port number of the peer.\n    - `bitfield`: Hexadecimal representation of the download progress of the peer. The highest bit corresponds to\n      the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is\n      missing. Any spare bits at the end are set to zero.\n    - `amChoking`: true if aria2 is choking the peer. Otherwise false.\n    - `peerChoking`: true if the peer is choking aria2. Otherwise false.\n    - `downloadSpeed`: Download speed (byte/sec) that this client obtains from the peer.\n    - `uploadSpeed`: Upload speed(byte/sec) that this client uploads to the peer.\n    - `seeder`: true if this peer is a seeder. Otherwise false.\n\n    Original signature:\n\n        aria2.getPeers([secret], gid)\n\n    Parameters:\n        gid: The download to get peers from.\n\n    Returns:\n        The peers connected to a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getPeers\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'amChoking': u'true',\n                      u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff',\n                      u'downloadSpeed': u'10602',\n                      u'ip': u'10.0.0.9',\n                      u'peerChoking': u'false',\n                      u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6',\n                      u'port': u'6881',\n                      u'seeder': u'true',\n                      u'uploadSpeed': u'0'},\n                     {u'amChoking': u'false',\n                      u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff',\n                      u'downloadSpeed': u'8654',\n                      u'ip': u'10.0.0.30',\n                      u'peerChoking': u'false',\n                      u'peerId': u'bittorrent client758',\n                      u'port': u'37842',\n                      u'seeder': u'false',\n                      u'uploadSpeed': u'6890'}]}\n    \"\"\"\n    return self.call(self.GET_PEERS, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_servers","title":"get_servers","text":"<pre><code>get_servers(gid: str) -&gt; dict\n</code></pre> <p>Return servers currently connected for a download.</p> <p>This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings.</p> <ul> <li><code>index</code>: Index of the file, starting at 1, in the same order as files appear in the multi-file metalink.</li> <li><code>servers</code>: A list of structs which contain the following keys.<ul> <li><code>uri</code>: Original URI.</li> <li><code>currentUri</code>: This is the URI currently used for downloading.   If redirection is involved, currentUri and uri may differ.</li> <li><code>downloadSpeed</code>: Download speed (byte/sec).</li> </ul> </li> </ul> <p>Original signature:</p> <pre><code>aria2.getServers([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to get servers from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The servers connected to a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getServers\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'index': u'1',\n              u'servers': [{u'currentUri': u'http://example.org/file',\n                            u'downloadSpeed': u'10467',\n                            u'uri': u'http://example.org/file'}]}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_servers(self, gid: str) -&gt; dict:\n    \"\"\"Return servers currently connected for a download.\n\n    This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The\n    response is an array of structs and contains the following keys. Values are strings.\n\n    - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file metalink.\n    - `servers`: A list of structs which contain the following keys.\n        - `uri`: Original URI.\n        - `currentUri`: This is the URI currently used for downloading.\n          If redirection is involved, currentUri and uri may differ.\n        - `downloadSpeed`: Download speed (byte/sec).\n\n    Original signature:\n\n        aria2.getServers([secret], gid)\n\n    Parameters:\n        gid: The download to get servers from.\n\n    Returns:\n        The servers connected to a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getServers\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'index': u'1',\n                      u'servers': [{u'currentUri': u'http://example.org/file',\n                                    u'downloadSpeed': u'10467',\n                                    u'uri': u'http://example.org/file'}]}]}\n    \"\"\"\n    return self.call(self.GET_SERVERS, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_session_info","title":"get_session_info","text":"<pre><code>get_session_info() -&gt; dict\n</code></pre> <p>Return session information.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A struct that contains the <code>sessionId</code> key, which is generated each time aria2 is invoked.</p> </li> </ul> <p>Original signature:</p> <pre><code>aria2.getSessionInfo([secret])\n</code></pre> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getSessionInfo\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_session_info(self) -&gt; dict:\n    \"\"\"Return session information.\n\n    Returns:\n        A struct that contains the `sessionId` key, which is generated each time aria2 is invoked.\n\n    Original signature:\n\n        aria2.getSessionInfo([secret])\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getSessionInfo\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}}\n    \"\"\"\n    return self.call(self.GET_SESSION_INFO)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_uris","title":"get_uris","text":"<pre><code>get_uris(gid: str) -&gt; dict\n</code></pre> <p>Return URIs used in a download.</p> <p>This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string.</p> <ul> <li><code>uri</code>: URI</li> <li><code>status</code>: 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue.</li> </ul> <p>Original signature:</p> <pre><code>aria2.getUris([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to list URIs of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The URIs used in a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getUris\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'status': u'used',\n              u'uri': u'http://example.org/file'}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_uris(self, gid: str) -&gt; dict:\n    \"\"\"Return URIs used in a download.\n\n    This method returns the URIs used in the download denoted by gid (string). The response is an array of\n    structs and it contains following keys. Values are string.\n\n    - `uri`: URI\n    - `status`: 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue.\n\n    Original signature:\n\n        aria2.getUris([secret], gid)\n\n    Parameters:\n        gid: The download to list URIs of.\n\n    Returns:\n        The URIs used in a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getUris\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'status': u'used',\n                      u'uri': u'http://example.org/file'}]}\n    \"\"\"\n    return self.call(self.GET_URIS, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return aria2 version and the list of enabled features.</p> <p>Original signature:</p> <pre><code>aria2.getVersion([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A struct that contains the following keys:</p> </li> <li> <code>str</code>           \u2013            <ul> <li><code>version</code>: Version number of aria2 as a string.</li> </ul> </li> <li> <code>str</code>           \u2013            <ul> <li><code>enabledFeatures</code>: List of enabled features. Each feature is given as a string.</li> </ul> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getVersion\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'enabledFeatures': [u'Async DNS',\n                                  u'BitTorrent',\n                                  u'Firefox3 Cookie',\n                                  u'GZip',\n                                  u'HTTPS',\n                                  u'Message Digest',\n                                  u'Metalink',\n                                  u'XML-RPC'],\n             u'version': u'1.11.0'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_version(self) -&gt; str:\n    \"\"\"Return aria2 version and the list of enabled features.\n\n    Original signature:\n\n        aria2.getVersion([secret])\n\n    Returns:\n        A struct that contains the following keys:\n\n        - `version`: Version number of aria2 as a string.\n        - `enabledFeatures`: List of enabled features. Each feature is given as a string.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getVersion\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'enabledFeatures': [u'Async DNS',\n                                          u'BitTorrent',\n                                          u'Firefox3 Cookie',\n                                          u'GZip',\n                                          u'HTTPS',\n                                          u'Message Digest',\n                                          u'Metalink',\n                                          u'XML-RPC'],\n                     u'version': u'1.11.0'}}\n    \"\"\"\n    return self.call(self.GET_VERSION)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.list_methods","title":"list_methods","text":"<pre><code>list_methods() -&gt; list[str]\n</code></pre> <p>Return the available RPC methods.</p> <p>This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names.</p> <p>Original signature:</p> <pre><code>system.listMethods()\n</code></pre> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The list of available RPC methods.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listMethods\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [u'aria2.addUri',\n             u'aria2.addTorrent',\n ...\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def list_methods(self) -&gt; list[str]:\n    \"\"\"Return the available RPC methods.\n\n    This method returns all the available RPC methods in an array of string. Unlike other methods,\n    this method does not require secret token. This is safe because this method just returns the available\n    method names.\n\n    Original signature:\n\n        system.listMethods()\n\n    Returns:\n        The list of available RPC methods.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listMethods\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [u'aria2.addUri',\n                     u'aria2.addTorrent',\n         ...\n    \"\"\"\n    return self.call(self.LIST_METHODS)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.list_notifications","title":"list_notifications","text":"<pre><code>list_notifications() -&gt; list[str]\n</code></pre> <p>Return all the available RPC notifications.</p> <p>This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names.</p> <p>Original signature:</p> <pre><code>system.listNotifications()\n</code></pre> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The list of available RPC notifications.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listNotifications\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [u'aria2.onDownloadStart',\n             u'aria2.onDownloadPause',\n ...\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def list_notifications(self) -&gt; list[str]:\n    \"\"\"Return all the available RPC notifications.\n\n    This method returns all the available RPC notifications in an array of string. Unlike other methods,\n    this method does not require secret token. This is safe because this method just returns the available\n    notifications names.\n\n    Original signature:\n\n        system.listNotifications()\n\n    Returns:\n        The list of available RPC notifications.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listNotifications\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [u'aria2.onDownloadStart',\n                     u'aria2.onDownloadPause',\n         ...\n    \"\"\"\n    return self.call(self.LIST_NOTIFICATIONS)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.listen_to_notifications","title":"listen_to_notifications","text":"<pre><code>listen_to_notifications(\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,\n) -&gt; None\n</code></pre> <p>Start listening to aria2 notifications via WebSocket.</p> <p>This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification.</p> <p>Stop listening to notifications with the <code>stop_listening</code> method.</p> <p>Parameters:</p> <ul> <li> <code>on_download_start</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStart</code> event.</p> </li> <li> <code>on_download_pause</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadPause</code> event.</p> </li> <li> <code>on_download_stop</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStop</code> event.</p> </li> <li> <code>on_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadComplete</code> event.</p> </li> <li> <code>on_download_error</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadError</code> event.</p> </li> <li> <code>on_bt_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onBtDownloadComplete</code> event.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds.</p> </li> <li> <code>handle_signals</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def listen_to_notifications(\n    self,\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,  # noqa: FBT001,FBT002\n) -&gt; None:\n    \"\"\"Start listening to aria2 notifications via WebSocket.\n\n    This method opens a WebSocket connection to the server and wait for notifications (or events) to be received.\n    It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type\n    of notification.\n\n    Stop listening to notifications with the [`stop_listening`][aria2p.client.Client.stop_listening] method.\n\n    Parameters:\n        on_download_start: Callback for the `onDownloadStart` event.\n        on_download_pause: Callback for the `onDownloadPause` event.\n        on_download_stop: Callback for the `onDownloadStop` event.\n        on_download_complete: Callback for the `onDownloadComplete` event.\n        on_download_error: Callback for the `onDownloadError` event.\n        on_bt_download_complete: Callback for the `onBtDownloadComplete` event.\n        timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity\n            when stopping to listen. Default is 5 seconds.\n        handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.\n    \"\"\"\n    self.listening = True\n    ws_server = self.ws_server\n    log_prefix = f\"Notifications ({ws_server})\"\n\n    logger.debug(f\"{log_prefix}: opening WebSocket with timeout={timeout}\")\n    try:\n        socket = websocket.create_connection(ws_server, timeout=timeout)\n    except (ConnectionRefusedError, ConnectionResetError):\n        logger.error(f\"{log_prefix}: connection refused. Is the server running?\")\n        return\n\n    callbacks = {\n        NOTIFICATION_START: on_download_start,\n        NOTIFICATION_PAUSE: on_download_pause,\n        NOTIFICATION_STOP: on_download_stop,\n        NOTIFICATION_COMPLETE: on_download_complete,\n        NOTIFICATION_ERROR: on_download_error,\n        NOTIFICATION_BT_COMPLETE: on_bt_download_complete,\n    }\n\n    stopped = SignalHandler([\"SIGTERM\", \"SIGINT\"]) if handle_signals else False\n\n    while not stopped:\n        logger.debug(f\"{log_prefix}: waiting for data over WebSocket\")\n        try:\n            message = socket.recv()\n        except websocket.WebSocketConnectionClosedException:\n            logger.error(f\"{log_prefix}: connection to server was closed. Is the server running?\")\n            break\n        except websocket.WebSocketTimeoutException:\n            logger.debug(f\"{log_prefix}: reached timeout ({timeout}s)\")\n        else:\n            notification = Notification.get_or_raise(json.loads(message))\n            logger.info(\n                f\"{log_prefix}: received {notification.type} with gid={notification.gid}\",\n            )\n            callback = callbacks.get(notification.type)\n            if callable(callback):\n                logger.debug(f\"{log_prefix}: calling {callback} with gid={notification.gid}\")\n                callback(notification.gid)\n            else:\n                logger.debug(f\"{log_prefix}: no callback given for type \" + notification.type)\n\n        if not self.listening:\n            logger.debug(f\"{log_prefix}: stopped listening\")\n            break\n\n    if stopped:\n        logger.debug(f\"{log_prefix}: stopped listening after receiving a signal\")\n        self.listening = False\n\n    logger.debug(f\"{log_prefix}: closing WebSocket\")\n    socket.close()\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.multicall","title":"multicall","text":"<pre><code>multicall(methods: list[dict]) -&gt; list[CallReturnType]\n</code></pre> <p>Call multiple methods in a single request.</p> <p>This methods encapsulates multiple method calls in a single request.</p> <p>Original signature:</p> <pre><code>system.multicall(methods)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>methods</code>               (<code>list[dict]</code>)           \u2013            <p>An array of structs. The structs contain two keys: <code>methodName</code> and <code>params</code>. - <code>methodName</code> is the method name to call and - <code>params</code> is array containing parameters to the method call.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[CallReturnType]</code>           \u2013            <p>An array of responses.</p> </li> <li> <code>list[CallReturnType]</code>           \u2013            <p>The elements will be either a one-item array containing the return value of the method call or a struct of fault</p> </li> <li> <code>list[CallReturnType]</code>           \u2013            <p>element if an encapsulated method call fails.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent.</p> <pre><code>&gt;&gt;&gt; import urllib2, json, base64\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"system.multicall\",\n...         \"params\": [\n...             [\n...                 {\n...                     \"methodName\": \"aria2.addUri\",\n...                     \"params\": [[\"http://example.org\"]],\n...                 },\n...                 {\n...                     \"methodName\": \"aria2.addTorrent\",\n...                     \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n...                 },\n...             ]\n...         ],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'0000000000000001'], [u'd2703803b52216d1']]}\n</code></pre> <p>JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification:</p> <pre><code>&gt;&gt;&gt; jsonreq = json.dumps(\n...     [\n...         {\n...             \"jsonrpc\": \"2.0\",\n...             \"id\": \"qwer\",\n...             \"method\": \"aria2.addUri\",\n...             \"params\": [[\"http://example.org\"]],\n...         },\n...         {\n...             \"jsonrpc\": \"2.0\",\n...             \"id\": \"asdf\",\n...             \"method\": \"aria2.addTorrent\",\n...             \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n...         },\n...     ]\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n[{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'0000000000000001'},\n {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}]\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def multicall(self, methods: list[dict]) -&gt; list[CallReturnType]:\n    \"\"\"Call multiple methods in a single request.\n\n    This methods encapsulates multiple method calls in a single request.\n\n    Original signature:\n\n        system.multicall(methods)\n\n    Parameters:\n        methods: An array of structs. The structs contain two keys: `methodName` and `params`.\n            - `methodName` is the method name to call and\n            - `params` is array containing parameters to the method call.\n\n    Returns:\n        An array of responses.\n        The elements will be either a one-item array containing the return value of the method call or a struct of fault\n        element if an encapsulated method call fails.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is\n        file.torrent.\n\n        &gt;&gt;&gt; import urllib2, json, base64\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"system.multicall\",\n        ...         \"params\": [\n        ...             [\n        ...                 {\n        ...                     \"methodName\": \"aria2.addUri\",\n        ...                     \"params\": [[\"http://example.org\"]],\n        ...                 },\n        ...                 {\n        ...                     \"methodName\": \"aria2.addTorrent\",\n        ...                     \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n        ...                 },\n        ...             ]\n        ...         ],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'0000000000000001'], [u'd2703803b52216d1']]}\n\n        JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification:\n\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     [\n        ...         {\n        ...             \"jsonrpc\": \"2.0\",\n        ...             \"id\": \"qwer\",\n        ...             \"method\": \"aria2.addUri\",\n        ...             \"params\": [[\"http://example.org\"]],\n        ...         },\n        ...         {\n        ...             \"jsonrpc\": \"2.0\",\n        ...             \"id\": \"asdf\",\n        ...             \"method\": \"aria2.addTorrent\",\n        ...             \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n        ...         },\n        ...     ]\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'0000000000000001'},\n         {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}]\n    \"\"\"\n    return self.call(self.MULTICALL, [methods])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.multicall2","title":"multicall2","text":"<pre><code>multicall2(\n    calls: Multicalls2Type, insert_secret: bool = True\n) -&gt; CallReturnType\n</code></pre> <p>Call multiple methods in one request.</p> <p>A method equivalent to multicall, but with a simplified usage.</p> <p>Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2.</p> <p>With a classic multicall, you would write your params like:</p> <pre><code>[\n    {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]},\n    {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]},\n]\n</code></pre> <p>With multicall2, you can reduce the verbosity:</p> <pre><code>[\n    (client.REMOVE, [\"0000000000000001\"]),\n    (client.REMOVE, [\"2fa07b6e85c40205\"]),\n]\n</code></pre> Note <p>multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method.</p> <p>Parameters:</p> <ul> <li> <code>calls</code>               (<code>Multicalls2Type</code>)           \u2013            <p>List of tuples composed of method name and parameters.</p> </li> <li> <code>insert_secret</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to insert the secret token in the parameters or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CallReturnType</code>           \u2013            <p>The answer from the server, as a Python object (dict / list / str / int).</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def multicall2(self, calls: Multicalls2Type, insert_secret: bool = True) -&gt; CallReturnType:  # noqa: FBT001,FBT002\n    \"\"\"Call multiple methods in one request.\n\n    A method equivalent to multicall, but with a simplified usage.\n\n    Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you\n    to provide the values only, in tuples of length 2.\n\n    With a classic multicall, you would write your params like:\n\n        [\n            {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]},\n            {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]},\n        ]\n\n    With multicall2, you can reduce the verbosity:\n\n        [\n            (client.REMOVE, [\"0000000000000001\"]),\n            (client.REMOVE, [\"2fa07b6e85c40205\"]),\n        ]\n\n    Note:\n        multicall2 is not part of the JSON-RPC protocol specification.\n        It is implemented here as a simple convenience method.\n\n    Parameters:\n        calls: List of tuples composed of method name and parameters.\n        insert_secret: Whether to insert the secret token in the parameters or not.\n\n    Returns:\n        The answer from the server, as a Python object (dict / list / str / int).\n    \"\"\"\n    multicall_params = []\n\n    for method, params in calls:\n        params = self.get_params(*params)  # noqa: PLW2901\n        if insert_secret and self.secret and method.startswith(\"aria2.\"):\n            params.insert(0, f\"token:{self.secret}\")\n        multicall_params.append({\"methodName\": method, \"params\": params})\n\n    payload: str = self.get_payload(self.MULTICALL, [multicall_params])  # type: ignore\n    return self.res_or_raise(self.post(payload))\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.pause","title":"pause","text":"<pre><code>pause(gid: str) -&gt; str\n</code></pre> <p>Pause a download.</p> <p>This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the <code>unpause()</code> method.</p> <p>Original signature:</p> <pre><code>aria2.pause([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to pause.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the paused download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def pause(self, gid: str) -&gt; str:\n    \"\"\"Pause a download.\n\n    This method pauses the download denoted by gid (string).\n    The status of paused download becomes paused.\n    If the download was active, the download is placed in the front of waiting queue.\n    While the status is paused, the download is not started.\n    To change status to waiting, use the [`unpause()`][aria2p.client.Client.unpause] method.\n\n    Original signature:\n\n        aria2.pause([secret], gid)\n\n    Parameters:\n        gid: The download to pause.\n\n    Returns:\n        The GID of the paused download.\n    \"\"\"\n    return self.call(self.PAUSE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.pause_all","title":"pause_all","text":"<pre><code>pause_all() -&gt; str\n</code></pre> <p>Pause all active/waiting downloads.</p> <p>This method is equal to calling <code>pause()</code> for every active/waiting download.</p> <p>Original signature:</p> <pre><code>aria2.pauseAll([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def pause_all(self) -&gt; str:\n    \"\"\"Pause all active/waiting downloads.\n\n    This method is equal to calling [`pause()`][aria2p.client.Client.pause] for every active/waiting download.\n\n    Original signature:\n\n        aria2.pauseAll([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.PAUSE_ALL)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.post","title":"post","text":"<pre><code>post(payload: str) -&gt; dict\n</code></pre> <p>Send a POST request to the server.</p> <p>The response is a JSON string, which we then load as a Python object.</p> <p>Parameters:</p> <ul> <li> <code>payload</code>               (<code>str</code>)           \u2013            <p>The payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The answer from the server, as a Python dictionary.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def post(self, payload: str) -&gt; dict:\n    \"\"\"Send a POST request to the server.\n\n    The response is a JSON string, which we then load as a Python object.\n\n    Parameters:\n        payload: The payload / data to send to the remote process. It contains the following key-value pairs:\n            \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional).\n\n    Returns:\n        The answer from the server, as a Python dictionary.\n    \"\"\"\n    return requests.post(self.server, data=payload, timeout=self.timeout).json()\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.purge_download_result","title":"purge_download_result","text":"<pre><code>purge_download_result() -&gt; str\n</code></pre> <p>Purge completed/error/removed downloads from memory.</p> <p>Original signature:</p> <pre><code>aria2.purgeDownloadResult([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def purge_download_result(self) -&gt; str:\n    \"\"\"Purge completed/error/removed downloads from memory.\n\n    Original signature:\n\n        aria2.purgeDownloadResult([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.PURGE_DOWNLOAD_RESULT)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.remove","title":"remove","text":"<pre><code>remove(gid: str) -&gt; str\n</code></pre> <p>Remove a download.</p> <p>This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download.</p> <p>Original signature:</p> <pre><code>aria2.remove([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the removed download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples remove a download with GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.remove\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def remove(self, gid: str) -&gt; str:\n    \"\"\"Remove a download.\n\n    This method removes the download denoted by gid (string). If the specified download is in progress,\n    it is first stopped. The status of the removed download becomes removed. This method returns GID of\n    removed download.\n\n    Original signature:\n\n        aria2.remove([secret], gid)\n\n    Parameters:\n        gid: The download to remove.\n\n    Returns:\n        The GID of the removed download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples remove a download with GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.remove\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n    \"\"\"\n    return self.call(self.REMOVE, [gid])  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.remove_download_result","title":"remove_download_result","text":"<pre><code>remove_download_result(gid: str) -&gt; str\n</code></pre> <p>Remove a completed/error/removed download from memory.</p> <p>Original signature:</p> <pre><code>aria2.removeDownloadResult([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download result to remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> for success.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples remove the download result of the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.removeDownloadResult\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def remove_download_result(self, gid: str) -&gt; str:\n    \"\"\"Remove a completed/error/removed download from memory.\n\n    Original signature:\n\n        aria2.removeDownloadResult([secret], gid)\n\n    Parameters:\n        gid: The download result to remove.\n\n    Returns:\n        `\"OK\"` for success.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples remove the download result of the download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.removeDownloadResult\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n    \"\"\"\n    return self.call(self.REMOVE_DOWNLOAD_RESULT, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.res_or_raise","title":"res_or_raise  <code>staticmethod</code>","text":"<pre><code>res_or_raise(response: dict) -&gt; CallReturnType\n</code></pre> <p>Return the result of the response, or raise an error with code and message.</p> <p>Parameters:</p> <ul> <li> <code>response</code>               (<code>dict</code>)           \u2013            <p>A response sent by the server.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CallReturnType</code>           \u2013            <p>The \"result\" value of the response.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When the response contains an error (client/server error). See the <code>ClientException</code> class.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef res_or_raise(response: dict) -&gt; CallReturnType:\n    \"\"\"Return the result of the response, or raise an error with code and message.\n\n    Parameters:\n        response: A response sent by the server.\n\n    Returns:\n        The \"result\" value of the response.\n\n    Raises:\n        ClientException: When the response contains an error (client/server error).\n            See the [`ClientException`][aria2p.client.ClientException] class.\n    \"\"\"\n    if \"error\" in response:\n        raise Client.response_as_exception(response)\n    return response[\"result\"]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.response_as_exception","title":"response_as_exception  <code>staticmethod</code>","text":"<pre><code>response_as_exception(response: dict) -&gt; ClientException\n</code></pre> <p>Transform the response as a <code>ClientException</code> instance and return it.</p> <p>Parameters:</p> <ul> <li> <code>response</code>               (<code>dict</code>)           \u2013            <p>A response sent by the server.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ClientException</code>           \u2013            <p>An instance of the <code>ClientException</code> class.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef response_as_exception(response: dict) -&gt; ClientException:\n    \"\"\"Transform the response as a [`ClientException`][aria2p.client.ClientException] instance and return it.\n\n    Parameters:\n        response: A response sent by the server.\n\n    Returns:\n        An instance of the [`ClientException`][aria2p.client.ClientException] class.\n    \"\"\"\n    return ClientException(response[\"error\"][\"code\"], response[\"error\"][\"message\"])\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.save_session","title":"save_session","text":"<pre><code>save_session() -&gt; str\n</code></pre> <p>Save the current session to a file.</p> <p>This method saves the current session to a file specified by the <code>--save-session</code> option.</p> <p>Original signature:</p> <pre><code>aria2.saveSession([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> if it succeeds.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def save_session(self) -&gt; str:\n    \"\"\"Save the current session to a file.\n\n    This method saves the current session to a file specified\n    by the [`--save-session`][aria2p.options.Options.save_session] option.\n\n    Original signature:\n\n        aria2.saveSession([secret])\n\n    Returns:\n        `\"OK\"` if it succeeds.\n    \"\"\"\n    return self.call(self.SAVE_SESSION)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.shutdown","title":"shutdown","text":"<pre><code>shutdown() -&gt; str\n</code></pre> <p>Shutdown aria2.</p> <p>Original signature:</p> <pre><code>aria2.shutdown([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def shutdown(self) -&gt; str:\n    \"\"\"Shutdown aria2.\n\n    Original signature:\n\n        aria2.shutdown([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.SHUTDOWN)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.stop_listening","title":"stop_listening","text":"<pre><code>stop_listening() -&gt; None\n</code></pre> <p>Stop listening to notifications.</p> <p>Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to <code>Client.listen_to_notifications</code>.</p> Source code in <code>src/aria2p/client.py</code> <pre><code>def stop_listening(self) -&gt; None:\n    \"\"\"Stop listening to notifications.\n\n    Although this method returns instantly, the actual listening loop can take some time to break out,\n    depending on the timeout that was given to [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications].\n    \"\"\"\n    self.listening = False\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.tell_active","title":"tell_active","text":"<pre><code>tell_active(keys: list[str] | None = None) -&gt; list[dict]\n</code></pre> <p>Return the list of active downloads.</p> <p>Original signature:</p> <pre><code>aria2.tellActive([secret][, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return. Please refer to the <code>tell_status()</code> method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>An array of the same structs as returned by the <code>tell_status()</code> method.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_active(self, keys: list[str] | None = None) -&gt; list[dict]:\n    \"\"\"Return the list of active downloads.\n\n    Original signature:\n\n        aria2.tellActive([secret][, keys])\n\n    Parameters:\n        keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method.\n\n    Returns:\n        An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method.\n    \"\"\"\n    return self.call(self.TELL_ACTIVE, [keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.tell_status","title":"tell_status","text":"<pre><code>tell_status(\n    gid: str, keys: list[str] | None = None\n) -&gt; dict\n</code></pre> <p>Tell status of a download.</p> <p>This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, <code>tell_status(\"0000000000000001\", [\"gid\", \"status\"])</code> returns the gid and status keys only. The response is a struct and contains following keys. Values are strings.</p> <ul> <li><code>gid</code>: GID of the download.</li> <li><code>status</code>: active for currently downloading/seeding downloads. waiting for downloads in the queue; download is   not started. paused for paused downloads. error for downloads that were stopped because of error.   complete for stopped and completed downloads. removed for the downloads removed by user.</li> <li><code>totalLength</code>: Total length of the download in bytes.</li> <li><code>completedLength</code>: Completed length of the download in bytes.</li> <li><code>uploadLength</code>: Uploaded length of the download in bytes.</li> <li><code>bitfield</code>: Hexadecimal representation of the download progress. The highest bit corresponds to the piece at   index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing   pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key   will not be included in the response.</li> <li><code>downloadSpeed</code>: Download speed of this download measured in bytes/sec.</li> <li><code>uploadSpeed</code>: Upload speed of this download measured in bytes/sec.</li> <li><code>infoHash</code>: InfoHash. BitTorrent only.</li> <li><code>numSeeders</code>: The number of seeders aria2 has connected to. BitTorrent only.</li> <li><code>seeder</code> true if the local endpoint is a seeder. Otherwise false. BitTorrent only.</li> <li><code>pieceLength</code>: Piece length in bytes.</li> <li><code>numPieces</code>: The number of pieces.</li> <li><code>connections</code>: The number of peers/servers aria2 has connected to.</li> <li><code>errorCode</code>: The code of the last error for this item, if any. The value is a string. The error codes are defined   in the EXIT STATUS section. This value is only available for stopped/completed downloads.</li> <li><code>errorMessage</code>: The (hopefully) human readable error message associated to errorCode.</li> <li><code>followedBy</code>: List of GIDs which are generated as the result of this download. For example, when aria2 downloads a   Metalink file, it generates downloads described in the Metalink   (see the <code>--follow-metalink</code> option).   This value is useful to track auto-generated downloads. If there are no such downloads,   this key will not be included in the response.</li> <li><code>following</code>: The reverse link for followedBy.   A download included in followedBy has this object's GID in its following value.</li> <li><code>belongsTo</code>: GID of a parent download. Some downloads are a part of another download. For example, if a file in a   Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If   this download has no parent, this key will not be included in the response.</li> <li><code>dir</code>:Directory to save files.</li> <li><code>files</code>: Return the list of files.   The elements of this list are the same structs used in <code>get_files()</code> method.</li> <li><code>bittorrent</code>: Struct which contains information retrieved from the .torrent (file). BitTorrent only.   It contains the following keys:<ul> <li><code>announceList</code>: List of lists of announce URIs. If the torrent contains announce and no announce-list, announce   is converted to the announce-list format.</li> <li><code>comment</code>: The comment of the torrent. comment.utf-8 is used if available.</li> <li><code>creationDate</code>: The creation time of the torrent. The value is an integer since the epoch, measured in seconds.</li> <li><code>mode</code>: File mode of the torrent. The value is either single or multi.</li> <li><code>info</code>: Struct which contains data from Info dictionary. It contains following keys.<ul> <li><code>name</code>: name in info dictionary. name.utf-8 is used if available.</li> </ul> </li> </ul> </li> <li><code>verifiedLength</code>: The number of verified number of bytes while the files are being hash checked. This key exists only   when this download is being hash checked.</li> <li><code>verifyIntegrityPending</code>: true if this download is waiting for the hash check in a queue.   This key exists only when this download is in the queue.</li> </ul> <p>Original signature:</p> <pre><code>aria2.tellStatus([secret], gid[, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to tell status of.</p> </li> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The details of a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following example gets information about a download with GID#0000000000000001:</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.tellStatus\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'bitfield': u'0000000000',\n             u'completedLength': u'901120',\n             u'connections': u'1',\n             u'dir': u'/downloads',\n             u'downloadSpeed': u'15158',\n             u'files': [{u'index': u'1',\n                         u'length': u'34896138',\n                         u'completedLength': u'34896138',\n                         u'path': u'/downloads/file',\n                         u'selected': u'true',\n                         u'uris': [{u'status': u'used',\n                                    u'uri': u'http://example.org/file'}]}],\n             u'gid': u'0000000000000001',\n             u'numPieces': u'34',\n             u'pieceLength': u'1048576',\n             u'status': u'active',\n             u'totalLength': u'34896138',\n             u'uploadLength': u'0',\n             u'uploadSpeed': u'0'}}\n</code></pre> <p>The following example gets only specific keys:</p> <pre><code>&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.tellStatus\",\n...         \"params\": [\n...             \"0000000000000001\",\n...             [\"gid\", \"totalLength\", \"completedLength\"],\n...         ],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'completedLength': u'5701632',\n             u'gid': u'0000000000000001',\n             u'totalLength': u'34896138'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_status(self, gid: str, keys: list[str] | None = None) -&gt; dict:\n    \"\"\"Tell status of a download.\n\n    This method returns the progress of the download denoted by gid (string). keys is an array of strings. If\n    specified, the response contains only keys in the keys array. If keys is empty or omitted, the response\n    contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For\n    example, `tell_status(\"0000000000000001\", [\"gid\", \"status\"])` returns the gid and status keys only. The\n    response is a struct and contains following keys. Values are strings.\n\n    - `gid`: GID of the download.\n    - `status`: active for currently downloading/seeding downloads. waiting for downloads in the queue; download is\n      not started. paused for paused downloads. error for downloads that were stopped because of error.\n      complete for stopped and completed downloads. removed for the downloads removed by user.\n    - `totalLength`: Total length of the download in bytes.\n    - `completedLength`: Completed length of the download in bytes.\n    - `uploadLength`: Uploaded length of the download in bytes.\n    - `bitfield`: Hexadecimal representation of the download progress. The highest bit corresponds to the piece at\n      index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing\n      pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key\n      will not be included in the response.\n    - `downloadSpeed`: Download speed of this download measured in bytes/sec.\n    - `uploadSpeed`: Upload speed of this download measured in bytes/sec.\n    - `infoHash`: InfoHash. BitTorrent only.\n    - `numSeeders`: The number of seeders aria2 has connected to. BitTorrent only.\n    - `seeder` true if the local endpoint is a seeder. Otherwise false. BitTorrent only.\n    - `pieceLength`: Piece length in bytes.\n    - `numPieces`: The number of pieces.\n    - `connections`: The number of peers/servers aria2 has connected to.\n    - `errorCode`: The code of the last error for this item, if any. The value is a string. The error codes are defined\n      in the EXIT STATUS section. This value is only available for stopped/completed downloads.\n    - `errorMessage`: The (hopefully) human readable error message associated to errorCode.\n    - `followedBy`: List of GIDs which are generated as the result of this download. For example, when aria2 downloads a\n      Metalink file, it generates downloads described in the Metalink\n      (see the [`--follow-metalink`][aria2p.options.Options.follow_metalink] option).\n      This value is useful to track auto-generated downloads. If there are no such downloads,\n      this key will not be included in the response.\n    - `following`: The reverse link for followedBy.\n      A download included in followedBy has this object's GID in its following value.\n    - `belongsTo`: GID of a parent download. Some downloads are a part of another download. For example, if a file in a\n      Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If\n      this download has no parent, this key will not be included in the response.\n    - `dir`:Directory to save files.\n    - `files`: Return the list of files.\n      The elements of this list are the same structs used in [`get_files()`][aria2p.client.Client.get_files] method.\n    - `bittorrent`: Struct which contains information retrieved from the .torrent (file). BitTorrent only.\n      It contains the following keys:\n        - `announceList`: List of lists of announce URIs. If the torrent contains announce and no announce-list, announce\n          is converted to the announce-list format.\n        - `comment`: The comment of the torrent. comment.utf-8 is used if available.\n        - `creationDate`: The creation time of the torrent. The value is an integer since the epoch, measured in seconds.\n        - `mode`: File mode of the torrent. The value is either single or multi.\n        - `info`: Struct which contains data from Info dictionary. It contains following keys.\n            - `name`: name in info dictionary. name.utf-8 is used if available.\n    - `verifiedLength`: The number of verified number of bytes while the files are being hash checked. This key exists only\n      when this download is being hash checked.\n    - `verifyIntegrityPending`: true if this download is waiting for the hash check in a queue.\n      This key exists only when this download is in the queue.\n\n    Original signature:\n\n        aria2.tellStatus([secret], gid[, keys])\n\n    Parameters:\n        gid: The download to tell status of.\n        keys: The keys to return.\n\n    Returns:\n        The details of a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following example gets information about a download with GID#0000000000000001:\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.tellStatus\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'bitfield': u'0000000000',\n                     u'completedLength': u'901120',\n                     u'connections': u'1',\n                     u'dir': u'/downloads',\n                     u'downloadSpeed': u'15158',\n                     u'files': [{u'index': u'1',\n                                 u'length': u'34896138',\n                                 u'completedLength': u'34896138',\n                                 u'path': u'/downloads/file',\n                                 u'selected': u'true',\n                                 u'uris': [{u'status': u'used',\n                                            u'uri': u'http://example.org/file'}]}],\n                     u'gid': u'0000000000000001',\n                     u'numPieces': u'34',\n                     u'pieceLength': u'1048576',\n                     u'status': u'active',\n                     u'totalLength': u'34896138',\n                     u'uploadLength': u'0',\n                     u'uploadSpeed': u'0'}}\n\n        The following example gets only specific keys:\n\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.tellStatus\",\n        ...         \"params\": [\n        ...             \"0000000000000001\",\n        ...             [\"gid\", \"totalLength\", \"completedLength\"],\n        ...         ],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'completedLength': u'5701632',\n                     u'gid': u'0000000000000001',\n                     u'totalLength': u'34896138'}}\n    \"\"\"\n    return self.call(self.TELL_STATUS, [gid, keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.tell_stopped","title":"tell_stopped","text":"<pre><code>tell_stopped(\n    offset: int, num: int, keys: list[str] | None = None\n) -&gt; list[dict]\n</code></pre> <p>Return the list of stopped downloads.</p> <p>This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download.</p> <p>Original signature:</p> <pre><code>aria2.tellStopped([secret], offset, num[, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>)           \u2013            <p>Same semantics as described in the <code>tell_waiting()</code> method.</p> </li> <li> <code>num</code>               (<code>int</code>)           \u2013            <p>An integer to specify the maximum number of downloads to be returned.</p> </li> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return. Please refer to the <code>tell_status()</code> method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>An array of the same structs as returned by the <code>tell_status()</code> method.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_stopped(self, offset: int, num: int, keys: list[str] | None = None) -&gt; list[dict]:\n    \"\"\"Return the list of stopped downloads.\n\n    This method returns a list of stopped downloads. offset is an integer and specifies the offset from the\n    least recently stopped download.\n\n    Original signature:\n\n        aria2.tellStopped([secret], offset, num[, keys])\n\n    Parameters:\n        offset: Same semantics as described in the [`tell_waiting()`][aria2p.client.Client.tell_waiting] method.\n        num: An integer to specify the maximum number of downloads to be returned.\n        keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method.\n\n    Returns:\n        An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method.\n    \"\"\"\n    return self.call(self.TELL_STOPPED, [offset, num, keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.tell_waiting","title":"tell_waiting","text":"<pre><code>tell_waiting(\n    offset: int, num: int, keys: list[str] | None = None\n) -&gt; list[dict]\n</code></pre> <p>Return the list of waiting downloads.</p> <p>This method returns a list of waiting downloads, including paused ones.</p> <p>Original signature:</p> <pre><code>aria2.tellWaiting([secret], offset, num[, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>)           \u2013            <p>An integer to specify the offset from the download waiting at the front. If <code>offset</code> is a positive integer, this method returns downloads in the range of [<code>offset</code>, <code>offset</code> + <code>num</code>). <code>offset</code> can be a negative integer. <code>offset == -1</code> points last download in the waiting queue and <code>offset == -2</code> points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. <code>tell_waiting(0, 1)</code> returns <code>[\"A\"]</code>. <code>tell_waiting(1, 2)</code> returns <code>[\"B\", \"C\"]</code>. <code>tell_waiting(-1, 2)</code> returns <code>[\"C\", \"B\"]</code>.</p> </li> <li> <code>num</code>               (<code>int</code>)           \u2013            <p>An integer to specify the maximum number of downloads to be returned.</p> </li> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return. Please refer to the <code>tell_status()</code> method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>An array of the same structs as returned by <code>tell_status()</code> method.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_waiting(self, offset: int, num: int, keys: list[str] | None = None) -&gt; list[dict]:\n    \"\"\"Return the list of waiting downloads.\n\n    This method returns a list of waiting downloads, including paused ones.\n\n    Original signature:\n\n        aria2.tellWaiting([secret], offset, num[, keys])\n\n    Parameters:\n        offset: An integer to specify the offset from the download waiting at the front.\n            If `offset` is a positive integer, this method returns downloads in the range of [`offset`, `offset` + `num`).\n            `offset` can be a negative integer. `offset == -1` points last download in the waiting queue and `offset == -2`\n            points the download before the last download, and so on. Downloads in the response are in reversed order then.\n            For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. `tell_waiting(0, 1)`\n            returns `[\"A\"]`. `tell_waiting(1, 2)` returns `[\"B\", \"C\"]`. `tell_waiting(-1, 2)` returns `[\"C\", \"B\"]`.\n        num: An integer to specify the maximum number of downloads to be returned.\n        keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method.\n\n    Returns:\n        An array of the same structs as returned by [`tell_status()`][aria2p.client.Client.tell_status] method.\n    \"\"\"\n    return self.call(self.TELL_WAITING, [offset, num, keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.unpause","title":"unpause","text":"<pre><code>unpause(gid: str) -&gt; str\n</code></pre> <p>Resume a download.</p> <p>This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download.</p> <p>Original signature:</p> <pre><code>aria2.unpause([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to resume.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the resumed download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def unpause(self, gid: str) -&gt; str:\n    \"\"\"Resume a download.\n\n    This method changes the status of the download denoted by gid (string) from paused to waiting,\n    making the download eligible to be restarted. This method returns the GID of the unpaused download.\n\n    Original signature:\n\n        aria2.unpause([secret], gid)\n\n    Parameters:\n        gid: The download to resume.\n\n    Returns:\n        The GID of the resumed download.\n    \"\"\"\n    return self.call(self.UNPAUSE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Client.unpause_all","title":"unpause_all","text":"<pre><code>unpause_all() -&gt; str\n</code></pre> <p>Resume all downloads.</p> <p>This method is equal to calling <code>unpause()</code> for every active/waiting download.</p> <p>Original signature:</p> <pre><code>aria2.unpauseAll([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def unpause_all(self) -&gt; str:\n    \"\"\"Resume all downloads.\n\n    This method is equal to calling [`unpause()`][aria2p.client.Client.unpause] for every active/waiting download.\n\n    Original signature:\n\n        aria2.unpauseAll([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.UNPAUSE_ALL)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/#aria2p.ClientException","title":"ClientException","text":"<pre><code>ClientException(code: int, message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>An exception specific to JSON-RPC errors.</p> <p>Parameters:</p> <ul> <li> <code>code</code>               (<code>int</code>)           \u2013            <p>The error code.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The error message.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def __init__(self, code: int, message: str) -&gt; None:\n    \"\"\"Initialize the exception.\n\n    Parameters:\n        code: The error code.\n        message: The error message.\n    \"\"\"\n    super().__init__()\n    if code in JSONRPC_CODES:\n        message = f\"{JSONRPC_CODES[code]}\\n{message}\"\n\n    self.code = code\n    self.message = message\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download","title":"Download","text":"<pre><code>Download(api: API, struct: dict)\n</code></pre> <p>Class containing all information about a download, as retrieved with the client.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The reference to an <code>API</code> instance.</p> </li> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>completed_length_string</code>             \u2013              <p>Return the completed length as string.</p> </li> <li> <code>copy_files</code>             \u2013              <p>Copy downloaded files to another directory.</p> </li> <li> <code>download_speed_string</code>             \u2013              <p>Return the download speed as string.</p> </li> <li> <code>eta_string</code>             \u2013              <p>Return the Estimated Time of Arrival as a string.</p> </li> <li> <code>move</code>             \u2013              <p>Move the download in the queue, relatively.</p> </li> <li> <code>move_down</code>             \u2013              <p>Move the download down in the queue.</p> </li> <li> <code>move_files</code>             \u2013              <p>Move downloaded files to another directory.</p> </li> <li> <code>move_to</code>             \u2013              <p>Move the download in the queue, absolutely.</p> </li> <li> <code>move_to_bottom</code>             \u2013              <p>Move the download to the bottom of the queue.</p> </li> <li> <code>move_to_top</code>             \u2013              <p>Move the download to the top of the queue.</p> </li> <li> <code>move_up</code>             \u2013              <p>Move the download up in the queue.</p> </li> <li> <code>pause</code>             \u2013              <p>Pause the download.</p> </li> <li> <code>piece_length_string</code>             \u2013              <p>Return the piece length as string.</p> </li> <li> <code>progress_string</code>             \u2013              <p>Return the progress percentage as string.</p> </li> <li> <code>purge</code>             \u2013              <p>Purge itself from the results.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove the download from the queue (even if active).</p> </li> <li> <code>resume</code>             \u2013              <p>Resume the download.</p> </li> <li> <code>total_length_string</code>             \u2013              <p>Return the total length as string.</p> </li> <li> <code>update</code>             \u2013              <p>Update the internal values of the download with more recent values.</p> </li> <li> <code>update_options</code>             \u2013              <p>Re-fetch the options from the remote.</p> </li> <li> <code>upload_length_string</code>             \u2013              <p>Return the upload length as string.</p> </li> <li> <code>upload_speed_string</code>             \u2013              <p>Return the upload speed as string.</p> </li> <li> <code>verified_length_string</code>             \u2013              <p>Return the verified length as string.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>belongs_to</code>               (<code>Download | None</code>)           \u2013            <p>Parent download.</p> </li> <li> <code>belongs_to_id</code>               (<code>str | None</code>)           \u2013            <p>GID of a parent download.</p> </li> <li> <code>bitfield</code>               (<code>str | None</code>)           \u2013            <p>Hexadecimal representation of the download progress.</p> </li> <li> <code>bittorrent</code>               (<code>BitTorrent | None</code>)           \u2013            <p>Struct which contains information retrieved from the .torrent (file).</p> </li> <li> <code>completed_length</code>               (<code>int</code>)           \u2013            <p>Completed length of the download in bytes.</p> </li> <li> <code>connections</code>               (<code>int</code>)           \u2013            <p>Return the number of peers/servers aria2 has connected to.</p> </li> <li> <code>control_file_path</code>               (<code>Path</code>)           \u2013            <p>Return the path to the aria2 control file for this download.</p> </li> <li> <code>dir</code>               (<code>Path</code>)           \u2013            <p>Directory to save files.</p> </li> <li> <code>download_speed</code>               (<code>int</code>)           \u2013            <p>Download speed of this download measured in bytes/sec.</p> </li> <li> <code>error_code</code>               (<code>str | None</code>)           \u2013            <p>Return the code of the last error for this item, if any.</p> </li> <li> <code>error_message</code>               (<code>str | None</code>)           \u2013            <p>Return the (hopefully) human readable error message associated to errorCode.</p> </li> <li> <code>eta</code>               (<code>timedelta</code>)           \u2013            <p>Return the Estimated Time of Arrival (a timedelta).</p> </li> <li> <code>files</code>               (<code>list[File]</code>)           \u2013            <p>Return the list of files.</p> </li> <li> <code>followed_by</code>               (<code>list[Download]</code>)           \u2013            <p>List of downloads generated as the result of this download.</p> </li> <li> <code>followed_by_ids</code>               (<code>list[str]</code>)           \u2013            <p>List of GIDs which are generated as the result of this download.</p> </li> <li> <code>following</code>               (<code>Download | None</code>)           \u2013            <p>Return the download this download is following.</p> </li> <li> <code>following_id</code>               (<code>str | None</code>)           \u2013            <p>Return the reverse link for followedBy.</p> </li> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>GID of the download.</p> </li> <li> <code>has_failed</code>               (<code>bool</code>)           \u2013            <p>Return True if download has errored.</p> </li> <li> <code>info_hash</code>               (<code>str | None</code>)           \u2013            <p>Return the InfoHash.</p> </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            <p>Return True if download is active.</p> </li> <li> <code>is_complete</code>               (<code>bool</code>)           \u2013            <p>Return True if download is complete.</p> </li> <li> <code>is_metadata</code>               (<code>bool</code>)           \u2013            <p>Return True if this download is only composed of metadata, and no actual files.</p> </li> <li> <code>is_paused</code>               (<code>bool</code>)           \u2013            <p>Return True if download is paused.</p> </li> <li> <code>is_removed</code>               (<code>bool</code>)           \u2013            <p>Return True if download was removed.</p> </li> <li> <code>is_torrent</code>               (<code>bool</code>)           \u2013            <p>Return true if this download is a torrent.</p> </li> <li> <code>is_waiting</code>               (<code>bool</code>)           \u2013            <p>Return True if download is waiting.</p> </li> <li> <code>live</code>               (<code>Download</code>)           \u2013            <p>Return the same object with updated data.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Return the name of the download.</p> </li> <li> <code>num_pieces</code>               (<code>int</code>)           \u2013            <p>Return the number of pieces.</p> </li> <li> <code>num_seeders</code>               (<code>int</code>)           \u2013            <p>Return the number of seeders aria2 has connected to.</p> </li> <li> <code>options</code>               (<code>Options</code>)           \u2013            <p>Options specific to this download.</p> </li> <li> <code>piece_length</code>               (<code>int</code>)           \u2013            <p>Piece length in bytes.</p> </li> <li> <code>progress</code>               (<code>float</code>)           \u2013            <p>Return the progress of the download as float.</p> </li> <li> <code>root_files_paths</code>               (<code>list[Path]</code>)           \u2013            <p>Return the unique set of directories/files for this download.</p> </li> <li> <code>seeder</code>               (<code>bool</code>)           \u2013            <p>Return True if the local endpoint is a seeder, otherwise false.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>Return the status of the download.</p> </li> <li> <code>total_length</code>               (<code>int</code>)           \u2013            <p>Total length of the download in bytes.</p> </li> <li> <code>upload_length</code>               (<code>int</code>)           \u2013            <p>Return the uploaded length of the download in bytes.</p> </li> <li> <code>upload_speed</code>               (<code>int</code>)           \u2013            <p>Upload speed of this download measured in bytes/sec.</p> </li> <li> <code>verified_length</code>               (<code>int</code>)           \u2013            <p>Return the number of verified number of bytes while the files are being hash checked.</p> </li> <li> <code>verify_integrity_pending</code>               (<code>bool | None</code>)           \u2013            <p>Return True if this download is waiting for the hash check in a queue.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def __init__(self, api: API, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        api: The reference to an [`API`][aria2p.api.API] instance.\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self.api = api\n    self._struct = struct or {}\n    self._files: list[File] = []\n    self._root_files_paths: list[Path] = []\n    self._bittorrent: BitTorrent | None = None\n    self._name = \"\"\n    self._options: Options | None = None\n    self._followed_by: list[Download] | None = None\n    self._following: Download | None = None\n    self._belongs_to: Download | None = None\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.belongs_to","title":"belongs_to  <code>property</code>","text":"<pre><code>belongs_to: Download | None\n</code></pre> <p>Parent download.</p> <p>Returns:</p> <ul> <li> <code>Download | None</code>           \u2013            <p>An instance of <code>Download</code>.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.belongs_to_id","title":"belongs_to_id  <code>property</code>","text":"<pre><code>belongs_to_id: str | None\n</code></pre> <p>GID of a parent download.</p> <p>Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, The downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The GID of the parent download.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.bitfield","title":"bitfield  <code>property</code>","text":"<pre><code>bitfield: str | None\n</code></pre> <p>Hexadecimal representation of the download progress.</p> <p>The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The hexadecimal representation of the download progress.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.bittorrent","title":"bittorrent  <code>property</code>","text":"<pre><code>bittorrent: BitTorrent | None\n</code></pre> <p>Struct which contains information retrieved from the .torrent (file).</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>BitTorrent | None</code>           \u2013            <p>A BitTorrent instance or <code>None</code>.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.completed_length","title":"completed_length  <code>property</code>","text":"<pre><code>completed_length: int\n</code></pre> <p>Completed length of the download in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The completed length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.connections","title":"connections  <code>property</code>","text":"<pre><code>connections: int\n</code></pre> <p>Return the number of peers/servers aria2 has connected to.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of connected peers/servers.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.control_file_path","title":"control_file_path  <code>property</code>","text":"<pre><code>control_file_path: Path\n</code></pre> <p>Return the path to the aria2 control file for this download.</p> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The control file path.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.dir","title":"dir  <code>property</code>","text":"<pre><code>dir: Path\n</code></pre> <p>Directory to save files.</p> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The directory where the files are saved.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.download_speed","title":"download_speed  <code>property</code>","text":"<pre><code>download_speed: int\n</code></pre> <p>Download speed of this download measured in bytes/sec.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The download speed in bytes/sec.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.error_code","title":"error_code  <code>property</code>","text":"<pre><code>error_code: str | None\n</code></pre> <p>Return the code of the last error for this item, if any.</p> <p>The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The error code.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.error_message","title":"error_message  <code>property</code>","text":"<pre><code>error_message: str | None\n</code></pre> <p>Return the (hopefully) human readable error message associated to errorCode.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The error message.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.eta","title":"eta  <code>property</code>","text":"<pre><code>eta: timedelta\n</code></pre> <p>Return the Estimated Time of Arrival (a timedelta).</p> <p>Returns:</p> <ul> <li> <code>timedelta</code>           \u2013            <p>ETA or <code>timedelta.max</code> if unknown.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.files","title":"files  <code>property</code>","text":"<pre><code>files: list[File]\n</code></pre> <p>Return the list of files.</p> <p>The elements of this list are the same structs used in aria2.getFiles() method.</p> <p>Returns:</p> <ul> <li> <code>list[File]</code>           \u2013            <p>The files of this download.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.followed_by","title":"followed_by  <code>property</code>","text":"<pre><code>followed_by: list[Download]\n</code></pre> <p>List of downloads generated as the result of this download.</p> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>A list of instances of <code>Download</code>.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.followed_by_ids","title":"followed_by_ids  <code>property</code>","text":"<pre><code>followed_by_ids: list[str]\n</code></pre> <p>List of GIDs which are generated as the result of this download.</p> <p>For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The children downloads IDs.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.following","title":"following  <code>property</code>","text":"<pre><code>following: Download | None\n</code></pre> <p>Return the download this download is following.</p> <p>Returns:</p> <ul> <li> <code>Download | None</code>           \u2013            <p>An instance of <code>Download</code>.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.following_id","title":"following_id  <code>property</code>","text":"<pre><code>following_id: str | None\n</code></pre> <p>Return the reverse link for followedBy.</p> <p>A download included in followedBy has this object's GID in its following value.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The parent download ID.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.gid","title":"gid  <code>property</code>","text":"<pre><code>gid: str\n</code></pre> <p>GID of the download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download GID.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.has_failed","title":"has_failed  <code>property</code>","text":"<pre><code>has_failed: bool\n</code></pre> <p>Return True if download has errored.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download has failed.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.info_hash","title":"info_hash  <code>property</code>","text":"<pre><code>info_hash: str | None\n</code></pre> <p>Return the InfoHash.</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The InfoHash.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre> <p>Return True if download is active.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is active.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.is_complete","title":"is_complete  <code>property</code>","text":"<pre><code>is_complete: bool\n</code></pre> <p>Return True if download is complete.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is complete.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.is_metadata","title":"is_metadata  <code>property</code>","text":"<pre><code>is_metadata: bool\n</code></pre> <p>Return True if this download is only composed of metadata, and no actual files.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this is a metadata download.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.is_paused","title":"is_paused  <code>property</code>","text":"<pre><code>is_paused: bool\n</code></pre> <p>Return True if download is paused.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is paused.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.is_removed","title":"is_removed  <code>property</code>","text":"<pre><code>is_removed: bool\n</code></pre> <p>Return True if download was removed.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download was removed.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.is_torrent","title":"is_torrent  <code>property</code>","text":"<pre><code>is_torrent: bool\n</code></pre> <p>Return true if this download is a torrent.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this is a torrent downlaod.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.is_waiting","title":"is_waiting  <code>property</code>","text":"<pre><code>is_waiting: bool\n</code></pre> <p>Return True if download is waiting.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is waiting.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.live","title":"live  <code>property</code>","text":"<pre><code>live: Download\n</code></pre> <p>Return the same object with updated data.</p> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>Itself.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Return the name of the download.</p> <p>Name is the name of the file if single-file, first file's directory name if multi-file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download name.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.num_pieces","title":"num_pieces  <code>property</code>","text":"<pre><code>num_pieces: int\n</code></pre> <p>Return the number of pieces.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of pieces.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.num_seeders","title":"num_seeders  <code>property</code>","text":"<pre><code>num_seeders: int\n</code></pre> <p>Return the number of seeders aria2 has connected to.</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The numbers of seeders.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.options","title":"options  <code>property</code> <code>writable</code>","text":"<pre><code>options: Options\n</code></pre> <p>Options specific to this download.</p> <p>Returns:</p> <ul> <li> <code>Options</code>           \u2013            <p>The download options.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.piece_length","title":"piece_length  <code>property</code>","text":"<pre><code>piece_length: int\n</code></pre> <p>Piece length in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The piece length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.progress","title":"progress  <code>property</code>","text":"<pre><code>progress: float\n</code></pre> <p>Return the progress of the download as float.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>Progress percentage.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.root_files_paths","title":"root_files_paths  <code>property</code>","text":"<pre><code>root_files_paths: list[Path]\n</code></pre> <p>Return the unique set of directories/files for this download.</p> <p>Instead of returning all the leaves like self.files, return the relative root directories if any, and relative root files.</p> <p>This property is useful when we need to list the directories and files in order to move or copy them. We don't want to copy files one by one, but rather entire directories at once when possible.</p> <p>Returns:</p> <ul> <li> <code>list[Path]</code>           \u2013            <p>The root file paths.</p> </li> </ul> <p>Examples:</p> <p>Download directory is <code>/a/b</code>.</p> <pre><code>&gt;&gt;&gt; self.files\n[\"/a/b/c/1.txt\", \"/a/b/c/2.txt\", \"/a/b/3.txt\"]\n&gt;&gt;&gt; self.root_files_paths\n[\"/a/b/c\", \"/a/b/3.txt\"]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.seeder","title":"seeder  <code>property</code>","text":"<pre><code>seeder: bool\n</code></pre> <p>Return True if the local endpoint is a seeder, otherwise false.</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If the local endpoint is a seeder.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.status","title":"status  <code>property</code>","text":"<pre><code>status: str\n</code></pre> <p>Return the status of the download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>active</code>, <code>waiting</code>, <code>paused</code>, <code>error</code>, <code>complete</code> or <code>removed</code>.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.total_length","title":"total_length  <code>property</code>","text":"<pre><code>total_length: int\n</code></pre> <p>Total length of the download in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The total length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.upload_length","title":"upload_length  <code>property</code>","text":"<pre><code>upload_length: int\n</code></pre> <p>Return the uploaded length of the download in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The uploaded length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.upload_speed","title":"upload_speed  <code>property</code>","text":"<pre><code>upload_speed: int\n</code></pre> <p>Upload speed of this download measured in bytes/sec.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The upload speed in bytes/sec.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.verified_length","title":"verified_length  <code>property</code>","text":"<pre><code>verified_length: int\n</code></pre> <p>Return the number of verified number of bytes while the files are being hash checked.</p> <p>This key exists only when this download is being hash checked.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The verified length.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.verify_integrity_pending","title":"verify_integrity_pending  <code>property</code>","text":"<pre><code>verify_integrity_pending: bool | None\n</code></pre> <p>Return True if this download is waiting for the hash check in a queue.</p> <p>This key exists only when this download is in the queue.</p> <p>Returns:</p> <ul> <li> <code>bool | None</code>           \u2013            <p>Whether this download is waiting for the hash check.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Download.completed_length_string","title":"completed_length_string","text":"<pre><code>completed_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the completed length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The completed length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def completed_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the completed length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The completed length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.completed_length, delim=\" \")\n    return str(self.completed_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.copy_files","title":"copy_files","text":"<pre><code>copy_files(\n    to_directory: str | Path, force: bool = False\n) -&gt; bool\n</code></pre> <p>Copy downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to copy files into.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def copy_files(self, to_directory: str | Path, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Copy downloaded files to another directory.\n\n    Parameters:\n        to_directory: The target directory to copy files into.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.api.copy_files([self], to_directory, force)[0]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.download_speed_string","title":"download_speed_string","text":"<pre><code>download_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the download speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download speed string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def download_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the download speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The download speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.download_speed, delim=\" \", postfix=\"/s\")\n    return str(self.download_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.eta_string","title":"eta_string","text":"<pre><code>eta_string(precision: int = 0) -&gt; str\n</code></pre> <p>Return the Estimated Time of Arrival as a string.</p> <p>Parameters:</p> <ul> <li> <code>precision</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The precision to use, see [aria2p.utils.human_readable_timedelta].</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Estimated Time of Arrival as a string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def eta_string(self, precision: int = 0) -&gt; str:\n    \"\"\"Return the Estimated Time of Arrival as a string.\n\n    Parameters:\n        precision: The precision to use, see [aria2p.utils.human_readable_timedelta].\n\n    Returns:\n        The Estimated Time of Arrival as a string.\n    \"\"\"\n    eta = self.eta\n\n    if eta == timedelta.max:\n        return \"-\"\n\n    return human_readable_timedelta(eta, precision=precision)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.move","title":"move","text":"<pre><code>move(pos: int) -&gt; int\n</code></pre> <p>Move the download in the queue, relatively.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>Number of times to move.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move(self, pos: int) -&gt; int:\n    \"\"\"Move the download in the queue, relatively.\n\n    Parameters:\n        pos: Number of times to move.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move(self, pos)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.move_down","title":"move_down","text":"<pre><code>move_down(pos: int = 1) -&gt; int\n</code></pre> <p>Move the download down in the queue.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move down.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_down(self, pos: int = 1) -&gt; int:\n    \"\"\"Move the download down in the queue.\n\n    Parameters:\n        pos: Number of times to move down.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_down(self, pos)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.move_files","title":"move_files","text":"<pre><code>move_files(\n    to_directory: str | Path, force: bool = False\n) -&gt; bool\n</code></pre> <p>Move downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to move files to.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_files(self, to_directory: str | Path, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Move downloaded files to another directory.\n\n    Parameters:\n        to_directory: The target directory to move files to.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.api.move_files([self], to_directory, force)[0]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.move_to","title":"move_to","text":"<pre><code>move_to(pos: int) -&gt; int\n</code></pre> <p>Move the download in the queue, absolutely.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>The absolute position in the queue to take.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_to(self, pos: int) -&gt; int:\n    \"\"\"Move the download in the queue, absolutely.\n\n    Parameters:\n        pos: The absolute position in the queue to take.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_to(self, pos)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.move_to_bottom","title":"move_to_bottom","text":"<pre><code>move_to_bottom() -&gt; int\n</code></pre> <p>Move the download to the bottom of the queue.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_to_bottom(self) -&gt; int:\n    \"\"\"Move the download to the bottom of the queue.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_to_bottom(self)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.move_to_top","title":"move_to_top","text":"<pre><code>move_to_top() -&gt; int\n</code></pre> <p>Move the download to the top of the queue.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_to_top(self) -&gt; int:\n    \"\"\"Move the download to the top of the queue.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_to_top(self)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.move_up","title":"move_up","text":"<pre><code>move_up(pos: int = 1) -&gt; int\n</code></pre> <p>Move the download up in the queue.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move up.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_up(self, pos: int = 1) -&gt; int:\n    \"\"\"Move the download up in the queue.\n\n    Parameters:\n        pos: Number of times to move up.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_up(self, pos)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.pause","title":"pause","text":"<pre><code>pause(force: bool = False) -&gt; bool\n</code></pre> <p>Pause the download.</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force pause (don't contact servers).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Always True (raises exception otherwise).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When pausing failed.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def pause(self, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Pause the download.\n\n    Parameters:\n        force: Whether to force pause (don't contact servers).\n\n    Returns:\n        Always True (raises exception otherwise).\n\n    Raises:\n        ClientException: When pausing failed.\n    \"\"\"\n    result = self.api.pause([self], force=force)[0]\n    if not result:\n        raise result  # type: ignore  # we know it's a ClientException\n    return True\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.piece_length_string","title":"piece_length_string","text":"<pre><code>piece_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the piece length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The piece length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def piece_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the piece length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The piece length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.piece_length, delim=\" \")\n    return str(self.piece_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.progress_string","title":"progress_string","text":"<pre><code>progress_string(digits: int = 2) -&gt; str\n</code></pre> <p>Return the progress percentage as string.</p> <p>Parameters:</p> <ul> <li> <code>digits</code>               (<code>int</code>, default:                   <code>2</code> )           \u2013            <p>Number of decimal digits to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The progress percentage.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def progress_string(self, digits: int = 2) -&gt; str:\n    \"\"\"Return the progress percentage as string.\n\n    Parameters:\n        digits: Number of decimal digits to use.\n\n    Returns:\n        The progress percentage.\n    \"\"\"\n    return f\"{self.progress:.{digits}f}%\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.purge","title":"purge","text":"<pre><code>purge() -&gt; bool\n</code></pre> <p>Purge itself from the results.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def purge(self) -&gt; bool:\n    \"\"\"Purge itself from the results.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.api.client.remove_download_result(self.gid) == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.remove","title":"remove","text":"<pre><code>remove(force: bool = False, files: bool = False) -&gt; bool\n</code></pre> <p>Remove the download from the queue (even if active).</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force removal.</p> </li> <li> <code>files</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove files as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Always True (raises exception otherwise).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When removal failed.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def remove(self, force: bool = False, files: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Remove the download from the queue (even if active).\n\n    Parameters:\n        force: Whether to force removal.\n        files: Whether to remove files as well.\n\n    Returns:\n        Always True (raises exception otherwise).\n\n    Raises:\n        ClientException: When removal failed.\n    \"\"\"\n    result = self.api.remove([self], force=force, files=files)[0]\n    if not result:\n        raise result  # type: ignore  # we know it's a ClientException\n    return True\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.resume","title":"resume","text":"<pre><code>resume() -&gt; bool\n</code></pre> <p>Resume the download.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Always True (raises exception otherwise).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When resuming failed.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def resume(self) -&gt; bool:\n    \"\"\"Resume the download.\n\n    Returns:\n        Always True (raises exception otherwise).\n\n    Raises:\n        ClientException: When resuming failed.\n    \"\"\"\n    result = self.api.resume([self])[0]\n    if not result:\n        raise result  # type: ignore  # we know it's a ClientException\n    return True\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.total_length_string","title":"total_length_string","text":"<pre><code>total_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the total length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The total length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def total_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the total length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The total length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.total_length, delim=\" \")\n    return str(self.total_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Update the internal values of the download with more recent values.</p> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def update(self) -&gt; None:\n    \"\"\"Update the internal values of the download with more recent values.\"\"\"\n    self._struct = self.api.client.tell_status(self.gid)\n\n    self._files = []\n    self._name = \"\"\n    self._bittorrent = None\n    self._followed_by = None\n    self._following = None\n    self._belongs_to = None\n    self._options = None\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.update_options","title":"update_options","text":"<pre><code>update_options() -&gt; None\n</code></pre> <p>Re-fetch the options from the remote.</p> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def update_options(self) -&gt; None:\n    \"\"\"Re-fetch the options from the remote.\"\"\"\n    self._options = self.api.get_options(downloads=[self])[0]\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.upload_length_string","title":"upload_length_string","text":"<pre><code>upload_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the upload length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The upload length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def upload_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the upload length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The upload length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.upload_length, delim=\" \")\n    return str(self.upload_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.upload_speed_string","title":"upload_speed_string","text":"<pre><code>upload_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the upload speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The upload speed string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def upload_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the upload speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The upload speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.upload_speed, delim=\" \", postfix=\"/s\")\n    return str(self.upload_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Download.verified_length_string","title":"verified_length_string","text":"<pre><code>verified_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the verified length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The verified length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def verified_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the verified length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The verified length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.verified_length, delim=\" \")\n    return str(self.verified_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.File","title":"File","text":"<pre><code>File(struct: dict)\n</code></pre> <p>Information about a download's file.</p> <p>Parameters:</p> <ul> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>completed_length_string</code>             \u2013              <p>Return the completed length as string.</p> </li> <li> <code>length_string</code>             \u2013              <p>Return the length as string.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>completed_length</code>               (<code>int</code>)           \u2013            <p>Completed length of this file in bytes.</p> </li> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.</p> </li> <li> <code>is_metadata</code>               (<code>bool</code>)           \u2013            <p>Return True if this file is aria2 metadata and not an actual file.</p> </li> <li> <code>length</code>               (<code>int</code>)           \u2013            <p>Return the file size in bytes.</p> </li> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>File path.</p> </li> <li> <code>selected</code>               (<code>bool</code>)           \u2013            <p>Return True if this file is selected by <code>--select-file</code> option.</p> </li> <li> <code>uris</code>               (<code>list[dict]</code>)           \u2013            <p>Return a list of URIs for this file.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def __init__(self, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/#aria2p.File.completed_length","title":"completed_length  <code>property</code>","text":"<pre><code>completed_length: int\n</code></pre> <p>Completed length of this file in bytes.</p> <p>Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The completed length.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.File.index","title":"index  <code>property</code>","text":"<pre><code>index: int\n</code></pre> <p>Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The index of the file.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.File.is_metadata","title":"is_metadata  <code>property</code>","text":"<pre><code>is_metadata: bool\n</code></pre> <p>Return True if this file is aria2 metadata and not an actual file.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If the file is metadata.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.File.length","title":"length  <code>property</code>","text":"<pre><code>length: int\n</code></pre> <p>Return the file size in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The file size in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.File.path","title":"path  <code>property</code>","text":"<pre><code>path: Path\n</code></pre> <p>File path.</p> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The file path.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.File.selected","title":"selected  <code>property</code>","text":"<pre><code>selected: bool\n</code></pre> <p>Return True if this file is selected by <code>--select-file</code> option.</p> <p>If <code>--select-file</code> is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this file is selected.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.File.uris","title":"uris  <code>property</code>","text":"<pre><code>uris: list[dict]\n</code></pre> <p>Return a list of URIs for this file.</p> <p>The element type is the same struct used in the <code>client.get_uris()</code> method.</p> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>The list of URIs.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.File.completed_length_string","title":"completed_length_string","text":"<pre><code>completed_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the completed length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The completed length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def completed_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the completed length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The completed length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.completed_length, delim=\" \")\n    return str(self.completed_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.File.length_string","title":"length_string","text":"<pre><code>length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.length, delim=\" \")\n    return str(self.length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Options","title":"Options","text":"<pre><code>Options(\n    api: API, struct: dict, download: Download | None = None\n)\n</code></pre> <p>This class holds information retrieved with the <code>get_option</code> or <code>get_global_option</code> methods of the client.</p> <p>Instances are given a reference to an <code>API</code> instance to be able to change their values both locally and remotely, by using the API client and calling remote methods to change options.</p> <p>The options are available with the same names, using underscores instead of dashes, except for \"continue\" (which is a Python reserved keyword) which is here called \"continue_downloads\". For example, \"max-concurrent-downloads\" is used like <code>options.max_concurrent_downloads = 5</code>.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The reference to an <code>API</code> instance.</p> </li> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> <li> <code>download</code>               (<code>Download | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional <code>Download</code> object to inform about the owner, or None to tell they are global options.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get</code>             \u2013              <p>Get the value of an option given its name.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return a copy of the struct dictionary of this Options object.</p> </li> <li> <code>set</code>             \u2013              <p>Set the value of an option given its name.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>all_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>all-proxy</code> option value.</p> </li> <li> <code>all_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>all-proxy-passwd</code> option value.</p> </li> <li> <code>all_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>all-proxy-user</code> option value.</p> </li> <li> <code>allow_overwrite</code>               (<code>bool</code>)           \u2013            <p>Return the <code>allow-overwrite</code> option value.</p> </li> <li> <code>allow_piece_length_change</code>               (<code>bool</code>)           \u2013            <p>Return the <code>allow-piece-length-change</code> option value.</p> </li> <li> <code>always_resume</code>               (<code>bool</code>)           \u2013            <p>Return the <code>always-resume</code> option value.</p> </li> <li> <code>are_global</code>               (<code>bool</code>)           \u2013            <p>Tell if options are global, or tied to a Download object.</p> </li> <li> <code>async_dns</code>               (<code>bool</code>)           \u2013            <p>Return the <code>async-dns</code> option value.</p> </li> <li> <code>async_dns_server</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>async-dns-server</code> option value.</p> </li> <li> <code>auto_file_renaming</code>               (<code>bool</code>)           \u2013            <p>Return the <code>auto-file-renaming</code> option value.</p> </li> <li> <code>auto_save_interval</code>               (<code>int</code>)           \u2013            <p>Save a control file (*.aria2) every SEC seconds.</p> </li> <li> <code>bt_detach_seed_only</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-detach-seed-only</code> option value.</p> </li> <li> <code>bt_enable_hook_after_hash_check</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-enable-hook-after-hash-check</code> option value.</p> </li> <li> <code>bt_enable_lpd</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-enable-lpd</code> option value.</p> </li> <li> <code>bt_exclude_tracker</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>bt-exclude-tracker</code> option value.</p> </li> <li> <code>bt_external_ip</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-external-ip</code> option value.</p> </li> <li> <code>bt_force_encryption</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-force-encryption</code> option value.</p> </li> <li> <code>bt_hash_check_seed</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-hash-check-seed</code> option value.</p> </li> <li> <code>bt_lpd_interface</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-lpd-interface</code> option value.</p> </li> <li> <code>bt_max_open_files</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-max-open-files</code> option value.</p> </li> <li> <code>bt_max_peers</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-max-peers</code> option value.</p> </li> <li> <code>bt_metadata_only</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-metadata-only</code> option value.</p> </li> <li> <code>bt_min_crypto_level</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-min-crypto-level</code> option value.</p> </li> <li> <code>bt_prioritize_piece</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-prioritize-piece</code> option value.</p> </li> <li> <code>bt_remove_unselected_file</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-remove-unselected-file</code> option value.</p> </li> <li> <code>bt_request_peer_speed_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-request-peer-speed-limit</code> option value.</p> </li> <li> <code>bt_require_crypto</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-require-crypto</code> option value.</p> </li> <li> <code>bt_save_metadata</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-save-metadata</code> option value.</p> </li> <li> <code>bt_seed_unverified</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-seed-unverified</code> option value.</p> </li> <li> <code>bt_stop_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-stop-timeout</code> option value.</p> </li> <li> <code>bt_tracker</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>bt-tracker</code> option value.</p> </li> <li> <code>bt_tracker_connect_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-tracker-connect-timeout</code> option value.</p> </li> <li> <code>bt_tracker_interval</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-tracker-interval</code> option value.</p> </li> <li> <code>bt_tracker_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-tracker-timeout</code> option value.</p> </li> <li> <code>ca_certificate</code>               (<code>str</code>)           \u2013            <p>Return the <code>ca-certificate</code> option value.</p> </li> <li> <code>certificate</code>               (<code>str</code>)           \u2013            <p>Return the <code>certificate</code> option value.</p> </li> <li> <code>check_certificate</code>               (<code>bool</code>)           \u2013            <p>Return the <code>check-certificate</code> option value.</p> </li> <li> <code>check_integrity</code>               (<code>bool</code>)           \u2013            <p>Return the <code>check-integrity</code> option value.</p> </li> <li> <code>checksum</code>               (<code>str</code>)           \u2013            <p>Return the <code>checksum</code> option value.</p> </li> <li> <code>conditional_get</code>               (<code>bool</code>)           \u2013            <p>Return the <code>conditional-get</code> option value.</p> </li> <li> <code>conf_path</code>               (<code>str</code>)           \u2013            <p>Return the <code>conf-path</code> option value.</p> </li> <li> <code>connect_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>connect-timeout</code> option value.</p> </li> <li> <code>console_log_level</code>               (<code>str</code>)           \u2013            <p>Return the <code>console-log-level</code> option value.</p> </li> <li> <code>continue_downloads</code>               (<code>bool</code>)           \u2013            <p>Return the <code>continue-downloads</code> option value.</p> </li> <li> <code>daemon</code>               (<code>bool</code>)           \u2013            <p>Return the <code>daemon</code> option value.</p> </li> <li> <code>deferred_input</code>               (<code>bool</code>)           \u2013            <p>Return the <code>deferred-input</code> option value.</p> </li> <li> <code>dht_entry_point</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-entry-point</code> option value.</p> </li> <li> <code>dht_entry_point6</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-entry-point6</code> option value.</p> </li> <li> <code>dht_file_path</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-file-path</code> option value.</p> </li> <li> <code>dht_file_path6</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-file-path6</code> option value.</p> </li> <li> <code>dht_listen_addr6</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-listen-addr6</code> option value.</p> </li> <li> <code>dht_listen_port</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-listen-port</code> option value.</p> </li> <li> <code>dht_message_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>dht-message-timeout</code> option value.</p> </li> <li> <code>dir</code>               (<code>str</code>)           \u2013            <p>Return the <code>dir</code> option value.</p> </li> <li> <code>disable_ipv6</code>               (<code>bool</code>)           \u2013            <p>Return the <code>disable-ipv6</code> option value.</p> </li> <li> <code>disk_cache</code>               (<code>int</code>)           \u2013            <p>Return the <code>disk-cache</code> option value.</p> </li> <li> <code>download_result</code>               (<code>str</code>)           \u2013            <p>Return the <code>download-result</code> option value.</p> </li> <li> <code>dry_run</code>               (<code>bool</code>)           \u2013            <p>Return the <code>dry-run</code> option value.</p> </li> <li> <code>dscp</code>               (<code>str</code>)           \u2013            <p>Return the <code>dscp</code> option value.</p> </li> <li> <code>enable_color</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-color</code> option value.</p> </li> <li> <code>enable_dht</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-dht</code> option value.</p> </li> <li> <code>enable_dht6</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-dht6</code> option value.</p> </li> <li> <code>enable_http_keep_alive</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-http-keep-alive</code> option value.</p> </li> <li> <code>enable_http_pipelining</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-http-pipelining</code> option value.</p> </li> <li> <code>enable_mmap</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-mmap</code> option value.</p> </li> <li> <code>enable_peer_exchange</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-peer-exchange</code> option value.</p> </li> <li> <code>enable_rpc</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-rpc</code> option value.</p> </li> <li> <code>event_poll</code>               (<code>str</code>)           \u2013            <p>Specify the method for polling events.</p> </li> <li> <code>file_allocation</code>               (<code>str</code>)           \u2013            <p>Return the <code>file-allocation</code> option value.</p> </li> <li> <code>follow_metalink</code>               (<code>str</code>)           \u2013            <p>Return the <code>follow-metalink</code> option value.</p> </li> <li> <code>follow_torrent</code>               (<code>str</code>)           \u2013            <p>Return the <code>follow-torrent</code> option value.</p> </li> <li> <code>force_save</code>               (<code>bool</code>)           \u2013            <p>Return the <code>force-save</code> option value.</p> </li> <li> <code>force_sequential</code>               (<code>bool</code>)           \u2013            <p>Return the <code>force-sequential</code> option value.</p> </li> <li> <code>ftp_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-passwd</code> option value.</p> </li> <li> <code>ftp_pasv</code>               (<code>bool</code>)           \u2013            <p>Return the <code>ftp-pasv</code> option value.</p> </li> <li> <code>ftp_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-proxy</code> option value.</p> </li> <li> <code>ftp_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-proxy-passwd</code> option value.</p> </li> <li> <code>ftp_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-proxy-user</code> option value.</p> </li> <li> <code>ftp_reuse_connection</code>               (<code>bool</code>)           \u2013            <p>Return the <code>ftp-reuse-connection</code> option value.</p> </li> <li> <code>ftp_type</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-type</code> option value.</p> </li> <li> <code>ftp_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-user</code> option value.</p> </li> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>Return the <code>gid</code> option value.</p> </li> <li> <code>hash_check_only</code>               (<code>bool</code>)           \u2013            <p>Return the <code>hash-check-only</code> option value.</p> </li> <li> <code>header</code>               (<code>str</code>)           \u2013            <p>Return the <code>header</code> option value.</p> </li> <li> <code>http_accept_gzip</code>               (<code>bool</code>)           \u2013            <p>Return the <code>http-accept-gzip</code> option value.</p> </li> <li> <code>http_auth_challenge</code>               (<code>bool</code>)           \u2013            <p>Return the <code>http-auth-challenge</code> option value.</p> </li> <li> <code>http_no_cache</code>               (<code>bool</code>)           \u2013            <p>Return the <code>http-no-cache</code> option value.</p> </li> <li> <code>http_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-passwd</code> option value.</p> </li> <li> <code>http_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-proxy</code> option value.</p> </li> <li> <code>http_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-proxy-passwd</code> option value.</p> </li> <li> <code>http_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-proxy-user</code> option value.</p> </li> <li> <code>http_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-user</code> option value.</p> </li> <li> <code>https_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>https-proxy</code> option value.</p> </li> <li> <code>https_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>https-proxy-passwd</code> option value.</p> </li> <li> <code>https_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>https-proxy-user</code> option value.</p> </li> <li> <code>human_readable</code>               (<code>bool</code>)           \u2013            <p>Return the <code>human-readable</code> option value.</p> </li> <li> <code>index_out</code>               (<code>str</code>)           \u2013            <p>Return the <code>index-out</code> option value.</p> </li> <li> <code>input_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>input-file</code> option value.</p> </li> <li> <code>interface</code>               (<code>str</code>)           \u2013            <p>Return the <code>interface</code> option value.</p> </li> <li> <code>keep_unfinished_download_result</code>               (<code>bool</code>)           \u2013            <p>Return the <code>keep-unfinished-download-result</code> option value.</p> </li> <li> <code>listen_port</code>               (<code>str</code>)           \u2013            <p>Return the <code>listen-port</code> option value.</p> </li> <li> <code>load_cookies</code>               (<code>str</code>)           \u2013            <p>Return the <code>load-cookies</code> option value.</p> </li> <li> <code>log</code>               (<code>str</code>)           \u2013            <p>Return the <code>log</code> option value.</p> </li> <li> <code>log_level</code>               (<code>str</code>)           \u2013            <p>Return the <code>log-level</code> option value.</p> </li> <li> <code>lowest_speed_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>lowest-speed-limit</code> option value.</p> </li> <li> <code>max_concurrent_downloads</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-concurrent-downloads</code> option value.</p> </li> <li> <code>max_connection_per_server</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-connection-per-server</code> option value.</p> </li> <li> <code>max_download_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-download-limit</code> option value.</p> </li> <li> <code>max_download_result</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-download-result</code> option value.</p> </li> <li> <code>max_file_not_found</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-file-not-found</code> option value.</p> </li> <li> <code>max_mmap_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-mmap-limit</code> option value.</p> </li> <li> <code>max_overall_download_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-overall-download-limit</code> option value.</p> </li> <li> <code>max_overall_upload_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-overall-upload-limit</code> option value.</p> </li> <li> <code>max_resume_failure_tries</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-resume-failure-tries</code> option value.</p> </li> <li> <code>max_tries</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-tries</code> option value.</p> </li> <li> <code>max_upload_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-upload-limit</code> option value.</p> </li> <li> <code>metalink_base_uri</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-base-uri</code> option value.</p> </li> <li> <code>metalink_enable_unique_protocol</code>               (<code>bool</code>)           \u2013            <p>Return the <code>metalink-enable-unique-protocol</code> option value.</p> </li> <li> <code>metalink_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-file</code> option value.</p> </li> <li> <code>metalink_language</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-language</code> option value.</p> </li> <li> <code>metalink_location</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>metalink-location</code> option value.</p> </li> <li> <code>metalink_os</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-os</code> option value.</p> </li> <li> <code>metalink_preferred_protocol</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-preferred-protocol</code> option value.</p> </li> <li> <code>metalink_version</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-version</code> option value.</p> </li> <li> <code>min_split_size</code>               (<code>int</code>)           \u2013            <p>Return the <code>min-split-size</code> option value.</p> </li> <li> <code>min_tls_version</code>               (<code>str</code>)           \u2013            <p>Return the <code>min-tls-version</code> option value.</p> </li> <li> <code>multiple_interface</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>multiple-interface</code> option value.</p> </li> <li> <code>netrc_path</code>               (<code>str</code>)           \u2013            <p>Return the <code>netrc-path</code> option value.</p> </li> <li> <code>no_conf</code>               (<code>bool</code>)           \u2013            <p>Return the <code>no-conf</code> option value.</p> </li> <li> <code>no_file_allocation_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>no-file-allocation-limit</code> option value.</p> </li> <li> <code>no_netrc</code>               (<code>bool</code>)           \u2013            <p>Return the <code>no-netrc</code> option value.</p> </li> <li> <code>no_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>no-proxy</code> option value.</p> </li> <li> <code>on_bt_download_complete</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-bt-download-complete</code> option value.</p> </li> <li> <code>on_download_complete</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-complete</code> option value.</p> </li> <li> <code>on_download_error</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-error</code> option value.</p> </li> <li> <code>on_download_pause</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-pause</code> option value.</p> </li> <li> <code>on_download_start</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-start</code> option value.</p> </li> <li> <code>on_download_stop</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-stop</code> option value.</p> </li> <li> <code>optimize_concurrent_downloads</code>               (<code>str</code>)           \u2013            <p>Return the <code>optimize-concurrent-downloads</code> option value.</p> </li> <li> <code>out</code>               (<code>str</code>)           \u2013            <p>Return the <code>out</code> option value.</p> </li> <li> <code>parameterized_uri</code>               (<code>bool</code>)           \u2013            <p>Return the <code>parameterized-uri</code> option value.</p> </li> <li> <code>pause</code>               (<code>bool</code>)           \u2013            <p>Return the <code>pause</code> option value.</p> </li> <li> <code>pause_metadata</code>               (<code>bool</code>)           \u2013            <p>Return the <code>pause-metadata</code> option value.</p> </li> <li> <code>peer_id_prefix</code>               (<code>str</code>)           \u2013            <p>Return the <code>peer-id-prefix</code> option value.</p> </li> <li> <code>piece_length</code>               (<code>str</code>)           \u2013            <p>Return the <code>piece-length</code> option value.</p> </li> <li> <code>private_key</code>               (<code>str</code>)           \u2013            <p>Return the <code>private-key</code> option value.</p> </li> <li> <code>proxy_method</code>               (<code>str</code>)           \u2013            <p>Return the <code>proxy-method</code> option value.</p> </li> <li> <code>quiet</code>               (<code>bool</code>)           \u2013            <p>Return the <code>quiet</code> option value.</p> </li> <li> <code>realtime_chunk_checksum</code>               (<code>bool</code>)           \u2013            <p>Return the <code>realtime-chunk-checksum</code> option value.</p> </li> <li> <code>referer</code>               (<code>str</code>)           \u2013            <p>Return the <code>referer</code> option value.</p> </li> <li> <code>remote_time</code>               (<code>bool</code>)           \u2013            <p>Return the <code>remote-time</code> option value.</p> </li> <li> <code>remove_control_file</code>               (<code>bool</code>)           \u2013            <p>Return the <code>remove-control-file</code> option value.</p> </li> <li> <code>retry_wait</code>               (<code>int</code>)           \u2013            <p>Return the <code>retry-wait</code> option value.</p> </li> <li> <code>reuse_uri</code>               (<code>bool</code>)           \u2013            <p>Return the <code>reuse-uri</code> option value.</p> </li> <li> <code>rlimit_nofile</code>               (<code>int</code>)           \u2013            <p>Return the <code>rlimit-nofile</code> option value.</p> </li> <li> <code>rpc_allow_origin_all</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-allow-origin-all</code> option value.</p> </li> <li> <code>rpc_certificate</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-certificate</code> option value.</p> </li> <li> <code>rpc_listen_all</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-listen-all</code> option value.</p> </li> <li> <code>rpc_listen_port</code>               (<code>int</code>)           \u2013            <p>Return the <code>rpc-listen-port</code> option value.</p> </li> <li> <code>rpc_max_request_size</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-max-request-size</code> option value.</p> </li> <li> <code>rpc_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-passwd</code> option value.</p> </li> <li> <code>rpc_private_key</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-private-key</code> option value.</p> </li> <li> <code>rpc_save_upload_metadata</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-save-upload-metadata</code> option value.</p> </li> <li> <code>rpc_secret</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-secret</code> option value.</p> </li> <li> <code>rpc_secure</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-secure</code> option value.</p> </li> <li> <code>rpc_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-user</code> option value.</p> </li> <li> <code>save_cookies</code>               (<code>str</code>)           \u2013            <p>Return the <code>save-cookies</code> option value.</p> </li> <li> <code>save_not_found</code>               (<code>bool</code>)           \u2013            <p>Return the <code>save-not-found</code> option value.</p> </li> <li> <code>save_session</code>               (<code>str</code>)           \u2013            <p>Return the <code>save-session</code> option value.</p> </li> <li> <code>save_session_interval</code>               (<code>int</code>)           \u2013            <p>Return the <code>save-session-interval</code> option value.</p> </li> <li> <code>seed_ratio</code>               (<code>float</code>)           \u2013            <p>Return the <code>seed-ratio</code> option value.</p> </li> <li> <code>seed_time</code>               (<code>float</code>)           \u2013            <p>Return the <code>seed-time</code> option value.</p> </li> <li> <code>select_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>select-file</code> option value.</p> </li> <li> <code>server_stat_if</code>               (<code>str</code>)           \u2013            <p>Return the <code>server-stat-if</code> option value.</p> </li> <li> <code>server_stat_of</code>               (<code>str</code>)           \u2013            <p>Return the <code>server-stat-of</code> option value.</p> </li> <li> <code>server_stat_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>server-stat-timeout</code> option value.</p> </li> <li> <code>show_console_readout</code>               (<code>bool</code>)           \u2013            <p>Return the <code>show-console-readout</code> option value.</p> </li> <li> <code>show_files</code>               (<code>bool</code>)           \u2013            <p>Return the <code>show-files</code> option value.</p> </li> <li> <code>socket_recv_buffer_size</code>               (<code>int</code>)           \u2013            <p>Return the <code>socket-recv-buffer-size</code> option value.</p> </li> <li> <code>split</code>               (<code>int</code>)           \u2013            <p>Return the <code>split</code> option value.</p> </li> <li> <code>ssh_host_key_md</code>               (<code>str</code>)           \u2013            <p>Return the <code>ssh-host-key-md</code> option value.</p> </li> <li> <code>stderr</code>               (<code>bool</code>)           \u2013            <p>Return the <code>stderr</code> option value.</p> </li> <li> <code>stop</code>               (<code>int</code>)           \u2013            <p>Return the <code>stop</code> option value.</p> </li> <li> <code>stop_with_process</code>               (<code>int</code>)           \u2013            <p>Return the <code>stop-with-process</code> option value.</p> </li> <li> <code>stream_piece_selector</code>               (<code>str</code>)           \u2013            <p>Return the <code>stream-piece-selector</code> option value.</p> </li> <li> <code>summary_interval</code>               (<code>int</code>)           \u2013            <p>Return the <code>summary-interval</code> option value.</p> </li> <li> <code>timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>timeout</code> option value.</p> </li> <li> <code>torrent_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>torrent-file</code> option value.</p> </li> <li> <code>truncate_console_readout</code>               (<code>bool</code>)           \u2013            <p>Return the <code>truncate-console-readout</code> option value.</p> </li> <li> <code>uri_selector</code>               (<code>str</code>)           \u2013            <p>Return the <code>uri-selector</code> option value.</p> </li> <li> <code>use_head</code>               (<code>bool</code>)           \u2013            <p>Return the <code>use-head</code> option value.</p> </li> <li> <code>user_agent</code>               (<code>str</code>)           \u2013            <p>Return the <code>user-agent</code> option value.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def __init__(self, api: API, struct: dict, download: Download | None = None):\n    \"\"\"Initialize the object.\n\n    Parameters:\n        api: The reference to an [`API`][aria2p.api.API] instance.\n        struct: A dictionary Python object returned by the JSON-RPC client.\n        download: An optional [`Download`][aria2p.downloads.Download] object\n            to inform about the owner, or None to tell they are global options.\n    \"\"\"\n    self.api = api\n    self.download = download\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Options.all_proxy","title":"all_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>all_proxy: str\n</code></pre> <p>Return the <code>all-proxy</code> option value.</p> <p>Use a proxy server for all protocols.</p> <p>To override a previously defined proxy, use \"\". You also can override this setting and specify a proxy server for a particular protocol using --http-proxy, --https-proxy and --ftp-proxy options. This affects all downloads. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>. See also ENVIRONMENT section.</p> Note <p>If user and password are embedded in proxy URI and they are also specified by --{http,https,ftp, all}-proxy-{user,passwd}  options, those specified later override prior options. For example, if you specified http-proxy-user=myname, http-proxy-passwd=mypass in aria2.conf and you specified --http-proxy=\"http://proxy\" on the command-line, then you'd get HTTP proxy http://proxy with user myname and password mypass.</p> <p>Another example: if you specified on the command-line --http-proxy=\"http://user:pass@proxy\" --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\", then you'd get HTTP proxy http://proxy with user myname and password mypass.</p> <p>One more example:  if you specified in command-line --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\" --http-proxy=\"http://user:pass@proxy\", then you'd get HTTP proxy http://proxy with user user and password pass.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.all_proxy_passwd","title":"all_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>all_proxy_passwd: str\n</code></pre> <p>Return the <code>all-proxy-passwd</code> option value.</p> <p>Set password for --all-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.all_proxy_user","title":"all_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>all_proxy_user: str\n</code></pre> <p>Return the <code>all-proxy-user</code> option value.</p> <p>Set user for --all-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.allow_overwrite","title":"allow_overwrite  <code>property</code> <code>writable</code>","text":"<pre><code>allow_overwrite: bool\n</code></pre> <p>Return the <code>allow-overwrite</code> option value.</p> <p>Restart download from scratch if the corresponding control file doesn't exist.</p> <p>See also --auto-file-renaming option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.allow_piece_length_change","title":"allow_piece_length_change  <code>property</code> <code>writable</code>","text":"<pre><code>allow_piece_length_change: bool\n</code></pre> <p>Return the <code>allow-piece-length-change</code> option value.</p> <p>If false is given, aria2 aborts download when a piece length is different from one in a control file.</p> <p>If true is given, you can proceed but some download progress will be lost. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.always_resume","title":"always_resume  <code>property</code> <code>writable</code>","text":"<pre><code>always_resume: bool\n</code></pre> <p>Return the <code>always-resume</code> option value.</p> <p>Always resume download.</p> <p>If true is given, aria2 always tries to resume download and if resume is not possible, aborts download. If false is given, when all given URIs do not support resume or aria2 encounters N URIs which does not support resume (N is the value specified using --max-resume-failure-tries option), aria2 downloads file from scratch. See --max-resume-failure-tries option. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.are_global","title":"are_global  <code>property</code>","text":"<pre><code>are_global: bool\n</code></pre> <p>Tell if options are global, or tied to a Download object.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether these options are global.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.async_dns","title":"async_dns  <code>property</code> <code>writable</code>","text":"<pre><code>async_dns: bool\n</code></pre> <p>Return the <code>async-dns</code> option value.</p> <p>Enable asynchronous DNS.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.async_dns_server","title":"async_dns_server  <code>property</code> <code>writable</code>","text":"<pre><code>async_dns_server: list[str]\n</code></pre> <p>Return the <code>async-dns-server</code> option value.</p> <p>Comma separated list of DNS server address used in asynchronous DNS resolver.</p> <p>Usually asynchronous DNS resolver reads DNS server addresses from /etc/resolv.conf. When this option is used, it uses DNS servers specified in this option instead of ones in /etc/resolv.conf. You can specify both IPv4 and IPv6 address. This option is useful when the system does not have /etc/resolv.conf and user does not have the permission to create it.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.auto_file_renaming","title":"auto_file_renaming  <code>property</code> <code>writable</code>","text":"<pre><code>auto_file_renaming: bool\n</code></pre> <p>Return the <code>auto-file-renaming</code> option value.</p> <p>Rename file name if the same file already exists.</p> <p>This option works only in HTTP(S)/FTP download. The new file name has a dot and a number(1..9999) appended after the name, but before the file extension, if any. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.auto_save_interval","title":"auto_save_interval  <code>property</code> <code>writable</code>","text":"<pre><code>auto_save_interval: int\n</code></pre> <p>Save a control file (*.aria2) every SEC seconds.</p> <p>If 0 is given, a control file is not saved during download. aria2 saves a control file when it stops regardless of the value. The possible values are between 0 to 600. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_detach_seed_only","title":"bt_detach_seed_only  <code>property</code> <code>writable</code>","text":"<pre><code>bt_detach_seed_only: bool\n</code></pre> <p>Return the <code>bt-detach-seed-only</code> option value.</p> <p>Exclude seed only downloads when counting concurrent active downloads (See -j option).</p> <p>This means that if -j3 is given and this option is turned on and 3 downloads are active and one of those enters seed mode, then it is excluded from active download count (thus it becomes 2), and the next download waiting in queue gets started. But be aware that seeding item is still recognized as active download in RPC method. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_enable_hook_after_hash_check","title":"bt_enable_hook_after_hash_check  <code>property</code> <code>writable</code>","text":"<pre><code>bt_enable_hook_after_hash_check: bool\n</code></pre> <p>Return the <code>bt-enable-hook-after-hash-check</code> option value.</p> <p>Allow hook command invocation after hash check (see -V option) in BitTorrent download.</p> <p>By default, when hash check succeeds, the command given by --on-bt-download-complete is executed. To disable this action, give false to this option. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_enable_lpd","title":"bt_enable_lpd  <code>property</code> <code>writable</code>","text":"<pre><code>bt_enable_lpd: bool\n</code></pre> <p>Return the <code>bt-enable-lpd</code> option value.</p> <p>Enable Local Peer Discovery.</p> <p>If a private flag is set in a torrent, aria2 doesn't use this feature for that download even if true is given. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_exclude_tracker","title":"bt_exclude_tracker  <code>property</code> <code>writable</code>","text":"<pre><code>bt_exclude_tracker: list[str]\n</code></pre> <p>Return the <code>bt-exclude-tracker</code> option value.</p> <p>Comma separated list of BitTorrent tracker's announce URI to remove.</p> <p>You can use special value * which matches all URIs, thus removes all announce URIs. When specifying * in shell command-line, don't forget to escape or quote it. See also --bt-tracker option.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_external_ip","title":"bt_external_ip  <code>property</code> <code>writable</code>","text":"<pre><code>bt_external_ip: str\n</code></pre> <p>Return the <code>bt-external-ip</code> option value.</p> <p>Specify the external IP address to use in BitTorrent download and DHT.</p> <p>It may be sent to BitTorrent tracker. For DHT, this option should be set to report that local node is downloading a particular torrent. This is critical to use DHT in a private network. Although this function is named external, it can accept any kind of IP addresses.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_force_encryption","title":"bt_force_encryption  <code>property</code> <code>writable</code>","text":"<pre><code>bt_force_encryption: bool\n</code></pre> <p>Return the <code>bt-force-encryption</code> option value.</p> <p>Requires BitTorrent message payload encryption with arc4.</p> <p>This is a shorthand of --bt-require-crypto --bt-min-crypto-level=arc4. This option does not change the option value of those options. If true is given, deny legacy BitTorrent handshake and only use Obfuscation handshake and always encrypt message payload. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_hash_check_seed","title":"bt_hash_check_seed  <code>property</code> <code>writable</code>","text":"<pre><code>bt_hash_check_seed: bool\n</code></pre> <p>Return the <code>bt-hash-check-seed</code> option value.</p> <p>If true is given, after hash check using --check-integrity option and file is complete, continue to seed file.</p> <p>If you want to check file and download it only when it is damaged or incomplete, set this option to false. This option has effect only on BitTorrent download. Default: true</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_lpd_interface","title":"bt_lpd_interface  <code>property</code> <code>writable</code>","text":"<pre><code>bt_lpd_interface: str\n</code></pre> <p>Return the <code>bt-lpd-interface</code> option value.</p> <p>Use given interface for Local Peer Discovery.</p> <p>If this option is not specified, the default interface is chosen. You can specify interface name and IP address. Possible Values: interface, IP address.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_max_open_files","title":"bt_max_open_files  <code>property</code> <code>writable</code>","text":"<pre><code>bt_max_open_files: int\n</code></pre> <p>Return the <code>bt-max-open-files</code> option value.</p> <p>Specify maximum number of files to open in multi-file BitTorrent/Metalink download globally.</p> <p>Default: 100.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_max_peers","title":"bt_max_peers  <code>property</code> <code>writable</code>","text":"<pre><code>bt_max_peers: int\n</code></pre> <p>Return the <code>bt-max-peers</code> option value.</p> <p>Specify the maximum number of peers per torrent. 0 means unlimited.</p> <p>See also --bt-request-peer-speed-limit option. Default: 55.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_metadata_only","title":"bt_metadata_only  <code>property</code> <code>writable</code>","text":"<pre><code>bt_metadata_only: bool\n</code></pre> <p>Return the <code>bt-metadata-only</code> option value.</p> <p>Download meta data only.</p> <p>The file(s) described in meta data will not be downloaded. This option has effect only when BitTorrent Magnet URI is used. See also --bt-save-metadata option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_min_crypto_level","title":"bt_min_crypto_level  <code>property</code> <code>writable</code>","text":"<pre><code>bt_min_crypto_level: str\n</code></pre> <p>Return the <code>bt-min-crypto-level</code> option value.</p> <p>Set minimum level of encryption method (plain/arc4).</p> <p>If several encryption methods are provided by a peer, aria2 chooses the lowest one which satisfies the given level. Default: plain.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_prioritize_piece","title":"bt_prioritize_piece  <code>property</code> <code>writable</code>","text":"<pre><code>bt_prioritize_piece: str\n</code></pre> <p>Return the <code>bt-prioritize-piece</code> option value.</p> <p>Try to download first and last pieces of each file first (head[=<code>&lt;SIZE&gt;</code>],tail[=<code>&lt;SIZE&gt;</code>]).</p> <p>This is useful for previewing files. The argument can contain 2 keywords: head and tail. To include both keywords, they must be separated by comma. These keywords can take one parameter, SIZE. For example, if head=<code>&lt;SIZE&gt;</code> is specified, pieces in the range of first SIZE bytes of each file get higher priority. tail=<code>&lt;SIZE&gt;</code> means the range of last SIZE bytes of each file. SIZE can include K or M (1K = 1024, 1M = 1024K). If SIZE is omitted, SIZE=1M is used.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_remove_unselected_file","title":"bt_remove_unselected_file  <code>property</code> <code>writable</code>","text":"<pre><code>bt_remove_unselected_file: bool\n</code></pre> <p>Return the <code>bt-remove-unselected-file</code> option value.</p> <p>Removes the unselected files when download is completed in BitTorrent.</p> <p>To select files, use --select-file option. If it is not used, all files are assumed to be selected. Please use this option with care because it will actually remove files from your disk. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_request_peer_speed_limit","title":"bt_request_peer_speed_limit  <code>property</code> <code>writable</code>","text":"<pre><code>bt_request_peer_speed_limit: int\n</code></pre> <p>Return the <code>bt-request-peer-speed-limit</code> option value.</p> <p>If the whole download speed of every torrent is lower than SPEED, aria2 temporarily increases the number of peers to try for more download speed.</p> <p>Configuring this option with your preferred download speed can increase your download speed in some cases. You can append K or M (1K = 1024, 1M = 1024K). Default: 50K.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_require_crypto","title":"bt_require_crypto  <code>property</code> <code>writable</code>","text":"<pre><code>bt_require_crypto: bool\n</code></pre> <p>Return the <code>bt-require-crypto</code> option value.</p> <p>If true is given, aria2 doesn't accept and establish connection with legacy BitTorrent handshake (BitTorrent protocol).</p> <p>Thus aria2 always uses Obfuscation handshake. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_save_metadata","title":"bt_save_metadata  <code>property</code> <code>writable</code>","text":"<pre><code>bt_save_metadata: bool\n</code></pre> <p>Return the <code>bt-save-metadata</code> option value.</p> <p>Save meta data as \".torrent\" file.</p> <p>This option has effect only when BitTorrent Magnet URI is used. The file name is hex encoded info hash with suffix \".torrent\". The directory to be saved is the same directory where download file is saved. If the same file already exists, meta data is not saved. See also --bt-metadata-only option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_seed_unverified","title":"bt_seed_unverified  <code>property</code> <code>writable</code>","text":"<pre><code>bt_seed_unverified: bool\n</code></pre> <p>Return the <code>bt-seed-unverified</code> option value.</p> <p>Seed previously downloaded files without verifying piece hashes.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_stop_timeout","title":"bt_stop_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>bt_stop_timeout: int\n</code></pre> <p>Return the <code>bt-stop-timeout</code> option value.</p> <p>Stop BitTorrent download if download speed is 0 in consecutive SEC seconds.</p> <p>If 0 is given, this feature is disabled. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_tracker","title":"bt_tracker  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker: list[str]\n</code></pre> <p>Return the <code>bt-tracker</code> option value.</p> <p>Comma separated list of additional BitTorrent tracker's announce URI.</p> <p>These URIs are not affected by --bt-exclude-tracker option because they are added after URIs in --bt-exclude-tracker option are removed.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_tracker_connect_timeout","title":"bt_tracker_connect_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker_connect_timeout: int\n</code></pre> <p>Return the <code>bt-tracker-connect-timeout</code> option value.</p> <p>Set the connect timeout in seconds to establish connection to tracker.</p> <p>After the connection is established, this option makes no effect and --bt-tracker-timeout option is used instead. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_tracker_interval","title":"bt_tracker_interval  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker_interval: int\n</code></pre> <p>Return the <code>bt-tracker-interval</code> option value.</p> <p>Set the interval in seconds between tracker requests.</p> <p>This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker. If 0 is set, aria2 determines interval based on the response of tracker and the download progress. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.bt_tracker_timeout","title":"bt_tracker_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker_timeout: int\n</code></pre> <p>Return the <code>bt-tracker-timeout</code> option value.</p> <p>Set timeout in seconds.</p> <p>Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ca_certificate","title":"ca_certificate  <code>property</code> <code>writable</code>","text":"<pre><code>ca_certificate: str\n</code></pre> <p>Return the <code>ca-certificate</code> option value.</p> <p>Use the certificate authorities in FILE to verify the peers.</p> <p>The certificate file must be in PEM format and can contain multiple CA certificates. Use --check-certificate option to enable verification.</p> Note <p>If you build with OpenSSL or the recent version of GnuTLS which has gnutls_certificateset_x509_system_trust() function and the library is properly configured to locate the system-wide CA certificates store, aria2 will automatically load those certificates at the startup.</p> Note <p>WinTLS and AppleTLS do not support this option. Instead you will have to import the certificate into the OS trust store.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.certificate","title":"certificate  <code>property</code> <code>writable</code>","text":"<pre><code>certificate: str\n</code></pre> <p>Return the <code>certificate</code> option value.</p> <p>Use the client certificate in FILE.</p> <p>The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format.</p> <p>PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened!</p> <p>When using PEM, you have to specify the private key via --private-key as well.</p> Note <p>WinTLS does not support PEM files at the moment. Users have to use PKCS12 files.</p> Note <p>AppleTLS users should use the KeyChain Access utility to import the client certificate and get the SHA-1 fingerprint from the Information dialog corresponding to that certificate. To start aria2c use --certificate=<code>&lt;SHA-1&gt;</code>. Alternatively PKCS12 files are also supported. PEM files, however, are not supported.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.check_certificate","title":"check_certificate  <code>property</code> <code>writable</code>","text":"<pre><code>check_certificate: bool\n</code></pre> <p>Return the <code>check-certificate</code> option value.</p> <p>Verify the peer using certificates specified in --ca-certificate option.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.check_integrity","title":"check_integrity  <code>property</code> <code>writable</code>","text":"<pre><code>check_integrity: bool\n</code></pre> <p>Return the <code>check-integrity</code> option value.</p> <p>Check file integrity by validating piece hashes or a hash of entire file.</p> <p>This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with --checksum option. If piece hashes are provided, this option can detect damaged portions of a file and re-download them. If a hash of entire file is provided, hash check is only done when file has been already downloaded. This is determined by file length. If hash check fails, file is re-downloaded from scratch. If both piece hashes and a hash of entire file are provided, only piece hashes are used. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.checksum","title":"checksum  <code>property</code> <code>writable</code>","text":"<pre><code>checksum: str\n</code></pre> <p>Return the <code>checksum</code> option value.</p> <p>Set checksum (<code>&lt;TYPE&gt;=&lt;DIGEST&gt;</code>).</p> <p>TYPE is hash type. The supported hash type is listed in Hash Algorithms in aria2c -v. DIGEST is hex digest. For example, setting sha-1 digest looks like this: sha-1=0192ba11326fe2298c8cb4de616f4d4140213838 This option applies only to HTTP(S)/FTP downloads.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.conditional_get","title":"conditional_get  <code>property</code> <code>writable</code>","text":"<pre><code>conditional_get: bool\n</code></pre> <p>Return the <code>conditional-get</code> option value.</p> <p>Download file only when the local file is older than remote file.</p> <p>This function only works with HTTP(S) downloads only. It does not work if file size is specified in Metalink. It also ignores Content-Disposition header. If a control file exists, this option will be ignored. This function uses If-Modified-Since header to get only newer file conditionally. When getting modification time of local file, it uses user supplied file name (see --out option) or file name part in URI if --out is not specified. To overwrite existing file, --allow-overwrite is required. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.conf_path","title":"conf_path  <code>property</code> <code>writable</code>","text":"<pre><code>conf_path: str\n</code></pre> <p>Return the <code>conf-path</code> option value.</p> <p>Change the configuration file path to PATH.</p> <p>Default: $HOME/.aria2/aria2.conf if present, otherwise $XDG_CONFIG_HOME/aria2/aria2.conf.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.connect_timeout","title":"connect_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>connect_timeout: int\n</code></pre> <p>Return the <code>connect-timeout</code> option value.</p> <p>Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server.</p> <p>After the connection is established, this option makes no effect and --timeout option is used instead. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.console_log_level","title":"console_log_level  <code>property</code> <code>writable</code>","text":"<pre><code>console_log_level: str\n</code></pre> <p>Return the <code>console-log-level</code> option value.</p> <p>Set log level to output to console.</p> <p>LEVEL is either debug, info, notice, warn or error. Default: notice.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.continue_downloads","title":"continue_downloads  <code>property</code> <code>writable</code>","text":"<pre><code>continue_downloads: bool\n</code></pre> <p>Return the <code>continue-downloads</code> option value.</p> <p>Continue downloading a partially downloaded file.</p> <p>Use this option to resume a download started by a web browser or another program which downloads files sequentially from the beginning. Currently this option is only applicable to HTTP(S)/FTP downloads.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.daemon","title":"daemon  <code>property</code> <code>writable</code>","text":"<pre><code>daemon: bool\n</code></pre> <p>Return the <code>daemon</code> option value.</p> <p>Run as daemon.</p> <p>The current working directory will be changed to / and standard input, standard output and standard error will be redirected to /dev/null. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.deferred_input","title":"deferred_input  <code>property</code> <code>writable</code>","text":"<pre><code>deferred_input: bool\n</code></pre> <p>Return the <code>deferred-input</code> option value.</p> <p>If true is given, aria2 does not read all URIs and options from file specified by --input-file option at startup, but it reads one by one when it needs later.</p> <p>This may reduce memory usage if input file contains a lot of URIs to download. If false is given, aria2 reads all URIs and options at startup. Default: false.</p> Warning <p>--deferred-input option will be disabled when --save-session is used together.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dht_entry_point","title":"dht_entry_point  <code>property</code> <code>writable</code>","text":"<pre><code>dht_entry_point: str\n</code></pre> <p>Return the <code>dht-entry-point</code> option value.</p> <p>Set host and port as an entry point to IPv4 DHT network (<code>&lt;HOST&gt;</code>:<code>&lt;PORT&gt;</code>).</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dht_entry_point6","title":"dht_entry_point6  <code>property</code> <code>writable</code>","text":"<pre><code>dht_entry_point6: str\n</code></pre> <p>Return the <code>dht-entry-point6</code> option value.</p> <p>Set host and port as an entry point to IPv6 DHT network (<code>&lt;HOST&gt;</code>:<code>&lt;PORT&gt;</code>).</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dht_file_path","title":"dht_file_path  <code>property</code> <code>writable</code>","text":"<pre><code>dht_file_path: str\n</code></pre> <p>Return the <code>dht-file-path</code> option value.</p> <p>Change the IPv4 DHT routing table file to PATH.</p> <p>Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dht_file_path6","title":"dht_file_path6  <code>property</code> <code>writable</code>","text":"<pre><code>dht_file_path6: str\n</code></pre> <p>Return the <code>dht-file-path6</code> option value.</p> <p>Change the IPv6 DHT routing table file to PATH.</p> <p>Default: $HOME/.aria2/dht6.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht6.dat.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dht_listen_addr6","title":"dht_listen_addr6  <code>property</code> <code>writable</code>","text":"<pre><code>dht_listen_addr6: str\n</code></pre> <p>Return the <code>dht-listen-addr6</code> option value.</p> <p>Specify address to bind socket for IPv6 DHT.</p> <p>It should be a global unicast IPv6 address of the host.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dht_listen_port","title":"dht_listen_port  <code>property</code> <code>writable</code>","text":"<pre><code>dht_listen_port: str\n</code></pre> <p>Return the <code>dht-listen-port</code> option value.</p> <p>Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker.</p> <p>Multiple ports can be specified by using ,, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together. Default: 6881-6999.</p> Note <p>Make sure that the specified ports are open for incoming UDP traffic.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dht_message_timeout","title":"dht_message_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>dht_message_timeout: int\n</code></pre> <p>Return the <code>dht-message-timeout</code> option value.</p> <p>Set timeout in seconds.</p> <p>Default: 10.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dir","title":"dir  <code>property</code> <code>writable</code>","text":"<pre><code>dir: str\n</code></pre> <p>Return the <code>dir</code> option value.</p> <p>The directory to store the downloaded file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.disable_ipv6","title":"disable_ipv6  <code>property</code> <code>writable</code>","text":"<pre><code>disable_ipv6: bool\n</code></pre> <p>Return the <code>disable-ipv6</code> option value.</p> <p>Disable IPv6.</p> <p>This is useful if you have to use broken DNS and want to avoid terribly slow AAAA record lookup. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.disk_cache","title":"disk_cache  <code>property</code> <code>writable</code>","text":"<pre><code>disk_cache: int\n</code></pre> <p>Return the <code>disk-cache</code> option value.</p> <p>Enable disk cache.</p> <p>If SIZE is 0, the disk cache is disabled. This feature caches the downloaded data in memory, which grows to at most SIZE bytes. The cache storage is created for aria2 instance and shared by all downloads. The one advantage of the disk cache is reduce the disk I/O because the data are written in larger unit and it is reordered by the offset of the file. If hash checking is involved and the data are cached in memory, we don't need to read them from the disk. SIZE can include K or M (1K = 1024, 1M = 1024K). Default: 16M.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.download_result","title":"download_result  <code>property</code> <code>writable</code>","text":"<pre><code>download_result: str\n</code></pre> <p>Return the <code>download-result</code> option value.</p> <p>This option changes the way Download Results is formatted.</p> <p>If OPT is default, print GID, status, average download speed and path/URI. If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted. If OPT is full, print GID, status, average download speed, percentage of progress and path/URI. The percentage of progress and path/URI are printed for each requested file in each row. If OPT is hide, Download Results is hidden. Default: default.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dry_run","title":"dry_run  <code>property</code> <code>writable</code>","text":"<pre><code>dry_run: bool\n</code></pre> <p>Return the <code>dry-run</code> option value.</p> <p>If true is given, aria2 just checks whether the remote file is available and doesn't download data.</p> <p>This option has effect on HTTP/FTP download. BitTorrent downloads are canceled if true is specified. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.dscp","title":"dscp  <code>property</code> <code>writable</code>","text":"<pre><code>dscp: str\n</code></pre> <p>Return the <code>dscp</code> option value.</p> <p>Set DSCP value in outgoing IP packets of BitTorrent traffic for QoS.</p> <p>This parameter sets only DSCP bits in TOS field of IP packets, not the whole field. If you take values from /usr/include/netinet/ip.h divide them by 4 (otherwise values would be incorrect, e.g. your CS1 class would turn into CS4). If you take commonly used values from RFC, network vendors' documentation, Wikipedia or any other source, use them as they are.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_color","title":"enable_color  <code>property</code> <code>writable</code>","text":"<pre><code>enable_color: bool\n</code></pre> <p>Return the <code>enable-color</code> option value.</p> <p>Enable color output for a terminal.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_dht","title":"enable_dht  <code>property</code> <code>writable</code>","text":"<pre><code>enable_dht: bool\n</code></pre> <p>Return the <code>enable-dht</code> option value.</p> <p>Enable IPv4 DHT functionality.</p> <p>It also enables UDP tracker support. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_dht6","title":"enable_dht6  <code>property</code> <code>writable</code>","text":"<pre><code>enable_dht6: bool\n</code></pre> <p>Return the <code>enable-dht6</code> option value.</p> <p>Enable IPv6 DHT functionality.</p> <p>If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Use --dht-listen-port option to specify port number to listen on. See also --dht-listen-addr6 option.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_http_keep_alive","title":"enable_http_keep_alive  <code>property</code> <code>writable</code>","text":"<pre><code>enable_http_keep_alive: bool\n</code></pre> <p>Return the <code>enable-http-keep-alive</code> option value.</p> <p>Enable HTTP/1.1 persistent connection.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_http_pipelining","title":"enable_http_pipelining  <code>property</code> <code>writable</code>","text":"<pre><code>enable_http_pipelining: bool\n</code></pre> <p>Return the <code>enable-http-pipelining</code> option value.</p> <p>Enable HTTP/1.1 pipelining.</p> <p>Default: False.</p> Note <p>In performance perspective, there is usually no advantage to enable this option.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_mmap","title":"enable_mmap  <code>property</code> <code>writable</code>","text":"<pre><code>enable_mmap: bool\n</code></pre> <p>Return the <code>enable-mmap</code> option value.</p> <p>Map files into memory.</p> <p>This option may not work if the file space is not pre-allocated. See --file-allocation. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_peer_exchange","title":"enable_peer_exchange  <code>property</code> <code>writable</code>","text":"<pre><code>enable_peer_exchange: bool\n</code></pre> <p>Return the <code>enable-peer-exchange</code> option value.</p> <p>Enable Peer Exchange extension.</p> <p>If a private flag is set in a torrent, this feature is disabled for that download even if true is given. Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.enable_rpc","title":"enable_rpc  <code>property</code> <code>writable</code>","text":"<pre><code>enable_rpc: bool\n</code></pre> <p>Return the <code>enable-rpc</code> option value.</p> <p>Enable JSON-RPC/XML-RPC server.</p> <p>It is strongly recommended to set secret authorization token using --rpc-secret option. See also --rpc-listen-port option. Default: false</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.event_poll","title":"event_poll  <code>property</code> <code>writable</code>","text":"<pre><code>event_poll: str\n</code></pre> <p>Specify the method for polling events.</p> <p>The possible values are epoll, kqueue, port, poll and select. For each epoll, kqueue, port and poll, it is available if system supports it. epoll is available on recent Linux. kqueue is available on various *BSD systems including Mac OS X. port is available on Open Solaris. The default value may vary depending on the system you use.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.file_allocation","title":"file_allocation  <code>property</code> <code>writable</code>","text":"<pre><code>file_allocation: str\n</code></pre> <p>Return the <code>file-allocation</code> option value.</p> <p>Specify file allocation method.</p> <p>Possible Values: <code>none</code>, <code>prealloc</code>, <code>trunc</code>, <code>falloc</code>.</p> <ul> <li><code>none</code>: Doesn't pre-allocate file space.</li> <li> <p><code>prealloc</code>: Pre-allocates file space before download begins. This may take some time depending on the size of the file.</p> </li> <li> <p><code>falloc</code>: If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW   build only), falloc is your best choice. It allocates large(few GiB) files almost instantly. Don't use falloc   with legacy file systems such as ext3 and FAT32 because it takes almost same time as prealloc and it blocks   aria2 entirely until allocation finishes. falloc may not be available if your system doesn't have   posix_fallocate(3) function.</p> </li> <li><code>trunc</code>: Uses ftruncate(2) system call or platform-specific counterpart to truncate a file to a specified length.</li> </ul> <p>Default: <code>prealloc</code>.</p> Warning <p>Using trunc seemingly allocates disk space very quickly, but what it actually does is that it sets file length metadata in file system, and does not allocate disk space at all. This means that it does not help avoiding fragmentation.</p> Note <p>In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.follow_metalink","title":"follow_metalink  <code>property</code> <code>writable</code>","text":"<pre><code>follow_metalink: str\n</code></pre> <p>Return the <code>follow-metalink</code> option value.</p> <p>If true or mem is specified, when a file whose suffix is .meta4 or .metalink or content type of application/metalink4+xml or application/metalink+xml is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it.</p> <p>If mem is specified, a metalink file is not written to the disk, but is just kept in memory. If false is specified, the .metalink file is downloaded to the disk, but is not parsed as a metalink file and its contents are not downloaded. Default: true.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.follow_torrent","title":"follow_torrent  <code>property</code> <code>writable</code>","text":"<pre><code>follow_torrent: str\n</code></pre> <p>Return the <code>follow-torrent</code> option value.</p> <p>If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it.</p> <p>If mem is specified, a torrent file is not written to the disk, but is just kept in memory. If false is specified, the .torrent file is downloaded to the disk, but is not parsed as a torrent and its contents are not downloaded. Default: true.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.force_save","title":"force_save  <code>property</code> <code>writable</code>","text":"<pre><code>force_save: bool\n</code></pre> <p>Return the <code>force-save</code> option value.</p> <p>Save download with --save-session option even if the download is completed or removed.</p> <p>This option also saves control file in that situations. This may be useful to save BitTorrent seeding which is recognized as completed state. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.force_sequential","title":"force_sequential  <code>property</code> <code>writable</code>","text":"<pre><code>force_sequential: bool\n</code></pre> <p>Return the <code>force-sequential</code> option value.</p> <p>Fetch URIs in the command-line sequentially and download each URI in a separate session, like the usual command-line download utilities.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_passwd","title":"ftp_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_passwd: str\n</code></pre> <p>Return the <code>ftp-passwd</code> option value.</p> <p>Set FTP password. This affects all URIs.</p> <p>If user name is embedded but password is missing in URI, aria2 tries to resolve password using .netrc. If password is found in .netrc, then use it as password. If not, use the password specified in this option. Default: ARIA2USER@.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_pasv","title":"ftp_pasv  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_pasv: bool\n</code></pre> <p>Return the <code>ftp-pasv</code> option value.</p> <p>Use the passive mode in FTP.</p> <p>If false is given, the active mode will be used. Default: true.</p> Note <p>This option is ignored for SFTP transfer.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_proxy","title":"ftp_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_proxy: str\n</code></pre> <p>Return the <code>ftp-proxy</code> option value.</p> <p>Use a proxy server for FTP.</p> <p>To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all ftp downloads. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_proxy_passwd","title":"ftp_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_proxy_passwd: str\n</code></pre> <p>Return the <code>ftp-proxy-passwd</code> option value.</p> <p>Set password for --ftp-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_proxy_user","title":"ftp_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_proxy_user: str\n</code></pre> <p>Return the <code>ftp-proxy-user</code> option value.</p> <p>Set user for --ftp-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_reuse_connection","title":"ftp_reuse_connection  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_reuse_connection: bool\n</code></pre> <p>Return the <code>ftp-reuse-connection</code> option value.</p> <p>Reuse connection in FTP.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_type","title":"ftp_type  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_type: str\n</code></pre> <p>Return the <code>ftp-type</code> option value.</p> <p>Set FTP transfer type.</p> <p>TYPE is either binary or ascii. Default: binary.</p> Note <p>This option is ignored for SFTP transfer.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ftp_user","title":"ftp_user  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_user: str\n</code></pre> <p>Return the <code>ftp-user</code> option value.</p> <p>Set FTP user. This affects all URIs.</p> <p>Default: anonymous.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.gid","title":"gid  <code>property</code> <code>writable</code>","text":"<pre><code>gid: str\n</code></pre> <p>Return the <code>gid</code> option value.</p> <p>Set GID manually.</p> <p>aria2 identifies each download by the ID called GID. The GID must be hex string of 16 characters, thus [0-9a-zA-Z] are allowed and leading zeros must not be stripped. The GID all 0 is reserved and must not be used. The GID must be unique, otherwise error is reported and the download is not added. This option is useful when restoring the sessions saved using --save-session option. If this option is not used, new GID is generated by aria2.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.hash_check_only","title":"hash_check_only  <code>property</code> <code>writable</code>","text":"<pre><code>hash_check_only: bool\n</code></pre> <p>Return the <code>hash-check-only</code> option value.</p> <p>If true is given, after hash check using --check-integrity option, abort download whether or not download is complete.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.header","title":"header  <code>property</code> <code>writable</code>","text":"<pre><code>header: str\n</code></pre> <p>Return the <code>header</code> option value.</p> <p>Append HEADER to HTTP request header.</p> <p>You can use this option repeatedly to specify more than one header:</p> <pre><code>$ aria2c --header=\"X-A: b78\" --header=\"X-B: 9J1\" \"http://host/file\"\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_accept_gzip","title":"http_accept_gzip  <code>property</code> <code>writable</code>","text":"<pre><code>http_accept_gzip: bool\n</code></pre> <p>Return the <code>http-accept-gzip</code> option value.</p> <p>Send Accept: deflate, gzip request header and inflate response if remote server responds with Content-Encoding:  gzip or Content-Encoding:  deflate.</p> <p>Default: False.</p> Note <p>Some server responds with Content-Encoding: gzip for files which itself is gzipped file. aria2 inflates them anyway because of the response header.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_auth_challenge","title":"http_auth_challenge  <code>property</code> <code>writable</code>","text":"<pre><code>http_auth_challenge: bool\n</code></pre> <p>Return the <code>http-auth-challenge</code> option value.</p> <p>Send HTTP authorization header only when it is requested by the server.</p> <p>If false is set, then authorization header is always sent to the server. There is an exception: if user name and password are embedded in URI, authorization header is always sent to the server regardless of this option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_no_cache","title":"http_no_cache  <code>property</code> <code>writable</code>","text":"<pre><code>http_no_cache: bool\n</code></pre> <p>Return the <code>http-no-cache</code> option value.</p> <p>Send Cache-Control:  no-cache and Pragma:  no-cache header to avoid cached content.</p> <p>If false is given, these headers are not sent and you can add Cache-Control header with a directive you like using --header option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_passwd","title":"http_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>http_passwd: str\n</code></pre> <p>Return the <code>http-passwd</code> option value.</p> <p>Set HTTP password. This affects all URIs.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_proxy","title":"http_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>http_proxy: str\n</code></pre> <p>Return the <code>http-proxy</code> option value.</p> <p>Use a proxy server for HTTP.</p> <p>To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all http downloads. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_proxy_passwd","title":"http_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>http_proxy_passwd: str\n</code></pre> <p>Return the <code>http-proxy-passwd</code> option value.</p> <p>Set password for --http-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_proxy_user","title":"http_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>http_proxy_user: str\n</code></pre> <p>Return the <code>http-proxy-user</code> option value.</p> <p>Set user for --http-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.http_user","title":"http_user  <code>property</code> <code>writable</code>","text":"<pre><code>http_user: str\n</code></pre> <p>Return the <code>http-user</code> option value.</p> <p>Set HTTP user. This affects all URIs.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.https_proxy","title":"https_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>https_proxy: str\n</code></pre> <p>Return the <code>https-proxy</code> option value.</p> <p>Use a proxy server for HTTPS.</p> <p>To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all https download. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.https_proxy_passwd","title":"https_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>https_proxy_passwd: str\n</code></pre> <p>Return the <code>https-proxy-passwd</code> option value.</p> <p>Set password for --https-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.https_proxy_user","title":"https_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>https_proxy_user: str\n</code></pre> <p>Return the <code>https-proxy-user</code> option value.</p> <p>Set user for --https-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.human_readable","title":"human_readable  <code>property</code> <code>writable</code>","text":"<pre><code>human_readable: bool\n</code></pre> <p>Return the <code>human-readable</code> option value.</p> <p>Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi) in the console readout.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.index_out","title":"index_out  <code>property</code> <code>writable</code>","text":"<pre><code>index_out: str\n</code></pre> <p>Return the <code>index-out</code> option value.</p> <p>Set file path for file with index=INDEX (<code>&lt;INDEX&gt;=&lt;PATH&gt;</code>).</p> <p>You can find the file index using the --show-files option. PATH is a relative path to the path specified in --dir option. You can use this option multiple times. Using this option, you can specify the output file names of BitTorrent downloads.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.input_file","title":"input_file  <code>property</code> <code>writable</code>","text":"<pre><code>input_file: str\n</code></pre> <p>Return the <code>input-file</code> option value.</p> <p>Downloads the URIs listed in FILE.</p> <p>You can specify multiple sources for a single entity by putting multiple URIs on a single line separated by the TAB character. Additionally, options can be specified after each URI line. Option lines must start with one or more white space characters (SPACE or TAB) and must only contain one option per line. Input files can use gzip compression. When FILE is specified as -, aria2 will read the input from stdin. See the Input File subsection for details. See also the --deferred-input option. See also the --save-session option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.interface","title":"interface  <code>property</code> <code>writable</code>","text":"<pre><code>interface: str\n</code></pre> <p>Return the <code>interface</code> option value.</p> <p>Bind sockets to given interface.</p> <p>You can specify interface name, IP address and host name. Possible Values: interface, IP address, host name.</p> Note <p>If an interface has multiple addresses, it is highly recommended to specify IP address explicitly. See also --disable-ipv6. If your system doesn't have getifaddrs(3), this option doesn't accept interface name.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.keep_unfinished_download_result","title":"keep_unfinished_download_result  <code>property</code> <code>writable</code>","text":"<pre><code>keep_unfinished_download_result: bool\n</code></pre> <p>Return the <code>keep-unfinished-download-result</code> option value.</p> <p>Keep unfinished download results even if doing so exceeds --max-download-result.</p> <p>This is useful if all unfinished downloads must be saved in session file (see --save-session option). Please keep in mind that there is no upper bound to the number of unfinished download result to keep. If that is undesirable, turn this option off. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.listen_port","title":"listen_port  <code>property</code> <code>writable</code>","text":"<pre><code>listen_port: str\n</code></pre> <p>Return the <code>listen-port</code> option value.</p> <p>Set TCP port number for BitTorrent downloads.</p> <p>Multiple ports can be specified by using, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together: 6881-6889, 6999. Default: 6881-6999</p> Note <p>Make sure that the specified ports are open for incoming TCP traffic.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.load_cookies","title":"load_cookies  <code>property</code> <code>writable</code>","text":"<pre><code>load_cookies: str\n</code></pre> <p>Return the <code>load-cookies</code> option value.</p> <p>Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1.x/2.x)/Netscape format.</p> Note <p>If aria2 is built without libsqlite3, then it doesn't support Firefox3 and Chromium/Google Chrome cookie format.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.log","title":"log  <code>property</code> <code>writable</code>","text":"<pre><code>log: str\n</code></pre> <p>Return the <code>log</code> option value.</p> <p>The file name of the log file.</p> <p>If - is specified, log is written to stdout. If empty string(\"\") is specified, or this option is omitted, no log is written to disk at all.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.log_level","title":"log_level  <code>property</code> <code>writable</code>","text":"<pre><code>log_level: str\n</code></pre> <p>Return the <code>log-level</code> option value.</p> <p>Set log level to output.</p> <p>LEVEL is either debug, info, notice, warn or error. Default: debug.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.lowest_speed_limit","title":"lowest_speed_limit  <code>property</code> <code>writable</code>","text":"<pre><code>lowest_speed_limit: int\n</code></pre> <p>Return the <code>lowest-speed-limit</code> option value.</p> <p>Close connection if download speed is lower than or equal to this value(bytes per sec).</p> <p>0 means aria2 does not have a lowest speed limit. You can append K or M (1K = 1024, 1M = 1024K). This option does not affect BitTorrent downloads. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_concurrent_downloads","title":"max_concurrent_downloads  <code>property</code> <code>writable</code>","text":"<pre><code>max_concurrent_downloads: int\n</code></pre> <p>Return the <code>max-concurrent-downloads</code> option value.</p> <p>Set the maximum number of parallel downloads for every queue item.</p> <p>See also the --split option. Default: 5.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_connection_per_server","title":"max_connection_per_server  <code>property</code> <code>writable</code>","text":"<pre><code>max_connection_per_server: int\n</code></pre> <p>Return the <code>max-connection-per-server</code> option value.</p> <p>The maximum number of connections to one server for each download.</p> <p>Default: 1.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_download_limit","title":"max_download_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_download_limit: int\n</code></pre> <p>Return the <code>max-download-limit</code> option value.</p> <p>Set max download speed per each download in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall download speed, use --max-overall-download-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_download_result","title":"max_download_result  <code>property</code> <code>writable</code>","text":"<pre><code>max_download_result: int\n</code></pre> <p>Return the <code>max-download-result</code> option value.</p> <p>Set maximum number of download result kept in memory.</p> <p>The download results are completed/error/removed downloads. The download results are stored in FIFO queue and it can store at most NUM download results. When queue is full and new download result is created, oldest download result is removed from the front of the queue and new one is pushed to the back. Setting big number in this option may result high memory consumption after thousands of downloads. Specifying 0 means no download result is kept. Note that unfinished downloads are kept in memory regardless of this option value. See --keep-unfinished-download-result option. Default: 1000.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_file_not_found","title":"max_file_not_found  <code>property</code> <code>writable</code>","text":"<pre><code>max_file_not_found: int\n</code></pre> <p>Return the <code>max-file-not-found</code> option value.</p> <p>If aria2 receives \"file not found\" status from the remote HTTP/FTP servers NUM times without getting a single byte, then force the download to fail.</p> <p>Specify 0 to disable this option. This options is effective only when using HTTP/FTP servers. The number of retry attempt is counted toward --max-tries, so it should be configured too.</p> <p>Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_mmap_limit","title":"max_mmap_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_mmap_limit: int\n</code></pre> <p>Return the <code>max-mmap-limit</code> option value.</p> <p>Set the maximum file size to enable mmap (see --enable-mmap option).</p> <p>The file size is determined by the sum of all files contained in one download. For example, if a download contains 5 files, then file size is the total size of those files. If file size is strictly greater than the size specified in this option, mmap will be disabled. Default: 9223372036854775807.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_overall_download_limit","title":"max_overall_download_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_overall_download_limit: int\n</code></pre> <p>Return the <code>max-overall-download-limit</code> option value.</p> <p>Set max overall download speed in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the download speed per download, use --max-download-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_overall_upload_limit","title":"max_overall_upload_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_overall_upload_limit: int\n</code></pre> <p>Return the <code>max-overall-upload-limit</code> option value.</p> <p>Set max overall upload speed in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the upload speed per torrent, use --max-upload-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_resume_failure_tries","title":"max_resume_failure_tries  <code>property</code> <code>writable</code>","text":"<pre><code>max_resume_failure_tries: int\n</code></pre> <p>Return the <code>max-resume-failure-tries</code> option value.</p> <p>When used with --always-resume=false, aria2 downloads file from scratch when aria2 detects N number of URIs that does not support resume.</p> <p>If N is 0, aria2 downloads file from scratch when all given URIs do not support resume. See --always-resume option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_tries","title":"max_tries  <code>property</code> <code>writable</code>","text":"<pre><code>max_tries: int\n</code></pre> <p>Return the <code>max-tries</code> option value.</p> <p>Set number of tries.</p> <p>0 means unlimited. See also --retry-wait. Default: 5.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.max_upload_limit","title":"max_upload_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_upload_limit: int\n</code></pre> <p>Return the <code>max-upload-limit</code> option value.</p> <p>Set max upload speed per each torrent in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall upload speed, use --max-overall-upload-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_base_uri","title":"metalink_base_uri  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_base_uri: str\n</code></pre> <p>Return the <code>metalink-base-uri</code> option value.</p> <p>Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk.</p> <p>If URI points to a directory, URI must end with /.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_enable_unique_protocol","title":"metalink_enable_unique_protocol  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_enable_unique_protocol: bool\n</code></pre> <p>Return the <code>metalink-enable-unique-protocol</code> option value.</p> <p>If true is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them.</p> <p>Use --metalink-preferred-protocol option to specify the preference of protocol. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_file","title":"metalink_file  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_file: str\n</code></pre> <p>Return the <code>metalink-file</code> option value.</p> <p>The file path to \".meta4\" and \".metalink\" file.</p> <p>Reads input from stdin when - is specified. You are not required to use this option because you can specify \".metalink\" files without --metalink-file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_language","title":"metalink_language  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_language: str\n</code></pre> <p>Return the <code>metalink-language</code> option value.</p> <p>The language of the file to download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_location","title":"metalink_location  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_location: list[str]\n</code></pre> <p>Return the <code>metalink-location</code> option value.</p> <p>The location of the preferred server.</p> <p>A comma-delimited list of locations is acceptable, for example, jp,us.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_os","title":"metalink_os  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_os: str\n</code></pre> <p>Return the <code>metalink-os</code> option value.</p> <p>The operating system of the file to download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_preferred_protocol","title":"metalink_preferred_protocol  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_preferred_protocol: str\n</code></pre> <p>Return the <code>metalink-preferred-protocol</code> option value.</p> <p>Specify preferred protocol.</p> <p>The possible values are http, https, ftp and none. Specify none to disable this feature. Default: none.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.metalink_version","title":"metalink_version  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_version: str\n</code></pre> <p>Return the <code>metalink-version</code> option value.</p> <p>The version of the file to download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.min_split_size","title":"min_split_size  <code>property</code> <code>writable</code>","text":"<pre><code>min_split_size: int\n</code></pre> <p>Return the <code>min-split-size</code> option value.</p> <p>aria2 does not split less than 2*SIZE byte range.</p> <p>For example, let's consider downloading 20MiB file. If SIZE is 10M, aria2 can split file into 2 range [ 0-10MiB)  and [10MiB-20MiB)  and download it using 2 sources(if --split &gt;<code>= 2, of course). If SIZE is 15M, since 2*15M &gt;</code> 20MiB, aria2 does not split file and download it using 1 source. You can append K or M (1K = 1024, 1M = 1024K). Possible Values: 1M -1024M Default: 20M</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.min_tls_version","title":"min_tls_version  <code>property</code> <code>writable</code>","text":"<pre><code>min_tls_version: str\n</code></pre> <p>Return the <code>min-tls-version</code> option value.</p> <p>Specify minimum SSL/TLS version to enable.</p> <p>Possible Values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. Default: TLSv1.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.multiple_interface","title":"multiple_interface  <code>property</code> <code>writable</code>","text":"<pre><code>multiple_interface: list[str]\n</code></pre> <p>Return the <code>multiple-interface</code> option value.</p> <p>Comma separated list of interfaces to bind sockets to.</p> <p>Requests will be split among the interfaces to achieve link aggregation. You can specify interface name, IP address and hostname. If --interface is used, this option will be ignored. Possible Values: interface, IP address, hostname.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.netrc_path","title":"netrc_path  <code>property</code> <code>writable</code>","text":"<pre><code>netrc_path: str\n</code></pre> <p>Return the <code>netrc-path</code> option value.</p> <p>Specify the path to the netrc file.</p> <p>Default: $(HOME)/.netrc.</p> Note <p>Permission of the .netrc file must be 600. Otherwise, the file will be ignored.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.no_conf","title":"no_conf  <code>property</code> <code>writable</code>","text":"<pre><code>no_conf: bool\n</code></pre> <p>Return the <code>no-conf</code> option value.</p> <p>Disable loading aria2.conf file.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.no_file_allocation_limit","title":"no_file_allocation_limit  <code>property</code> <code>writable</code>","text":"<pre><code>no_file_allocation_limit: int\n</code></pre> <p>Return the <code>no-file-allocation-limit</code> option value.</p> <p>No file allocation is made for files whose size is smaller than SIZE.</p> <p>You can append K or M (1K = 1024, 1M = 1024K). Default: 5M.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.no_netrc","title":"no_netrc  <code>property</code> <code>writable</code>","text":"<pre><code>no_netrc: bool\n</code></pre> <p>Return the <code>no-netrc</code> option value.</p> <p>Disable netrc support.</p> <p>netrc support is enabled by default.</p> Note <p>netrc file is only read at the startup if --no-netrc is false. So if --no-netrc is true at the startup, no netrc is available throughout the session. You cannot get netrc enabled even if you send --no-netrc=false using aria2.changeGlobalOption().</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.no_proxy","title":"no_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>no_proxy: str\n</code></pre> <p>Return the <code>no-proxy</code> option value.</p> <p>Specify a comma separated list of host names, domains and network addresses with or without a subnet mask where no proxy should be used.</p> Note <p>For network addresses with a subnet mask, both IPv4 and IPv6 addresses work. The current implementation does not resolve the host name in an URI to compare network addresses specified in --no-proxy. So it is only effective if URI has numeric IP addresses.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.on_bt_download_complete","title":"on_bt_download_complete  <code>property</code> <code>writable</code>","text":"<pre><code>on_bt_download_complete: str\n</code></pre> <p>Return the <code>on-bt-download-complete</code> option value.</p> <p>For BitTorrent, a command specified in --on-download-complete is called after download completed and seeding is over.</p> <p>On the other hand, this option set the command to be executed after download completed but before seeding. See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.on_download_complete","title":"on_download_complete  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_complete: str\n</code></pre> <p>Return the <code>on-download-complete</code> option value.</p> <p>Set the command to be executed after download completed.</p> <p>See See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.on_download_error","title":"on_download_error  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_error: str\n</code></pre> <p>Return the <code>on-download-error</code> option value.</p> <p>Set the command to be executed after download aborted due to error.</p> <p>See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.on_download_pause","title":"on_download_pause  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_pause: str\n</code></pre> <p>Return the <code>on-download-pause</code> option value.</p> <p>Set the command to be executed after download was paused.</p> <p>See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.on_download_start","title":"on_download_start  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_start: str\n</code></pre> <p>Return the <code>on-download-start</code> option value.</p> <p>Set the command to be executed after download got started.</p> <p>See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.on_download_stop","title":"on_download_stop  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_stop: str\n</code></pre> <p>Return the <code>on-download-stop</code> option value.</p> <p>Set the command to be executed after download stopped.</p> <p>You can override the command to be executed for particular download result using --on-download-complete and --on-download-error. If they are specified, command specified in this option is not executed. See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.optimize_concurrent_downloads","title":"optimize_concurrent_downloads  <code>property</code> <code>writable</code>","text":"<pre><code>optimize_concurrent_downloads: str\n</code></pre> <p>Return the <code>optimize-concurrent-downloads</code> option value.</p> <p>Optimizes the number of concurrent downloads according to the bandwidth available (<code>true|false|&lt;A&gt;:&lt;B&gt;</code>).</p> <p>aria2 uses the download speed observed in the previous downloads to adapt the number of downloads launched in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be customized in the option arguments with A and B separated by a colon. The default values (A=5, B=25) lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks. The number of parallel downloads remains constrained under the maximum defined by the --max-concurrent-downloads parameter. Default: false.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.out","title":"out  <code>property</code> <code>writable</code>","text":"<pre><code>out: str\n</code></pre> <p>Return the <code>out</code> option value.</p> <p>The file name of the downloaded file.</p> <p>It is always relative to the directory given in --dir option. When the --force-sequential option is used, this option is ignored.</p> Note <p>You cannot specify a file name for Metalink or BitTorrent downloads. The file name specified here is only used when the URIs fed to aria2 are given on the command line directly, but not when using --input-file, --force-sequential option.</p> <pre><code>aria2c -o myfile.zip \"http://mirror1/file.zip\" \"http://mirror2/file.zip\"\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.parameterized_uri","title":"parameterized_uri  <code>property</code> <code>writable</code>","text":"<pre><code>parameterized_uri: bool\n</code></pre> <p>Return the <code>parameterized-uri</code> option value.</p> <p>Enable parameterized URI support.</p> <p>You can specify set of parts: http://{sv1,sv2,sv3}/foo.iso. Also you can specify numeric sequences with step counter:  http://host/image[000-100:2].img. A step counter can be omitted. If all URIs do not point to the same file, such as the second example above, -Z option is required. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.pause","title":"pause  <code>property</code> <code>writable</code>","text":"<pre><code>pause: bool\n</code></pre> <p>Return the <code>pause</code> option value.</p> <p>Pause download after added.</p> <p>This option is effective only when --enable-rpc=true is given. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.pause_metadata","title":"pause_metadata  <code>property</code> <code>writable</code>","text":"<pre><code>pause_metadata: bool\n</code></pre> <p>Return the <code>pause-metadata</code> option value.</p> <p>Pause downloads created as a result of metadata download.</p> <p>There are 3 types of metadata downloads in aria2: (1) downloading .torrent file. (2) downloading torrent metadata using magnet link. (3) downloading metalink file. These metadata downloads will generate downloads using their metadata. This option pauses these subsequent downloads. This option is effective only when --enable-rpc=true is given. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.peer_id_prefix","title":"peer_id_prefix  <code>property</code> <code>writable</code>","text":"<pre><code>peer_id_prefix: str\n</code></pre> <p>Return the <code>peer-id-prefix</code> option value.</p> <p>Specify the prefix of peer ID.</p> <p>The peer ID in BitTorrent is 20 byte length. If more than 20 bytes are specified, only first 20 bytes are used. If less than 20 bytes are specified, random byte data are added to make its length 20 bytes.</p> <p>Default: A2-$MAJOR-$MINOR-$PATCH-, $MAJOR, $MINOR and $PATCH are replaced by major, minor and patch version number respectively. For instance, aria2 version 1.18.8 has prefix ID A2-1-18-8-.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.piece_length","title":"piece_length  <code>property</code> <code>writable</code>","text":"<pre><code>piece_length: str\n</code></pre> <p>Return the <code>piece-length</code> option value.</p> <p>Set a piece length for HTTP/FTP downloads.</p> <p>This is the boundary when aria2 splits a file. All splits occur at multiple of this length. This option will be ignored in BitTorrent downloads. It will be also ignored if Metalink file contains piece hashes. Default: 1M.</p> Note <p>The possible use case of --piece-length option is change the request range in one HTTP pipelined request. To enable HTTP pipelining use --enable-http-pipelining.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.private_key","title":"private_key  <code>property</code> <code>writable</code>","text":"<pre><code>private_key: str\n</code></pre> <p>Return the <code>private-key</code> option value.</p> <p>Use the private key in FILE.</p> <p>The private key must be decrypted and in PEM format. The behavior when encrypted one is given is undefined. See also --certificate option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.proxy_method","title":"proxy_method  <code>property</code> <code>writable</code>","text":"<pre><code>proxy_method: str\n</code></pre> <p>Return the <code>proxy-method</code> option value.</p> <p>Set the method to use in proxy request.</p> <p>METHOD is either get or tunnel. HTTPS downloads always use tunnel regardless of this option. Default: get</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.quiet","title":"quiet  <code>property</code> <code>writable</code>","text":"<pre><code>quiet: bool\n</code></pre> <p>Return the <code>quiet</code> option value.</p> <p>Make aria2 quiet (no console output).</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.realtime_chunk_checksum","title":"realtime_chunk_checksum  <code>property</code> <code>writable</code>","text":"<pre><code>realtime_chunk_checksum: bool\n</code></pre> <p>Return the <code>realtime-chunk-checksum</code> option value.</p> <p>Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.referer","title":"referer  <code>property</code> <code>writable</code>","text":"<pre><code>referer: str\n</code></pre> <p>Return the <code>referer</code> option value.</p> <p>Set an http referrer (Referer).</p> <p>This affects all http/https downloads. If * is given, the download URI is also used as the referrer. This may be useful when used together with the --parameterized-uri option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.remote_time","title":"remote_time  <code>property</code> <code>writable</code>","text":"<pre><code>remote_time: bool\n</code></pre> <p>Return the <code>remote-time</code> option value.</p> <p>Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.remove_control_file","title":"remove_control_file  <code>property</code> <code>writable</code>","text":"<pre><code>remove_control_file: bool\n</code></pre> <p>Return the <code>remove-control-file</code> option value.</p> <p>Remove control file before download.</p> <p>Using with --allow-overwrite=true, download always starts from scratch. This will be useful for users behind proxy server which disables resume.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.retry_wait","title":"retry_wait  <code>property</code> <code>writable</code>","text":"<pre><code>retry_wait: int\n</code></pre> <p>Return the <code>retry-wait</code> option value.</p> <p>Set the seconds to wait between retries.</p> <p>When SEC &gt;` 0, aria2 will retry downloads when the HTTP server returns a 503 response. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.reuse_uri","title":"reuse_uri  <code>property</code> <code>writable</code>","text":"<pre><code>reuse_uri: bool\n</code></pre> <p>Return the <code>reuse-uri</code> option value.</p> <p>Reuse already used URIs if no unused URIs are left.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rlimit_nofile","title":"rlimit_nofile  <code>property</code> <code>writable</code>","text":"<pre><code>rlimit_nofile: int\n</code></pre> <p>Return the <code>rlimit-nofile</code> option value.</p> <p>Set the soft limit of open file descriptors.</p> <p>This open will only have effect when:</p> <p>a. The system supports it (posix)</p> <p>b. The limit does not exceed the hard limit.</p> <p>c. The specified limit is larger than the current soft limit.</p> <p>This is equivalent to setting nofile via ulimit, except that it will never decrease the limit.</p> <p>This option is only available on systems supporting the rlimit API.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_allow_origin_all","title":"rpc_allow_origin_all  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_allow_origin_all: bool\n</code></pre> <p>Return the <code>rpc-allow-origin-all</code> option value.</p> <p>Add Access-Control-Allow-Origin header field with value * to the RPC response.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_certificate","title":"rpc_certificate  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_certificate: str\n</code></pre> <p>Return the <code>rpc-certificate</code> option value.</p> <p>Use the certificate in FILE for RPC server.</p> <p>The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format.</p> <p>PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened!</p> <p>When using PEM, you have to specify the private key via --rpc-private-key as well. Use --rpc-secure option to enable encryption.</p> Note <p>WinTLS does not support PEM files at the moment. Users have to use PKCS12 files.</p> Note <p>AppleTLS users should use the KeyChain Access utility to first generate a self-signed SSL-Server certificate, e.g. using the wizard, and get the SHA-1 fingerprint from the Information dialog corresponding to that new certificate. To start aria2c with --rpc-secure use --rpc-certificate=<code>&lt;SHA-1&gt;</code>. Alternatively PKCS12 files are also supported. PEM files, however, are not supported.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_listen_all","title":"rpc_listen_all  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_listen_all: bool\n</code></pre> <p>Return the <code>rpc-listen-all</code> option value.</p> <p>Listen incoming JSON-RPC/XML-RPC requests on all network interfaces.</p> <p>If false is given, listen only on local loopback interface. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_listen_port","title":"rpc_listen_port  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_listen_port: int\n</code></pre> <p>Return the <code>rpc-listen-port</code> option value.</p> <p>Specify a port number for JSON-RPC/XML-RPC server to listen to.</p> <p>Possible Values: 1024-65535. Default: 6800.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_max_request_size","title":"rpc_max_request_size  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_max_request_size: str\n</code></pre> <p>Return the <code>rpc-max-request-size</code> option value.</p> <p>Set max size of JSON-RPC/XML-RPC request in bytes.</p> <p>If aria2 detects the request is more than SIZE bytes, it drops connection. Default: 2M.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_passwd","title":"rpc_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_passwd: str\n</code></pre> <p>Return the <code>rpc-passwd</code> option value.</p> <p>Set JSON-RPC/XML-RPC password.</p> Warning <p>--rpc-passwd option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_private_key","title":"rpc_private_key  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_private_key: str\n</code></pre> <p>Return the <code>rpc-private-key</code> option value.</p> <p>Use the private key in FILE for RPC server.</p> <p>The private key must be decrypted and in PEM format. Use --rpc-secure option to enable encryption. See also --rpc-certificate option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_save_upload_metadata","title":"rpc_save_upload_metadata  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_save_upload_metadata: bool\n</code></pre> <p>Return the <code>rpc-save-upload-metadata</code> option value.</p> <p>Save the uploaded torrent or metalink meta data in the directory specified by --dir option.</p> <p>The file name consists of SHA-1 hash hex string of meta data plus extension. For torrent, the extension is '.torrent'. For metalink, it is '.meta4'. If false is given to this option, the downloads added by aria2.addTorrent() or aria2.addMetalink() will not be saved by --save-session option. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_secret","title":"rpc_secret  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_secret: str\n</code></pre> <p>Return the <code>rpc-secret</code> option value.</p> <p>Set RPC secret authorization token.</p> <p>Read RPC authorization secret token to know how this option value is used.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_secure","title":"rpc_secure  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_secure: bool\n</code></pre> <p>Return the <code>rpc-secure</code> option value.</p> <p>RPC transport will be encrypted by SSL/TLS.</p> <p>The RPC clients must use https scheme to access the server. For WebSocket client, use wss scheme. Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.rpc_user","title":"rpc_user  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_user: str\n</code></pre> <p>Return the <code>rpc-user</code> option value.</p> <p>Set JSON-RPC/XML-RPC user.</p> Warning <p>--rpc-user option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.save_cookies","title":"save_cookies  <code>property</code> <code>writable</code>","text":"<pre><code>save_cookies: str\n</code></pre> <p>Return the <code>save-cookies</code> option value.</p> <p>Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/ Netscape format.</p> <p>If FILE already exists, it is overwritten. Session Cookies are also saved and their expiry values are treated as 0. Possible Values: /path/to/file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.save_not_found","title":"save_not_found  <code>property</code> <code>writable</code>","text":"<pre><code>save_not_found: bool\n</code></pre> <p>Return the <code>save-not-found</code> option value.</p> <p>Save download with --save-session option even if the file was not found on the server.</p> <p>This option also saves control file in that situations. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.save_session","title":"save_session  <code>property</code> <code>writable</code>","text":"<pre><code>save_session: str\n</code></pre> <p>Return the <code>save-session</code> option value.</p> <p>Save error/unfinished downloads to FILE on exit.</p> <p>You can pass this output file to aria2c with --input-file option on restart. If you like the output to be gzipped append a .gz extension to the file name. Please note that downloads added by aria2.addTorrent() and aria2.addMetalink() RPC method and whose meta data could not be saved as a file are not saved. Downloads removed using aria2.remove() and aria2.forceRemove() will not be saved. GID is also saved with gid, but there are some restrictions, see below.</p> Note <p>Normally, GID of the download itself is saved. But some downloads use meta data (e.g., BitTorrent and Metalink). In this case, there are some restrictions.</p> <p>magnet URI, and followed by torrent download:     GID of BitTorrent meta data download is saved.</p> <p>URI to torrent file, and followed by torrent download:     GID of torrent file download is saved.</p> <p>URI to metalink file, and followed by file downloads described in metalink file:     GID of metalink file download is saved.</p> <p>local torrent file:     GID of torrent download is saved.</p> <p>local metalink file:     Any meaningful GID is not saved.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.save_session_interval","title":"save_session_interval  <code>property</code> <code>writable</code>","text":"<pre><code>save_session_interval: int\n</code></pre> <p>Return the <code>save-session-interval</code> option value.</p> <p>Save error/unfinished downloads to a file specified by --save-session option every SEC seconds.</p> <p>If 0 is given, file will be saved only when aria2 exits. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.seed_ratio","title":"seed_ratio  <code>property</code> <code>writable</code>","text":"<pre><code>seed_ratio: float\n</code></pre> <p>Return the <code>seed-ratio</code> option value.</p> <p>Specify share ratio.</p> <p>Seed completed torrents until share ratio reaches RATIO. You are strongly encouraged to specify equals or more than 1.0 here. Specify 0.0 if you intend to do seeding regardless of share ratio. If --seed-time option is specified along with this option, seeding ends when at least one of the conditions is satisfied. Default: 1.0.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>float</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.seed_time","title":"seed_time  <code>property</code> <code>writable</code>","text":"<pre><code>seed_time: float\n</code></pre> <p>Return the <code>seed-time</code> option value.</p> <p>Specify seeding time in (fractional) minutes.</p> <p>Also see the --seed-ratio option.</p> Note <p>Specifying --seed-time=0 disables seeding after download completed.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>float</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.select_file","title":"select_file  <code>property</code> <code>writable</code>","text":"<pre><code>select_file: str\n</code></pre> <p>Return the <code>select-file</code> option value.</p> <p>Set file to download by specifying its index.</p> <p>You can find the file index using the --show-files option. Multiple indexes can be specified by using ,, for example: 3,6. You can also use - to specify a range: 1-5. , and - can be used together: 1-5,8, 9. When used with the -M option, index may vary depending on the query (see --metalink-* options).</p> Note <p>In multi file torrent, the adjacent files specified by this option may also be downloaded. This is by design, not a bug. A single piece may include several files or part of files, and aria2 writes the piece to the appropriate files.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.server_stat_if","title":"server_stat_if  <code>property</code> <code>writable</code>","text":"<pre><code>server_stat_if: str\n</code></pre> <p>Return the <code>server-stat-if</code> option value.</p> <p>Specify the file name to load performance profile of the servers.</p> <p>The loaded data will be used in some URI selector such as feedback. See also --uri-selector option. See Server Performance Profile subsection below for file format.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.server_stat_of","title":"server_stat_of  <code>property</code> <code>writable</code>","text":"<pre><code>server_stat_of: str\n</code></pre> <p>Return the <code>server-stat-of</code> option value.</p> <p>Specify the file name to which performance profile of the servers is saved.</p> <p>You can load saved data using --server-stat-if option. See Server Performance Profile subsection below for file format.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.server_stat_timeout","title":"server_stat_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>server_stat_timeout: int\n</code></pre> <p>Return the <code>server-stat-timeout</code> option value.</p> <p>Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them.</p> <p>Default: 86400 (24hours).</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.show_console_readout","title":"show_console_readout  <code>property</code> <code>writable</code>","text":"<pre><code>show_console_readout: bool\n</code></pre> <p>Return the <code>show-console-readout</code> option value.</p> <p>Show console readout.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.show_files","title":"show_files  <code>property</code> <code>writable</code>","text":"<pre><code>show_files: bool\n</code></pre> <p>Return the <code>show-files</code> option value.</p> <p>Print file listing of \".torrent\", \".meta4\" and \".metalink\" file and exit.</p> <p>In case of \".torrent\" file, additional information (infohash, piece length, etc) is also printed.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.socket_recv_buffer_size","title":"socket_recv_buffer_size  <code>property</code> <code>writable</code>","text":"<pre><code>socket_recv_buffer_size: int\n</code></pre> <p>Return the <code>socket-recv-buffer-size</code> option value.</p> <p>Set the maximum socket receive buffer in bytes.</p> <p>Specifying 0 will disable this option. This value will be set to socket file descriptor using SO_RCVBUF socket option with setsockopt() call. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.split","title":"split  <code>property</code> <code>writable</code>","text":"<pre><code>split: int\n</code></pre> <p>Return the <code>split</code> option value.</p> <p>Download a file using N connections.</p> <p>If more than N URIs are given, first N URIs are used and remaining URIs are used for backup. If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously. The number of connections to the same host is restricted by the --max-connection-per-server option. See also the --min-split-size option. Default: 5</p> Note <p>Some Metalinks regulate the number of servers to connect. aria2 strictly respects them. This means that if Metalink defines the maxconnections attribute lower than N, then aria2 uses the value of this lower value instead of N.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.ssh_host_key_md","title":"ssh_host_key_md  <code>property</code> <code>writable</code>","text":"<pre><code>ssh_host_key_md: str\n</code></pre> <p>Return the <code>ssh-host-key-md</code> option value.</p> <p>Set checksum for SSH host public key (<code>&lt;TYPE&gt;=&lt;DIGEST&gt;</code>).</p> <p>TYPE is hash type. The supported hash type is sha-1 or md5. DIGEST is hex digest. For example: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. This option can be used to validate server's public key when SFTP is used. If this option is not set, which is default, no validation takes place.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.stderr","title":"stderr  <code>property</code> <code>writable</code>","text":"<pre><code>stderr: bool\n</code></pre> <p>Return the <code>stderr</code> option value.</p> <p>Redirect all console output that would be otherwise printed in stdout to stderr.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.stop","title":"stop  <code>property</code> <code>writable</code>","text":"<pre><code>stop: int\n</code></pre> <p>Return the <code>stop</code> option value.</p> <p>Stop application after SEC seconds has passed.</p> <p>If 0 is given, this feature is disabled. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.stop_with_process","title":"stop_with_process  <code>property</code> <code>writable</code>","text":"<pre><code>stop_with_process: int\n</code></pre> <p>Return the <code>stop-with-process</code> option value.</p> <p>Stop application when process PID is not running.</p> <p>This is useful if aria2 process is forked from a parent process. The parent process can fork aria2 with its own pid and when parent process exits for some reason, aria2 can detect it and shutdown itself.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.stream_piece_selector","title":"stream_piece_selector  <code>property</code> <code>writable</code>","text":"<pre><code>stream_piece_selector: str\n</code></pre> <p>Return the <code>stream-piece-selector</code> option value.</p> <p>Specify piece selection algorithm used in HTTP/FTP download.</p> <p>Piece means fixed length segment which is downloaded in parallel in segmented download. If default is given, aria2 selects piece so that it reduces the number of establishing connection. This is reasonable default behavior because establishing connection is an expensive operation. If inorder is given, aria2 selects piece which has minimum index. Index=0 means first of the file. This will be useful to view movie while downloading it. --enable-http-pipelining option may be useful to reduce re-connection overhead. Please note that aria2 honors --min-split-size option, so it will be necessary to specify a reasonable value to --min-split-size option. If random is given, aria2 selects piece randomly. Like inorder, --min-split-size option is honored. If geom is given, at the beginning aria2 selects piece which has minimum index like inorder, but it exponentially increasingly keeps space from previously selected piece. This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first. This will be useful to view movie while downloading it. Default: default.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.summary_interval","title":"summary_interval  <code>property</code> <code>writable</code>","text":"<pre><code>summary_interval: int\n</code></pre> <p>Return the <code>summary-interval</code> option value.</p> <p>Set interval in seconds to output download progress summary.</p> <p>Setting 0 suppresses the output. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout: int\n</code></pre> <p>Return the <code>timeout</code> option value.</p> <p>Set timeout in seconds.</p> <p>Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.torrent_file","title":"torrent_file  <code>property</code> <code>writable</code>","text":"<pre><code>torrent_file: str\n</code></pre> <p>Return the <code>torrent-file</code> option value.</p> <p>The path to the \".torrent\" file.</p> <p>You are not required to use this option because you can specify \".torrent\" files without --torrent-file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.truncate_console_readout","title":"truncate_console_readout  <code>property</code> <code>writable</code>","text":"<pre><code>truncate_console_readout: bool\n</code></pre> <p>Return the <code>truncate-console-readout</code> option value.</p> <p>Truncate console readout to fit in a single line.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.uri_selector","title":"uri_selector  <code>property</code> <code>writable</code>","text":"<pre><code>uri_selector: str\n</code></pre> <p>Return the <code>uri-selector</code> option value.</p> <p>Specify URI selection algorithm.</p> <p>The possible values are inorder, feedback and adaptive. If inorder is given, URI is tried in the order appeared in the URI list. If feedback is given, aria2 uses download speed observed in the previous downloads and choose fastest server in the URI list. This also effectively skips dead mirrors. The observed download speed is a part of performance profile of servers mentioned in --server-stat-of and --server-stat-if options. If adaptive is given, selects one of the best mirrors for the first and reserved connections. For supplementary ones, it returns mirrors which has not been tested yet, and if each of them has already been tested, returns mirrors which has to be tested again. Otherwise, it doesn't select anymore mirrors. Like feedback, it uses a performance profile of servers. Default: feedback.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.use_head","title":"use_head  <code>property</code> <code>writable</code>","text":"<pre><code>use_head: bool\n</code></pre> <p>Return the <code>use-head</code> option value.</p> <p>Use HEAD method for the first request to the HTTP server.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.user_agent","title":"user_agent  <code>property</code> <code>writable</code>","text":"<pre><code>user_agent: str\n</code></pre> <p>Return the <code>user-agent</code> option value.</p> <p>Set user agent for HTTP(S) downloads.</p> <p>Default: aria2/$VERSION, $VERSION is replaced by package version.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Options.get","title":"get","text":"<pre><code>get(\n    item: str, class_: Callable | None = None\n) -&gt; OptionType\n</code></pre> <p>Get the value of an option given its name.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>str</code>)           \u2013            <p>The name of the option (example: \"input-file\").</p> </li> <li> <code>class_</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Pass the value through this class/function to change its type.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OptionType</code>           \u2013            <p>The option value.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def get(self, item: str, class_: Callable | None = None) -&gt; OptionType:\n    \"\"\"Get the value of an option given its name.\n\n    Parameters:\n        item: The name of the option (example: \"input-file\").\n        class_: Pass the value through this class/function to change its type.\n\n    Returns:\n        The option value.\n    \"\"\"\n    value = self._struct.get(item)\n    if class_ is not None and value is not None:\n        return class_(value)\n    return value\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Options.get_struct","title":"get_struct","text":"<pre><code>get_struct() -&gt; dict\n</code></pre> <p>Return a copy of the struct dictionary of this Options object.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A copy of the struct dictionary.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def get_struct(self) -&gt; dict:\n    \"\"\"Return a copy of the struct dictionary of this Options object.\n\n    Returns:\n        A copy of the struct dictionary.\n    \"\"\"\n    return deepcopy(self._struct)\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Options.set","title":"set","text":"<pre><code>set(\n    key: str, value: str | float | bool | list[str]\n) -&gt; bool\n</code></pre> <p>Set the value of an option given its name.</p> <p>Parameters:</p> <ul> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>The name of the option (example: \"input-file\").</p> </li> <li> <code>value</code>               (<code>str | float | bool | list[str]</code>)           \u2013            <p>The value to set.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the value was successfully set, False otherwise.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def set(self, key: str, value: str | float | bool | list[str]) -&gt; bool:\n    \"\"\"Set the value of an option given its name.\n\n    Parameters:\n        key: The name of the option (example: \"input-file\").\n        value: The value to set.\n\n    Returns:\n        True if the value was successfully set, False otherwise.\n    \"\"\"\n    if not isinstance(value, str):\n        value = str(value)\n    if self.download:\n        success = self.api.set_options({key: value}, [self.download])[0]\n    else:\n        success = self.api.set_global_options({key: value})\n    if success:\n        self._struct[key] = value\n    return success\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Stats","title":"Stats","text":"<pre><code>Stats(struct: dict)\n</code></pre> <p>This class holds information retrieved with the <code>get_global_stat</code> method of the client.</p> <p>Parameters:</p> <ul> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>download_speed_string</code>             \u2013              <p>Return the download speed as string.</p> </li> <li> <code>upload_speed_string</code>             \u2013              <p>Return the upload speed as string.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>download_speed</code>               (<code>int</code>)           \u2013            <p>Overall download speed (byte/sec).</p> </li> <li> <code>num_active</code>               (<code>int</code>)           \u2013            <p>Return the number of active downloads.</p> </li> <li> <code>num_stopped</code>               (<code>int</code>)           \u2013            <p>Return the number of stopped downloads in the current session.</p> </li> <li> <code>num_stopped_total</code>               (<code>int</code>)           \u2013            <p>Return the number of stopped downloads in the current session.</p> </li> <li> <code>num_waiting</code>               (<code>int</code>)           \u2013            <p>Return the number of waiting downloads.</p> </li> <li> <code>upload_speed</code>               (<code>int</code>)           \u2013            <p>Overall upload speed (byte/sec).</p> </li> </ul> Source code in <code>src/aria2p/stats.py</code> <pre><code>def __init__(self, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Stats.download_speed","title":"download_speed  <code>property</code>","text":"<pre><code>download_speed: int\n</code></pre> <p>Overall download speed (byte/sec).</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The overall download speed in bytes per second.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Stats.num_active","title":"num_active  <code>property</code>","text":"<pre><code>num_active: int\n</code></pre> <p>Return the number of active downloads.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of active downloads.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Stats.num_stopped","title":"num_stopped  <code>property</code>","text":"<pre><code>num_stopped: int\n</code></pre> <p>Return the number of stopped downloads in the current session.</p> <p>This value is capped by the <code>--max-download-result</code> option.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of stopped downloads in the current session (capped).</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Stats.num_stopped_total","title":"num_stopped_total  <code>property</code>","text":"<pre><code>num_stopped_total: int\n</code></pre> <p>Return the number of stopped downloads in the current session.</p> <p>This value is not capped by the <code>--max-download-result</code> option.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of stopped downloads in the current session (not capped).</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Stats.num_waiting","title":"num_waiting  <code>property</code>","text":"<pre><code>num_waiting: int\n</code></pre> <p>Return the number of waiting downloads.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of waiting downloads.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Stats.upload_speed","title":"upload_speed  <code>property</code>","text":"<pre><code>upload_speed: int\n</code></pre> <p>Overall upload speed (byte/sec).</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The overall upload speed in bytes per second.</p> </li> </ul>"},{"location":"reference/aria2p/#aria2p.Stats.download_speed_string","title":"download_speed_string","text":"<pre><code>download_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the download speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download speed string.</p> </li> </ul> Source code in <code>src/aria2p/stats.py</code> <pre><code>def download_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the download speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The download speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.download_speed, delim=\" \", postfix=\"/s\")\n    return str(self.download_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.Stats.upload_speed_string","title":"upload_speed_string","text":"<pre><code>upload_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the upload speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The upload speed string.</p> </li> </ul> Source code in <code>src/aria2p/stats.py</code> <pre><code>def upload_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the upload speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The upload speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.upload_speed, delim=\" \", postfix=\"/s\")\n    return str(self.upload_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/#aria2p.enable_logger","title":"enable_logger","text":"<pre><code>enable_logger(\n    sink: str | TextIO = stderr, level: str = \"WARNING\"\n) -&gt; None\n</code></pre> <p>Enable the logging of messages.</p> <p>Configure the <code>logger</code> variable imported from <code>loguru</code>.</p> <p>Parameters:</p> <ul> <li> <code>sink</code>               (<code>file</code>, default:                   <code>stderr</code> )           \u2013            <p>An opened file pointer, or stream handler. Default to standard error.</p> </li> <li> <code>level</code>               (<code>str</code>, default:                   <code>'WARNING'</code> )           \u2013            <p>The log level to use. Possible values are TRACE, DEBUG, INFO, WARNING, ERROR, CRITICAL. Default to WARNING.</p> </li> </ul> Source code in <code>src/aria2p/__init__.py</code> <pre><code>def enable_logger(sink: str | TextIO = sys.stderr, level: str = \"WARNING\") -&gt; None:\n    \"\"\"Enable the logging of messages.\n\n    Configure the `logger` variable imported from `loguru`.\n\n    Parameters:\n        sink (file): An opened file pointer, or stream handler. Default to standard error.\n        level (str): The log level to use. Possible values are TRACE, DEBUG, INFO, WARNING, ERROR, CRITICAL.\n            Default to WARNING.\n    \"\"\"\n    logger.remove()\n    logger.configure(handlers=[{\"sink\": sink, \"level\": level}])  # type: ignore[misc,list-item]\n    logger.enable(\"aria2p\")\n</code></pre>"},{"location":"reference/aria2p/api/","title":"aria2p.api","text":""},{"location":"reference/aria2p/api/#aria2p.api","title":"api","text":"<p>Aria2 API.</p> <p>This module defines the API class, which makes use of a JSON-RPC client to provide higher-level methods to interact easily with a remote aria2c process.</p> <p>Classes:</p> <ul> <li> <code>API</code>           \u2013            <p>A class providing high-level methods to interact with a remote aria2c process.</p> </li> </ul>"},{"location":"reference/aria2p/api/#aria2p.api.API","title":"API","text":"<pre><code>API(client: Client | None = None)\n</code></pre> <p>A class providing high-level methods to interact with a remote aria2c process.</p> <p>This class is instantiated with a reference to a <code>Client</code> instance. It then uses this client to call remote procedures, or remote methods. While the client methods reflect exactly what aria2c is providing through JSON-RPC, this class's methods allow for easier / faster control of the remote process. It also wraps the information the client retrieves in Python object, like <code>Download</code>, allowing for even more Pythonic interactions, without worrying about payloads, responses, JSON, etc..</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>Client | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the aria2p.client.Client class.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add</code>             \u2013              <p>Add a download (guess its type).</p> </li> <li> <code>add_magnet</code>             \u2013              <p>Add a download with a Magnet URI.</p> </li> <li> <code>add_metalink</code>             \u2013              <p>Add a download with a Metalink file.</p> </li> <li> <code>add_torrent</code>             \u2013              <p>Add a download with a torrent file (usually .torrent extension).</p> </li> <li> <code>add_uris</code>             \u2013              <p>Add a download with a URL (or more).</p> </li> <li> <code>autopurge</code>             \u2013              <p>Purge completed, removed or failed downloads from the queue.</p> </li> <li> <code>copy_files</code>             \u2013              <p>Copy downloaded files to another directory.</p> </li> <li> <code>get_download</code>             \u2013              <p>Get a <code>Download</code> object thanks to its GID.</p> </li> <li> <code>get_downloads</code>             \u2013              <p>Get a list of <code>Download</code> object thanks to their GIDs.</p> </li> <li> <code>get_global_options</code>             \u2013              <p>Get the global options.</p> </li> <li> <code>get_options</code>             \u2013              <p>Get options for each of the given downloads.</p> </li> <li> <code>get_stats</code>             \u2013              <p>Get the stats of the remote aria2c process.</p> </li> <li> <code>listen_to_notifications</code>             \u2013              <p>Start listening to aria2 notifications via WebSocket.</p> </li> <li> <code>move</code>             \u2013              <p>Move a download in the queue, relatively to its current position.</p> </li> <li> <code>move_down</code>             \u2013              <p>Move a download down in the queue.</p> </li> <li> <code>move_files</code>             \u2013              <p>Move downloaded files to another directory.</p> </li> <li> <code>move_to</code>             \u2013              <p>Move a download in the queue, with absolute positioning.</p> </li> <li> <code>move_to_bottom</code>             \u2013              <p>Move a download to the bottom of the queue.</p> </li> <li> <code>move_to_top</code>             \u2013              <p>Move a download to the top of the queue.</p> </li> <li> <code>move_up</code>             \u2013              <p>Move a download up in the queue.</p> </li> <li> <code>parse_input_file</code>             \u2013              <p>Parse a file with URIs or an aria2c input file.</p> </li> <li> <code>pause</code>             \u2013              <p>Pause the given (active) downloads.</p> </li> <li> <code>pause_all</code>             \u2013              <p>Pause all (active) downloads.</p> </li> <li> <code>purge</code>             \u2013              <p>Purge completed, removed or failed downloads from the queue.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove the given downloads from the list.</p> </li> <li> <code>remove_all</code>             \u2013              <p>Remove all downloads from the list.</p> </li> <li> <code>remove_files</code>             \u2013              <p>Remove downloaded files.</p> </li> <li> <code>resume</code>             \u2013              <p>Resume (unpause) the given downloads.</p> </li> <li> <code>resume_all</code>             \u2013              <p>Resume (unpause) all downloads.</p> </li> <li> <code>retry_downloads</code>             \u2013              <p>Resume failed downloads from where they left off with new GIDs.</p> </li> <li> <code>search</code>             \u2013              <p>Not implemented.</p> </li> <li> <code>set_global_options</code>             \u2013              <p>Set global options.</p> </li> <li> <code>set_options</code>             \u2013              <p>Set options for specific downloads.</p> </li> <li> <code>split_input_file</code>             \u2013              <p>Helper to split downloads in an input file.</p> </li> <li> <code>stop_listening</code>             \u2013              <p>Stop listening to notifications.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def __init__(self, client: Client | None = None) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        client: An instance of the [aria2p.client.Client][] class.\n    \"\"\"\n    self.client = client or Client()\n    self.listener: threading.Thread | None = None\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.add","title":"add","text":"<pre><code>add(\n    uri: str,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]\n</code></pre> <p>Add a download (guess its type).</p> <p>If the provided URI is in fact a file-path, and is neither a torrent or a metalink, then we read its lines and try to add each line as a download, recursively.</p> <p>Parameters:</p> <ul> <li> <code>uri</code>               (<code>str</code>)           \u2013            <p>The URI or file-path to add.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>The created downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add(\n    self,\n    uri: str,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]:\n    \"\"\"Add a download (guess its type).\n\n    If the provided URI is in fact a file-path, and is neither a torrent or a metalink,\n    then we read its lines and try to add each line as a download, recursively.\n\n    Parameters:\n        uri: The URI or file-path to add.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The created downloads.\n    \"\"\"\n    new_downloads = []\n    path = Path(uri)\n\n    # On Windows, path.exists() generates an OSError when path is an URI\n    # See https://github.com/pawamoy/aria2p/issues/41\n    try:\n        path_exists = path.exists()\n    except OSError:\n        path_exists = False\n\n    if path_exists:\n        if path.suffix == \".torrent\":\n            new_downloads.append(self.add_torrent(path, options=options, position=position))\n        elif path.suffix == \".metalink\":\n            new_downloads.extend(self.add_metalink(path, options=options, position=position))\n        else:\n            for uris, download_options in self.parse_input_file(path):\n                # Add batch downloads in specified position in queue.\n                new_downloads.append(self.add_uris(uris, options=download_options, position=position))\n                if position is not None:\n                    position += 1\n\n    elif uri.startswith(\"magnet:?\"):\n        new_downloads.append(self.add_magnet(uri, options=options, position=position))\n    else:\n        new_downloads.append(self.add_uris([uri], options=options, position=position))\n\n    return new_downloads\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.add_magnet","title":"add_magnet","text":"<pre><code>add_magnet(\n    magnet_uri: str,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download\n</code></pre> <p>Add a download with a Magnet URI.</p> <p>Parameters:</p> <ul> <li> <code>magnet_uri</code>               (<code>str</code>)           \u2013            <p>The Magnet URI.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The newly created download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_magnet(self, magnet_uri: str, options: OptionsType | None = None, position: int | None = None) -&gt; Download:\n    \"\"\"Add a download with a Magnet URI.\n\n    Parameters:\n        magnet_uri: The Magnet URI.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download object.\n    \"\"\"\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    gid = self.client.add_uri([magnet_uri], client_options, position)\n\n    return self.get_download(gid)\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.add_metalink","title":"add_metalink","text":"<pre><code>add_metalink(\n    metalink_file_path: str | Path,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]\n</code></pre> <p>Add a download with a Metalink file.</p> <p>Parameters:</p> <ul> <li> <code>metalink_file_path</code>               (<code>str | Path</code>)           \u2013            <p>The path to the Metalink file.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>The newly created download objects.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_metalink(\n    self,\n    metalink_file_path: str | Path,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; list[Download]:\n    \"\"\"Add a download with a Metalink file.\n\n    Parameters:\n        metalink_file_path: The path to the Metalink file.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download objects.\n    \"\"\"\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    with open(metalink_file_path, \"rb\") as stream:\n        metalink_contents = stream.read()\n    encoded_contents = b64encode(metalink_contents).decode(\"utf8\")\n\n    gids = self.client.add_metalink(encoded_contents, client_options, position)\n\n    return self.get_downloads(gids)\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.add_torrent","title":"add_torrent","text":"<pre><code>add_torrent(\n    torrent_file_path: str | Path,\n    uris: list[str] | None = None,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download\n</code></pre> <p>Add a download with a torrent file (usually .torrent extension).</p> <p>Parameters:</p> <ul> <li> <code>torrent_file_path</code>               (<code>str | Path</code>)           \u2013            <p>The path to the torrent file.</p> </li> <li> <code>uris</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of URIs used for Web-seeding.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The newly created download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_torrent(\n    self,\n    torrent_file_path: str | Path,\n    uris: list[str] | None = None,\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download:\n    \"\"\"Add a download with a torrent file (usually .torrent extension).\n\n    Parameters:\n        torrent_file_path: The path to the torrent file.\n        uris: A list of URIs used for Web-seeding.\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download object.\n    \"\"\"\n    if uris is None:\n        uris = []\n\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    with open(torrent_file_path, \"rb\") as stream:\n        torrent_contents = stream.read()\n    encoded_contents = b64encode(torrent_contents).decode(\"utf8\")\n\n    try:\n        gid = self.client.add_torrent(encoded_contents, uris, client_options, position)\n    except ConnectionError:\n        logger.error(\"Torrent too big? Try increasing max size with aria2c's --rpc-max-request-size option\")\n        raise\n\n    return self.get_download(gid)\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.add_uris","title":"add_uris","text":"<pre><code>add_uris(\n    uris: list[str],\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download\n</code></pre> <p>Add a download with a URL (or more).</p> <p>Parameters:</p> <ul> <li> <code>uris</code>               (<code>list[str]</code>)           \u2013            <p>A list of URIs that point to the same resource.</p> </li> <li> <code>options</code>               (<code>OptionsType | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The position where to insert the new download in the queue. Start at 0 (top).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The newly created download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def add_uris(\n    self,\n    uris: list[str],\n    options: OptionsType | None = None,\n    position: int | None = None,\n) -&gt; Download:\n    \"\"\"Add a download with a URL (or more).\n\n    Parameters:\n        uris: A list of URIs that point to the same resource.\n        options: An instance of the `Options` class or a dictionary\n            containing aria2c options to create the download with.\n        position: The position where to insert the new download in the queue. Start at 0 (top).\n\n    Returns:\n        The newly created download object.\n\n    \"\"\"\n    if options is None:\n        options = {}\n\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    gid = self.client.add_uri(uris, client_options, position)\n\n    return self.get_download(gid)\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.autopurge","title":"autopurge","text":"<pre><code>autopurge() -&gt; bool\n</code></pre> <p>Purge completed, removed or failed downloads from the queue.</p> <p>Deprecated. Use <code>purge</code> instead.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def autopurge(self) -&gt; bool:\n    \"\"\"Purge completed, removed or failed downloads from the queue.\n\n    Deprecated. Use [`purge`][aria2p.api.API.purge] instead.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    logger.warning(\"Deprecation warning: API method 'autopurge' is deprecated, use 'purge' instead.\")\n    return self.purge()\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.copy_files","title":"copy_files  <code>staticmethod</code>","text":"<pre><code>copy_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,\n) -&gt; list[bool]\n</code></pre> <p>Copy downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>the list of downloads for which to move files.</p> </li> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to copy files into.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>@staticmethod\ndef copy_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[bool]:\n    \"\"\"Copy downloaded files to another directory.\n\n    Parameters:\n        downloads:  the list of downloads for which to move files.\n        to_directory: The target directory to copy files into.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    if isinstance(to_directory, str):\n        to_directory = Path(to_directory)\n\n    # raises FileExistsError when target is already a file\n    to_directory.mkdir(parents=True, exist_ok=True)\n\n    results = []\n    for download in downloads:\n        if download.is_complete or force:\n            for path in download.root_files_paths:\n                if path.is_dir():\n                    shutil.copytree(str(path), str(to_directory / path.name))\n                elif path.is_file():\n                    shutil.copy(str(path), str(to_directory))\n\n            results.append(True)\n        else:\n            results.append(False)\n    return results\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.get_download","title":"get_download","text":"<pre><code>get_download(gid: str) -&gt; Download\n</code></pre> <p>Get a <code>Download</code> object thanks to its GID.</p> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The GID of the download to get.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>The retrieved download object.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_download(self, gid: str) -&gt; Download:\n    \"\"\"Get a [`Download`][aria2p.downloads.Download] object thanks to its GID.\n\n    Parameters:\n        gid: The GID of the download to get.\n\n    Returns:\n        The retrieved download object.\n    \"\"\"\n    return Download(self, self.client.tell_status(gid))\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.get_downloads","title":"get_downloads","text":"<pre><code>get_downloads(\n    gids: list[str] | None = None,\n) -&gt; list[Download]\n</code></pre> <p>Get a list of <code>Download</code> object thanks to their GIDs.</p> <p>Parameters:</p> <ul> <li> <code>gids</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The GIDs of the downloads to get. If None, return all the downloads.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>The retrieved download objects.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_downloads(self, gids: list[str] | None = None) -&gt; list[Download]:\n    \"\"\"Get a list of [`Download`][aria2p.downloads.Download] object thanks to their GIDs.\n\n    Parameters:\n        gids: The GIDs of the downloads to get. If None, return all the downloads.\n\n    Returns:\n        The retrieved download objects.\n    \"\"\"\n    downloads = []\n\n    if gids:\n        for gid in gids:\n            downloads.append(Download(self, self.client.tell_status(gid)))\n    else:\n        structs = []\n        structs.extend(self.client.tell_active())\n        structs.extend(self.client.tell_waiting(0, 1000))\n        structs.extend(self.client.tell_stopped(0, 1000))\n        downloads = [Download(self, struct) for struct in structs]\n\n    return downloads\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.get_global_options","title":"get_global_options","text":"<pre><code>get_global_options() -&gt; Options\n</code></pre> <p>Get the global options.</p> <p>Returns:</p> <ul> <li> <code>Options</code>           \u2013            <p>The global aria2c options.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_global_options(self) -&gt; Options:\n    \"\"\"Get the global options.\n\n    Returns:\n        The global aria2c options.\n    \"\"\"\n    return Options(self, self.client.get_global_option())\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.get_options","title":"get_options","text":"<pre><code>get_options(downloads: list[Download]) -&gt; list[Options]\n</code></pre> <p>Get options for each of the given downloads.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to get the options of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Options]</code>           \u2013            <p>Options object for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_options(self, downloads: list[Download]) -&gt; list[Options]:\n    \"\"\"Get options for each of the given downloads.\n\n    Parameters:\n        downloads: The list of downloads to get the options of.\n\n    Returns:\n        Options object for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    options = []\n    for download in downloads:\n        options.append(Options(self, self.client.get_option(download.gid), download))\n    return options\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Stats\n</code></pre> <p>Get the stats of the remote aria2c process.</p> <p>Returns:</p> <ul> <li> <code>Stats</code>           \u2013            <p>The global stats returned by the remote process.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def get_stats(self) -&gt; Stats:\n    \"\"\"Get the stats of the remote aria2c process.\n\n    Returns:\n        The global stats returned by the remote process.\n    \"\"\"\n    return Stats(self.client.get_global_stat())\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.listen_to_notifications","title":"listen_to_notifications","text":"<pre><code>listen_to_notifications(\n    threaded: bool = False,\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,\n) -&gt; None\n</code></pre> <p>Start listening to aria2 notifications via WebSocket.</p> <p>This method differs from <code>Client.listen_to_notifications</code> in that it expects callbacks accepting two arguments, <code>api</code> and <code>gid</code>, instead of only <code>gid</code>. Accepting <code>api</code> allows to use the high-level methods of the <code>API</code> class.</p> <p>Stop listening to notifications with the <code>API.stop_listening</code> method.</p> <p>Parameters:</p> <ul> <li> <code>threaded</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to start the listening loop in a thread or not (non-blocking or blocking).</p> </li> <li> <code>on_download_start</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStart</code> event.</p> </li> <li> <code>on_download_pause</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadPause</code> event.</p> </li> <li> <code>on_download_stop</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStop</code> event.</p> </li> <li> <code>on_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadComplete</code> event.</p> </li> <li> <code>on_download_error</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadError</code> event.</p> </li> <li> <code>on_bt_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onBtDownloadComplete</code> event.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds.</p> </li> <li> <code>handle_signals</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def listen_to_notifications(\n    self,\n    threaded: bool = False,  # noqa: FBT001,FBT002\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,  # noqa: FBT001,FBT002\n) -&gt; None:\n    \"\"\"Start listening to aria2 notifications via WebSocket.\n\n    This method differs from [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications]\n    in that it expects callbacks accepting two arguments, `api` and `gid`, instead of only `gid`.\n    Accepting `api` allows to use the high-level methods of the [`API`][aria2p.api.API] class.\n\n    Stop listening to notifications with the [`API.stop_listening`][aria2p.api.API.stop_listening] method.\n\n    Parameters:\n        threaded: Whether to start the listening loop in a thread or not (non-blocking or blocking).\n        on_download_start: Callback for the `onDownloadStart` event.\n        on_download_pause: Callback for the `onDownloadPause` event.\n        on_download_stop: Callback for the `onDownloadStop` event.\n        on_download_complete: Callback for the `onDownloadComplete` event.\n        on_download_error: Callback for the `onDownloadError` event.\n        on_bt_download_complete: Callback for the `onBtDownloadComplete` event.\n        timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity\n            when stopping to listen. Default is 5 seconds.\n        handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.\n    \"\"\"\n\n    def closure(callback: Callable | None) -&gt; Callable | None:\n        return functools.partial(callback, self) if callable(callback) else None\n\n    kwargs = {\n        \"on_download_start\": closure(on_download_start),\n        \"on_download_pause\": closure(on_download_pause),\n        \"on_download_stop\": closure(on_download_stop),\n        \"on_download_complete\": closure(on_download_complete),\n        \"on_download_error\": closure(on_download_error),\n        \"on_bt_download_complete\": closure(on_bt_download_complete),\n        \"timeout\": timeout,\n        \"handle_signals\": handle_signals,\n    }\n\n    if threaded:\n        kwargs[\"handle_signals\"] = False\n        self.listener = threading.Thread(target=self.client.listen_to_notifications, kwargs=kwargs)\n        self.listener.start()\n    else:\n        self.client.listen_to_notifications(**kwargs)  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.move","title":"move","text":"<pre><code>move(download: Download, pos: int) -&gt; int\n</code></pre> <p>Move a download in the queue, relatively to its current position.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move(self, download: Download, pos: int) -&gt; int:\n    \"\"\"Move a download in the queue, relatively to its current position.\n\n    Parameters:\n        download: The download object to move.\n        pos: The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.).\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, pos, \"POS_CUR\")\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.move_down","title":"move_down","text":"<pre><code>move_down(download: Download, pos: int = 1) -&gt; int\n</code></pre> <p>Move a download down in the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move down. With negative values, will move up (use move or move_up instead).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_down(self, download: Download, pos: int = 1) -&gt; int:\n    \"\"\"Move a download down in the queue.\n\n    Parameters:\n        download: The download object to move.\n        pos: Number of times to move down. With negative values, will move up (use move or move_up instead).\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, pos, \"POS_CUR\")\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.move_files","title":"move_files  <code>staticmethod</code>","text":"<pre><code>move_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,\n) -&gt; list[bool]\n</code></pre> <p>Move downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>the list of downloads for which to move files.</p> </li> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to move files to.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>@staticmethod\ndef move_files(\n    downloads: list[Download],\n    to_directory: str | Path,\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[bool]:\n    \"\"\"Move downloaded files to another directory.\n\n    Parameters:\n        downloads:  the list of downloads for which to move files.\n        to_directory: The target directory to move files to.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    if isinstance(to_directory, str):\n        to_directory = Path(to_directory)\n\n    # raises FileExistsError when target is already a file\n    to_directory.mkdir(parents=True, exist_ok=True)\n\n    results = []\n    for download in downloads:\n        if download.is_complete or force:\n            for path in download.root_files_paths:\n                shutil.move(str(path), str(to_directory))\n            results.append(True)\n        else:\n            results.append(False)\n    return results\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.move_to","title":"move_to","text":"<pre><code>move_to(download: Download, pos: int) -&gt; int\n</code></pre> <p>Move a download in the queue, with absolute positioning.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>The absolute position in the queue where to move the download. 0 for top, -1 for bottom.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_to(self, download: Download, pos: int) -&gt; int:\n    \"\"\"Move a download in the queue, with absolute positioning.\n\n    Parameters:\n        download: The download object to move.\n        pos: The absolute position in the queue where to move the download. 0 for top, -1 for bottom.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    if pos &lt; 0:\n        how = \"POS_END\"\n        pos = -pos\n    else:\n        how = \"POS_SET\"\n    return self.client.change_position(download.gid, pos, how)\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.move_to_bottom","title":"move_to_bottom","text":"<pre><code>move_to_bottom(download: Download) -&gt; int\n</code></pre> <p>Move a download to the bottom of the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_to_bottom(self, download: Download) -&gt; int:\n    \"\"\"Move a download to the bottom of the queue.\n\n    Parameters:\n        download: The download object to move.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, 0, \"POS_END\")\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.move_to_top","title":"move_to_top","text":"<pre><code>move_to_top(download: Download) -&gt; int\n</code></pre> <p>Move a download to the top of the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_to_top(self, download: Download) -&gt; int:\n    \"\"\"Move a download to the top of the queue.\n\n    Parameters:\n        download: The download object to move.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, 0, \"POS_SET\")\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.move_up","title":"move_up","text":"<pre><code>move_up(download: Download, pos: int = 1) -&gt; int\n</code></pre> <p>Move a download up in the queue.</p> <p>Parameters:</p> <ul> <li> <code>download</code>               (<code>Download</code>)           \u2013            <p>The download object to move.</p> </li> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move up. With negative values, will move down (use move or move_down instead).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def move_up(self, download: Download, pos: int = 1) -&gt; int:\n    \"\"\"Move a download up in the queue.\n\n    Parameters:\n        download: The download object to move.\n        pos: Number of times to move up. With negative values, will move down (use move or move_down instead).\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.client.change_position(download.gid, -pos, \"POS_CUR\")\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.parse_input_file","title":"parse_input_file","text":"<pre><code>parse_input_file(\n    input_file: str | Path,\n) -&gt; InputFileContentsType\n</code></pre> <p>Parse a file with URIs or an aria2c input file.</p> <p>Parameters:</p> <ul> <li> <code>input_file</code>               (<code>str | Path</code>)           \u2013            <p>Path to file with URIs or aria2c input file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>InputFileContentsType</code>           \u2013            <p>List of tuples containing list of URIs and dictionary with aria2c options.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def parse_input_file(self, input_file: str | Path) -&gt; InputFileContentsType:\n    \"\"\"Parse a file with URIs or an aria2c input file.\n\n    Parameters:\n        input_file: Path to file with URIs or aria2c input file.\n\n    Returns:\n        List of tuples containing list of URIs and dictionary with aria2c options.\n    \"\"\"\n    downloads = []\n    with Path(input_file).open() as fd:\n        for download_lines in self.split_input_file(fd):\n            uris = download_lines[0].split(\"\\t\")\n            options = {}\n            try:\n                for option_line in download_lines[1:]:\n                    option_name, option_value = option_line.split(\"=\", 1)\n                    options[option_name.lstrip()] = option_value\n                downloads.append((uris, options))\n            except ValueError as error:\n                logger.error(f\"Skipping download because of invalid option line '{option_line}'\")\n                logger.opt(exception=True).trace(error)\n    return downloads\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.pause","title":"pause","text":"<pre><code>pause(\n    downloads: list[Download], force: bool = False\n) -&gt; list[OperationResult]\n</code></pre> <p>Pause the given (active) downloads.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to pause.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to pause immediately without contacting servers or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def pause(self, downloads: list[Download], force: bool = False) -&gt; list[OperationResult]:  # noqa: FBT001,FBT002\n    \"\"\"Pause the given (active) downloads.\n\n    Parameters:\n        downloads: The list of downloads to pause.\n        force: Whether to pause immediately without contacting servers or not.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    pause_func = self.client.force_pause if force else self.client.pause\n\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        try:\n            pause_func(download.gid)\n        except ClientException as error:\n            logger.debug(f\"Failed to pause download {download.gid}\")\n            logger.opt(exception=True).trace(error)\n            result.append(error)\n        else:\n            result.append(True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.pause_all","title":"pause_all","text":"<pre><code>pause_all(force: bool = False) -&gt; bool\n</code></pre> <p>Pause all (active) downloads.</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to pause immediately without contacting servers or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation to pause all downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def pause_all(self, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Pause all (active) downloads.\n\n    Parameters:\n        force: Whether to pause immediately without contacting servers or not.\n\n    Returns:\n        Success or failure of the operation to pause all downloads.\n    \"\"\"\n    pause_func = self.client.force_pause_all if force else self.client.pause_all\n    return pause_func() == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.purge","title":"purge","text":"<pre><code>purge() -&gt; bool\n</code></pre> <p>Purge completed, removed or failed downloads from the queue.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def purge(self) -&gt; bool:\n    \"\"\"Purge completed, removed or failed downloads from the queue.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.client.purge_download_result() == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.remove","title":"remove","text":"<pre><code>remove(\n    downloads: list[Download],\n    force: bool = False,\n    files: bool = False,\n    clean: bool = True,\n) -&gt; list[OperationResult]\n</code></pre> <p>Remove the given downloads from the list.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to remove.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force the removal or not.</p> </li> <li> <code>files</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove downloads files as well.</p> </li> <li> <code>clean</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove the aria2 control file as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def remove(\n    self,\n    downloads: list[Download],\n    force: bool = False,  # noqa: FBT001,FBT002\n    files: bool = False,  # noqa: FBT001,FBT002\n    clean: bool = True,  # noqa: FBT001,FBT002\n) -&gt; list[OperationResult]:\n    \"\"\"Remove the given downloads from the list.\n\n    Parameters:\n        downloads: The list of downloads to remove.\n        force: Whether to force the removal or not.\n        files: Whether to remove downloads files as well.\n        clean: Whether to remove the aria2 control file as well.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    remove_func = self.client.force_remove if force else self.client.remove\n\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        if download.is_complete or download.is_removed or download.has_failed:\n            logger.debug(f\"Try to remove download result {download.gid}\")\n            try:\n                self.client.remove_download_result(download.gid)\n            except ClientException as error:\n                logger.exception(error)\n                result.append(error)\n            else:\n                logger.success(f\"Removed download result {download.gid}\")\n                result.append(True)\n        else:\n            logger.debug(f\"Try to remove download {download.gid}\")\n            try:\n                removed_gid = remove_func(download.gid)\n            except ClientException as error:\n                logger.exception(error)\n                result.append(error)\n            else:\n                logger.success(f\"Removed download {download.gid}\")\n                result.append(True)\n                try:  # (nested try)\n                    self.client.remove_download_result(download.gid)\n                except ClientException as error:\n                    logger.debug(f\"Failed to remove download result {download.gid}\")\n                    logger.opt(exception=True).trace(error)\n                if removed_gid != download.gid:\n                    logger.debug(\n                        f\"Removed download GID#{removed_gid} is different than download GID#{download.gid}\",\n                    )\n                    try:\n                        self.client.remove_download_result(removed_gid)\n                    except ClientException as error:\n                        logger.debug(f\"Failed to remove download result {removed_gid}\")\n                        logger.opt(exception=True).trace(error)\n\n        if clean:\n            download.control_file_path.unlink(missing_ok=True)\n            logger.debug(f\"Removed control file {download.control_file_path}\")\n\n        if files and result[-1]:\n            self.remove_files([download], force=True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.remove_all","title":"remove_all","text":"<pre><code>remove_all(force: bool = False) -&gt; bool\n</code></pre> <p>Remove all downloads from the list.</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force the removal or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation to remove all downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def remove_all(self, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Remove all downloads from the list.\n\n    Parameters:\n        force: Whether to force the removal or not.\n\n    Returns:\n        Success or failure of the operation to remove all downloads.\n    \"\"\"\n    return all(self.remove(self.get_downloads(), force=force))\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.remove_files","title":"remove_files  <code>staticmethod</code>","text":"<pre><code>remove_files(\n    downloads: list[Download], force: bool = False\n) -&gt; list[bool]\n</code></pre> <p>Remove downloaded files.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>the list of downloads for which to remove files.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>@staticmethod\ndef remove_files(\n    downloads: list[Download],\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[bool]:\n    \"\"\"Remove downloaded files.\n\n    Parameters:\n        downloads:  the list of downloads for which to remove files.\n        force: Whether to remove files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    results = []\n    for download in downloads:\n        if download.is_complete or force:\n            for path in download.root_files_paths:\n                if path.is_dir():\n                    try:\n                        shutil.rmtree(str(path))\n                    except OSError as error:\n                        logger.error(f\"Could not delete directory '{path}'\")\n                        logger.opt(exception=True).trace(error)\n                        results.append(False)\n                    else:\n                        results.append(True)\n                else:\n                    try:\n                        path.unlink()\n                    except FileNotFoundError as error:\n                        logger.warning(f\"File '{path}' did not exist when trying to delete it\")\n                        logger.opt(exception=True).trace(error)\n                    results.append(True)\n        else:\n            results.append(False)\n    return results\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.resume","title":"resume","text":"<pre><code>resume(downloads: list[Download]) -&gt; list[OperationResult]\n</code></pre> <p>Resume (unpause) the given downloads.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to resume.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def resume(self, downloads: list[Download]) -&gt; list[OperationResult]:\n    \"\"\"Resume (unpause) the given downloads.\n\n    Parameters:\n        downloads: The list of downloads to resume.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    # Note: batch/multicall candidate\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        try:\n            self.client.unpause(download.gid)\n        except ClientException as error:\n            logger.debug(f\"Failed to resume download {download.gid}\")\n            logger.opt(exception=True).trace(error)\n            result.append(error)\n        else:\n            result.append(True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.resume_all","title":"resume_all","text":"<pre><code>resume_all() -&gt; bool\n</code></pre> <p>Resume (unpause) all downloads.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation to resume all downloads.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def resume_all(self) -&gt; bool:\n    \"\"\"Resume (unpause) all downloads.\n\n    Returns:\n        Success or failure of the operation to resume all downloads.\n    \"\"\"\n    return self.client.unpause_all() == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.retry_downloads","title":"retry_downloads","text":"<pre><code>retry_downloads(\n    downloads: list[Download], clean: bool = False\n) -&gt; list[OperationResult]\n</code></pre> <p>Resume failed downloads from where they left off with new GIDs.</p> <p>Parameters:</p> <ul> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to remove.</p> </li> <li> <code>clean</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove the aria2 control file as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[OperationResult]</code>           \u2013            <p>Success or failure of the operation for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def retry_downloads(\n    self,\n    downloads: list[Download],\n    clean: bool = False,  # noqa: FBT001,FBT002\n) -&gt; list[OperationResult]:\n    \"\"\"Resume failed downloads from where they left off with new GIDs.\n\n    Parameters:\n        downloads: The list of downloads to remove.\n        clean: Whether to remove the aria2 control file as well.\n\n    Returns:\n        Success or failure of the operation for each given download.\n    \"\"\"\n    result: list[OperationResult] = []\n\n    for download in downloads:\n        if not download.has_failed:\n            continue\n        try:\n            uri = download.files[0].uris[0][\"uri\"]\n        except IndexError:\n            continue\n        try:\n            new_download_gid = self.add_uris([uri], download.options)\n        except ClientException as error:\n            result.append(error)\n        else:\n            if not new_download_gid:\n                continue\n\n            self.remove([download], clean=clean)\n            result.append(True)\n\n    return result\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.search","title":"search","text":"<pre><code>search(patterns: list[str]) -&gt; list[Download]\n</code></pre> <p>Not implemented.</p> <p>Search and return <code>Download</code> objects based on multiple patterns.</p> <p>Parameters:</p> <ul> <li> <code>patterns</code>               (<code>list[str]</code>)           \u2013            <p>The patterns used to filter the download list.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>This method is not implemented yet.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def search(self, patterns: list[str]) -&gt; list[Download]:\n    \"\"\"Not implemented.\n\n    Search and return [`Download`][aria2p.downloads.Download] objects based on multiple patterns.\n\n    Parameters:\n        patterns: The patterns used to filter the download list.\n\n    Raises:\n        NotImplementedError: This method is not implemented yet.\n    \"\"\"\n    # gid\n    # status\n    # totalLength\n    # completedLength\n    # uploadLength\n    # bitfield\n    # downloadSpeed\n    # uploadSpeed\n    # infoHash\n    # numSeeders\n    # seeder\n    # pieceLength\n    # numPieces\n    # connections\n    # errorCode\n    # errorMessage\n    # followedBy\n    # following\n    # belongsTo\n    # dir\n    # files\n    # bittorrent\n    #        announceList\n    #        comment\n    #        creationDate\n    #        mode\n    #        info\n    #               name\n    # verifiedLength\n    # verifyIntegrityPending\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.set_global_options","title":"set_global_options","text":"<pre><code>set_global_options(options: OptionsType) -&gt; bool\n</code></pre> <p>Set global options.</p> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>OptionsType</code>)           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation for changing global options.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def set_global_options(self, options: OptionsType) -&gt; bool:\n    \"\"\"Set global options.\n\n    Parameters:\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n\n    Returns:\n        Success or failure of the operation for changing global options.\n    \"\"\"\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    return self.client.change_global_option(client_options) == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.set_options","title":"set_options","text":"<pre><code>set_options(\n    options: OptionsType, downloads: list[Download]\n) -&gt; list[bool]\n</code></pre> <p>Set options for specific downloads.</p> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>OptionsType</code>)           \u2013            <p>An instance of the <code>Options</code> class or a dictionary containing aria2c options to create the download with.</p> </li> <li> <code>downloads</code>               (<code>list[Download]</code>)           \u2013            <p>The list of downloads to set the options for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[bool]</code>           \u2013            <p>Success or failure of the operation for changing options for each given download.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def set_options(self, options: OptionsType, downloads: list[Download]) -&gt; list[bool]:\n    \"\"\"Set options for specific downloads.\n\n    Parameters:\n        options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary\n            containing aria2c options to create the download with.\n        downloads: The list of downloads to set the options for.\n\n    Returns:\n        Success or failure of the operation for changing options for each given download.\n    \"\"\"\n    client_options = options.get_struct() if isinstance(options, Options) else options\n\n    # Note: batch/multicall candidate\n    results = []\n    for download in downloads:\n        results.append(self.client.change_option(download.gid, client_options) == \"OK\")\n    return results\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.split_input_file","title":"split_input_file","text":"<pre><code>split_input_file(\n    lines: list[str] | TextIO,\n) -&gt; Iterator[list[str]]\n</code></pre> <p>Helper to split downloads in an input file.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>list[str] | TextIO</code>)           \u2013            <p>The lines of the input file.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list[str]: Blocks of lines.</p> </li> </ul> Source code in <code>src/aria2p/api.py</code> <pre><code>def split_input_file(self, lines: list[str] | TextIO) -&gt; Iterator[list[str]]:\n    \"\"\"Helper to split downloads in an input file.\n\n    Parameters:\n         lines: The lines of the input file.\n\n    Yields:\n        list[str]: Blocks of lines.\n    \"\"\"\n    block: list[str] = []\n    for line in lines:\n        if line.lstrip().startswith(\"#\"):  # Ignore Comments\n            continue\n        if not line.strip():  # Ignore empty line\n            continue\n        if not line.startswith(\" \") and block:  # URIs line\n            yield block\n            block = []\n        block.append(line.rstrip(\"\\n\"))\n    if block:\n        yield block\n</code></pre>"},{"location":"reference/aria2p/api/#aria2p.api.API.stop_listening","title":"stop_listening","text":"<pre><code>stop_listening() -&gt; None\n</code></pre> <p>Stop listening to notifications.</p> <p>If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling <code>listen_to_notifications</code>.</p> Source code in <code>src/aria2p/api.py</code> <pre><code>def stop_listening(self) -&gt; None:\n    \"\"\"Stop listening to notifications.\n\n    If the listening loop was threaded, this method will wait for the thread to finish.\n    The time it takes for the thread to finish will depend on the timeout given while calling\n    [`listen_to_notifications`][aria2p.api.API.listen_to_notifications].\n    \"\"\"\n    self.client.stop_listening()\n    if self.listener:\n        self.listener.join()\n    self.listener = None\n</code></pre>"},{"location":"reference/aria2p/client/","title":"aria2p.client","text":""},{"location":"reference/aria2p/client/#aria2p.client","title":"client","text":"<p>Client module.</p> <p>This module defines the ClientException and Client classes, which are used to communicate with a remote aria2c process through the JSON-RPC protocol.</p> <p>Classes:</p> <ul> <li> <code>Client</code>           \u2013            <p>The JSON-RPC client class.</p> </li> <li> <code>ClientException</code>           \u2013            <p>An exception specific to JSON-RPC errors.</p> </li> <li> <code>Notification</code>           \u2013            <p>A helper class for notifications.</p> </li> </ul>"},{"location":"reference/aria2p/client/#aria2p.client.Client","title":"Client","text":"<pre><code>Client(\n    host: str = DEFAULT_HOST,\n    port: int = DEFAULT_PORT,\n    secret: str = \"\",\n    timeout: float = DEFAULT_TIMEOUT,\n)\n</code></pre> <p>The JSON-RPC client class.</p> <p>In this documentation, all the following terms refer to the same entity, the remote aria2c process: remote process, remote server, server, daemon process, background process, remote.</p> <p>This class implements method to communicate with a daemon aria2c process through the JSON-RPC protocol. Each method offered by the aria2c process is implemented in this class, in snake_case instead of camelCase (example: add_uri instead of addUri).</p> <p>The class defines a <code>METHODS</code> variable which contains the names of the available methods.</p> <p>The class is instantiated using an address and port, and optionally a secret token. The token is never passed as a method argument.</p> <p>The class provides utility methods:</p> <ul> <li><code>call</code>, which performs a JSON-RPC call for a single method;</li> <li><code>batch_call</code>, which performs a JSON-RPC call for a list of methods;</li> <li><code>multicall2</code>, which is an equivalent of multicall, but easier to use;</li> <li><code>post</code>, which is responsible for actually sending a payload to the remote process using a POST request;</li> <li><code>get_payload</code>, which is used to build payloads;</li> <li><code>get_params</code>, which is used to build list of parameters.</li> </ul> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>, default:                   <code>DEFAULT_HOST</code> )           \u2013            <p>The remote process address.</p> </li> <li> <code>port</code>               (<code>int</code>, default:                   <code>DEFAULT_PORT</code> )           \u2013            <p>The remote process port.</p> </li> <li> <code>secret</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The secret token.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>DEFAULT_TIMEOUT</code> )           \u2013            <p>The timeout to use for requests towards the remote server.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add_metalink</code>             \u2013              <p>Add a Metalink download.</p> </li> <li> <code>add_torrent</code>             \u2013              <p>Add a BitTorrent download.</p> </li> <li> <code>add_uri</code>             \u2013              <p>Add a new download.</p> </li> <li> <code>batch_call</code>             \u2013              <p>Call multiple methods in one request.</p> </li> <li> <code>call</code>             \u2013              <p>Call a single JSON-RPC method.</p> </li> <li> <code>change_global_option</code>             \u2013              <p>Change the global options dynamically.</p> </li> <li> <code>change_option</code>             \u2013              <p>Change a download options dynamically.</p> </li> <li> <code>change_position</code>             \u2013              <p>Change position of a download.</p> </li> <li> <code>change_uri</code>             \u2013              <p>Remove the URIs in <code>del_uris</code> from and appends the URIs in <code>add_uris</code> to download denoted by gid.</p> </li> <li> <code>force_pause</code>             \u2013              <p>Force pause a download.</p> </li> <li> <code>force_pause_all</code>             \u2013              <p>Force pause all active/waiting downloads.</p> </li> <li> <code>force_remove</code>             \u2013              <p>Force remove a download.</p> </li> <li> <code>force_shutdown</code>             \u2013              <p>Force shutdown aria2.</p> </li> <li> <code>get_files</code>             \u2013              <p>Return file list of a download.</p> </li> <li> <code>get_global_option</code>             \u2013              <p>Return the global options.</p> </li> <li> <code>get_global_stat</code>             \u2013              <p>Return global statistics such as the overall download and upload speeds.</p> </li> <li> <code>get_option</code>             \u2013              <p>Return options of a download.</p> </li> <li> <code>get_params</code>             \u2013              <p>Build the list of parameters.</p> </li> <li> <code>get_payload</code>             \u2013              <p>Build a payload.</p> </li> <li> <code>get_peers</code>             \u2013              <p>Return peers list of a download.</p> </li> <li> <code>get_servers</code>             \u2013              <p>Return servers currently connected for a download.</p> </li> <li> <code>get_session_info</code>             \u2013              <p>Return session information.</p> </li> <li> <code>get_uris</code>             \u2013              <p>Return URIs used in a download.</p> </li> <li> <code>get_version</code>             \u2013              <p>Return aria2 version and the list of enabled features.</p> </li> <li> <code>list_methods</code>             \u2013              <p>Return the available RPC methods.</p> </li> <li> <code>list_notifications</code>             \u2013              <p>Return all the available RPC notifications.</p> </li> <li> <code>listen_to_notifications</code>             \u2013              <p>Start listening to aria2 notifications via WebSocket.</p> </li> <li> <code>multicall</code>             \u2013              <p>Call multiple methods in a single request.</p> </li> <li> <code>multicall2</code>             \u2013              <p>Call multiple methods in one request.</p> </li> <li> <code>pause</code>             \u2013              <p>Pause a download.</p> </li> <li> <code>pause_all</code>             \u2013              <p>Pause all active/waiting downloads.</p> </li> <li> <code>post</code>             \u2013              <p>Send a POST request to the server.</p> </li> <li> <code>purge_download_result</code>             \u2013              <p>Purge completed/error/removed downloads from memory.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove a download.</p> </li> <li> <code>remove_download_result</code>             \u2013              <p>Remove a completed/error/removed download from memory.</p> </li> <li> <code>res_or_raise</code>             \u2013              <p>Return the result of the response, or raise an error with code and message.</p> </li> <li> <code>response_as_exception</code>             \u2013              <p>Transform the response as a <code>ClientException</code> instance and return it.</p> </li> <li> <code>save_session</code>             \u2013              <p>Save the current session to a file.</p> </li> <li> <code>shutdown</code>             \u2013              <p>Shutdown aria2.</p> </li> <li> <code>stop_listening</code>             \u2013              <p>Stop listening to notifications.</p> </li> <li> <code>tell_active</code>             \u2013              <p>Return the list of active downloads.</p> </li> <li> <code>tell_status</code>             \u2013              <p>Tell status of a download.</p> </li> <li> <code>tell_stopped</code>             \u2013              <p>Return the list of stopped downloads.</p> </li> <li> <code>tell_waiting</code>             \u2013              <p>Return the list of waiting downloads.</p> </li> <li> <code>unpause</code>             \u2013              <p>Resume a download.</p> </li> <li> <code>unpause_all</code>             \u2013              <p>Resume all downloads.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>server</code>               (<code>str</code>)           \u2013            <p>Return the full remote process / server address.</p> </li> <li> <code>ws_server</code>               (<code>str</code>)           \u2013            <p>Return the full WebSocket remote server address.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def __init__(\n    self,\n    host: str = DEFAULT_HOST,\n    port: int = DEFAULT_PORT,\n    secret: str = \"\",\n    timeout: float = DEFAULT_TIMEOUT,\n) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        host: The remote process address.\n        port: The remote process port.\n        secret: The secret token.\n        timeout: The timeout to use for requests towards the remote server.\n    \"\"\"\n    host = host.rstrip(\"/\")\n\n    self.host = host\n    self.port = port\n    self.secret = secret\n    self.timeout = timeout\n    self.listening = False\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.server","title":"server  <code>property</code>","text":"<pre><code>server: str\n</code></pre> <p>Return the full remote process / server address.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The server address.</p> </li> </ul>"},{"location":"reference/aria2p/client/#aria2p.client.Client.ws_server","title":"ws_server  <code>property</code>","text":"<pre><code>ws_server: str\n</code></pre> <p>Return the full WebSocket remote server address.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The WebSocket server address.</p> </li> </ul>"},{"location":"reference/aria2p/client/#aria2p.client.Client.add_metalink","title":"add_metalink","text":"<pre><code>add_metalink(\n    metalink: str,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; list[str]\n</code></pre> <p>Add a Metalink download.</p> <p>This method adds a Metalink download by uploading a \".metalink\" file and returns an array of GIDs of newly registered downloads.</p> <p>Original signature:</p> <pre><code>aria2.addMetalink([secret], metalink[, options[, position]])\n</code></pre> <p>If <code>--rpc-save-upload-metadata</code> is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by <code>--dir</code> option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or <code>--rpc-save-upload-metadata</code> is false, the downloads added by this method are not saved by <code>--save-session</code>.</p> <p>Parameters:</p> <ul> <li> <code>metalink</code>               (<code>str</code>)           \u2013            <p><code>metalink</code> is a base64-encoded string which contains the contents of the \".metalink\" file.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p><code>options</code> is a struct and its members are pairs of option name and value. See Options for more details.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>If <code>position</code> is given, it must be an integer starting from 0. The new download will be inserted at <code>position</code> in the waiting queue. If <code>position</code> is omitted or <code>position</code> is larger than the current size of the queue, the new download is appended to the end of the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The GID of the created download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples add local file file.meta4.</p> <pre><code>&gt;&gt;&gt; import urllib2, json, base64\n&gt;&gt;&gt; metalink = base64.b64encode(open(\"file.meta4\").read())\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.addMetalink\",\n...         \"params\": [metalink],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def add_metalink(\n    self,\n    metalink: str,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; list[str]:\n    \"\"\"Add a Metalink download.\n\n    This method adds a Metalink download by uploading a \".metalink\" file\n    and returns an array of GIDs of newly registered downloads.\n\n    Original signature:\n\n        aria2.addMetalink([secret], metalink[, options[, position]])\n\n    If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true,\n    the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\"\n    in the directory specified by [`--dir`][aria2p.options.Options.dir] option.\n    E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink.\n    If a file with the same name already exists, it is overwritten!\n    If the file cannot be saved successfully\n    or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false,\n    the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session].\n\n    Parameters:\n        metalink: `metalink` is a base64-encoded string which contains the contents of the \".metalink\" file.\n        options: `options` is a struct and its members are pairs of option name and value.\n            See [Options][aria2p.options.Options] for more details.\n        position: If `position` is given, it must be an integer starting from 0.\n            The new download will be inserted at `position` in the waiting queue.\n            If `position` is omitted or `position` is larger than the current size of the queue,\n            the new download is appended to the end of the queue.\n\n    Returns:\n        The GID of the created download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples add local file file.meta4.\n\n        &gt;&gt;&gt; import urllib2, json, base64\n        &gt;&gt;&gt; metalink = base64.b64encode(open(\"file.meta4\").read())\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.addMetalink\",\n        ...         \"params\": [metalink],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}'\n    \"\"\"\n    return self.call(self.ADD_METALINK, [metalink, options, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.add_torrent","title":"add_torrent","text":"<pre><code>add_torrent(\n    torrent: str,\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str\n</code></pre> <p>Add a BitTorrent download.</p> <p>This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the newly registered download.</p> <p>Original signature:</p> <pre><code>aria2.addTorrent([secret], torrent[, uris[, options[, position]]])\n</code></pre> <p>If you want to add a BitTorrent Magnet URI, use the <code>add_uri()</code> method instead.</p> <p>If <code>--rpc-save-upload-metadata</code> is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by <code>--dir</code> option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or <code>--rpc-save-upload-metadata</code> is false, the downloads added by this method are not saved by <code>--save-session</code>.</p> <p>Parameters:</p> <ul> <li> <code>torrent</code>               (<code>str</code>)           \u2013            <p><code>torrent</code> must be a base64-encoded string containing the contents of the \".torrent\" file.</p> </li> <li> <code>uris</code>               (<code>list[str]</code>)           \u2013            <p><code>uris</code> is an array of URIs (string). <code>uris</code> is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p><code>options</code> is a struct and its members are pairs of option name and value. See Options for more details.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>If <code>position</code> is given, it must be an integer starting from 0. The new download will be inserted at <code>position</code> in the waiting queue. If <code>position</code> is omitted or <code>position</code> is larger than the current size of the queue, the new download is appended to the end of the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the created download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples add local file file.torrent.</p> <pre><code>&gt;&gt;&gt; import urllib2, json, base64\n&gt;&gt;&gt; torrent = base64.b64encode(open(\"file.torrent\").read())\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"asdf\",\n...         \"method\": \"aria2.addTorrent\",\n...         \"params\": [torrent],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def add_torrent(\n    self,\n    torrent: str,\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str:\n    \"\"\"Add a BitTorrent download.\n\n    This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the\n    newly registered download.\n\n    Original signature:\n\n        aria2.addTorrent([secret], torrent[, uris[, options[, position]]])\n\n    If you want to add a BitTorrent Magnet URI, use the [`add_uri()`][aria2p.client.Client.add_uri] method instead.\n\n    If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true,\n    the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\"\n    in the directory specified by [`--dir`][aria2p.options.Options.dir] option.\n    E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent.\n    If a file with the same name already exists, it is overwritten!\n    If the file cannot be saved successfully\n    or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false,\n    the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session].\n\n    Parameters:\n        torrent: `torrent` must be a base64-encoded string containing the contents of the \".torrent\" file.\n        uris: `uris` is an array of URIs (string). `uris` is used for Web-seeding.\n            For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /,\n            name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI\n            for each file.\n        options: `options` is a struct and its members are pairs of option name and value.\n            See [Options][aria2p.options.Options] for more details.\n        position: If `position` is given, it must be an integer starting from 0.\n            The new download will be inserted at `position` in the waiting queue.\n            If `position` is omitted or `position` is larger than the current size of the queue,\n            the new download is appended to the end of the queue.\n\n    Returns:\n        The GID of the created download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples add local file file.torrent.\n\n        &gt;&gt;&gt; import urllib2, json, base64\n        &gt;&gt;&gt; torrent = base64.b64encode(open(\"file.torrent\").read())\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"asdf\",\n        ...         \"method\": \"aria2.addTorrent\",\n        ...         \"params\": [torrent],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n    \"\"\"\n    return self.call(self.ADD_TORRENT, [torrent, uris, options, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.add_uri","title":"add_uri","text":"<pre><code>add_uri(\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str\n</code></pre> <p>Add a new download.</p> <p>This method adds a new download and returns the GID of the newly registered download.</p> <p>Original signature:</p> <pre><code>aria2.addUri([secret], uris[, options[, position]])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>uris</code>               (<code>list[str]</code>)           \u2013            <p><code>uris</code> is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p><code>options</code> is a struct and its members are pairs of option name and value. See Options for more details.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>If <code>position</code> is given, it must be an integer starting from 0. The new download will be inserted at <code>position</code> in the waiting queue. If <code>position</code> is omitted or <code>position</code> is larger than the current size of the queue, the new download is appended to the end of the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the created download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following example adds http://example.org/file:</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.addUri\",\n...         \"params\": [[\"http://example.org/file\"]],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def add_uri(\n    self,\n    uris: list[str],\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; str:\n    \"\"\"Add a new download.\n\n    This method adds a new download and returns the GID of the newly registered download.\n\n    Original signature:\n\n        aria2.addUri([secret], uris[, options[, position]])\n\n    Parameters:\n        uris: `uris` is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource.\n            If you mix URIs pointing to different resources,\n            then the download may fail or be corrupted without aria2 complaining.\n            When adding BitTorrent Magnet URIs,\n            uris must have only one element and it should be BitTorrent Magnet URI.\n        options: `options` is a struct and its members are pairs of option name and value.\n            See [Options][aria2p.options.Options] for more details.\n        position: If `position` is given, it must be an integer starting from 0.\n            The new download will be inserted at `position` in the waiting queue.\n            If `position` is omitted or `position` is larger than the current size of the queue,\n            the new download is appended to the end of the queue.\n\n    Returns:\n        The GID of the created download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following example adds http://example.org/file:\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.addUri\",\n        ...         \"params\": [[\"http://example.org/file\"]],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n    \"\"\"\n    return self.call(self.ADD_URI, params=[uris, options, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.batch_call","title":"batch_call","text":"<pre><code>batch_call(\n    calls: CallsType, insert_secret: bool = True\n) -&gt; list[CallReturnType]\n</code></pre> <p>Call multiple methods in one request.</p> <p>A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are:</p> <ul> <li>multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods</li> <li>multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in   each part of the batch_call payload</li> <li>as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the   ID in multicall is optional</li> </ul> <p>Parameters:</p> <ul> <li> <code>calls</code>               (<code>CallsType</code>)           \u2013            <p>A list of tuples composed of method name, parameters and ID.</p> </li> <li> <code>insert_secret</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to insert the secret token in the parameters or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[CallReturnType]</code>           \u2013            <p>The results for each call in the batch.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def batch_call(\n    self,\n    calls: CallsType,\n    insert_secret: bool = True,  # noqa: FBT001,FBT002\n) -&gt; list[CallReturnType]:\n    \"\"\"Call multiple methods in one request.\n\n    A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a\n    multicall are:\n\n    - multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods\n    - multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in\n      each part of the batch_call payload\n    - as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the\n      ID in multicall is optional\n\n    Parameters:\n        calls: A list of tuples composed of method name, parameters and ID.\n        insert_secret: Whether to insert the secret token in the parameters or not.\n\n    Returns:\n        The results for each call in the batch.\n    \"\"\"\n    payloads = []\n\n    for method, params, msg_id in calls:\n        params = self.get_params(*params)  # noqa: PLW2901\n        if insert_secret and self.secret and method.startswith(\"aria2.\"):\n            params.insert(0, f\"token:{self.secret}\")\n        payloads.append(self.get_payload(method, params, msg_id, as_json=False))\n\n    payload: str = json.dumps(payloads)\n    responses = self.post(payload)\n    return [self.res_or_raise(resp) for resp in responses]\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.call","title":"call","text":"<pre><code>call(\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    insert_secret: bool = True,\n) -&gt; CallReturnType\n</code></pre> <p>Call a single JSON-RPC method.</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>str</code>)           \u2013            <p>The method name. You can use the constant defined in <code>Client</code>.</p> </li> <li> <code>params</code>               (<code>list[Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of parameters.</p> </li> <li> <code>msg_id</code>               (<code>int | str | None</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the call, sent back with the server's answer.</p> </li> <li> <code>insert_secret</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to insert the secret token in the parameters or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CallReturnType</code>           \u2013            <p>The answer from the server, as a Python object.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def call(\n    self,\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    insert_secret: bool = True,  # noqa: FBT001,FBT002\n) -&gt; CallReturnType:\n    \"\"\"Call a single JSON-RPC method.\n\n    Parameters:\n        method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client].\n        params: A list of parameters.\n        msg_id: The ID of the call, sent back with the server's answer.\n        insert_secret: Whether to insert the secret token in the parameters or not.\n\n    Returns:\n        The answer from the server, as a Python object.\n    \"\"\"\n    params = self.get_params(*(params or []))\n\n    if insert_secret and self.secret:\n        if method.startswith(\"aria2.\"):\n            params.insert(0, f\"token:{self.secret}\")\n        elif method == self.MULTICALL:\n            for param in params[0]:\n                param[\"params\"].insert(0, f\"token:{self.secret}\")\n\n    payload: str = self.get_payload(method, params, msg_id=msg_id)  # type: ignore\n    return self.res_or_raise(self.post(payload))\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.change_global_option","title":"change_global_option","text":"<pre><code>change_global_option(options: dict) -&gt; str\n</code></pre> <p>Change the global options dynamically.</p> <p>Original signature:</p> <pre><code>aria2.changeGlobalOption([secret], options)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>dict</code>)           \u2013            <p>The following options are available:</p> <ul> <li><code>bt-max-open-files</code></li> <li><code>download-result</code></li> <li><code>keep-unfinished-download-result</code></li> <li><code>log</code></li> <li><code>log-level</code></li> <li><code>max-concurrent-downloads</code></li> <li><code>max-download-result</code></li> <li><code>max-overall-download-limit</code></li> <li><code>max-overall-upload-limit</code></li> <li><code>optimize-concurrent-downloads</code></li> <li><code>save-cookies</code></li> <li><code>save-session</code></li> <li><code>server-stat-of</code></li> </ul> <p>In addition, options listed in the Input File subsection are available, except for following options: <code>checksum</code>, <code>index-out</code>, <code>out</code>, <code>pause</code> and <code>select-file</code>.</p> <p>With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string (\"\") as the parameter value. Note that log file is always opened in append mode.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> for success.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_global_option(self, options: dict) -&gt; str:\n    \"\"\"Change the global options dynamically.\n\n    Original signature:\n\n        aria2.changeGlobalOption([secret], options)\n\n    Parameters:\n        options: The following options are available:\n\n            - `bt-max-open-files`\n            - `download-result`\n            - `keep-unfinished-download-result`\n            - `log`\n            - `log-level`\n            - `max-concurrent-downloads`\n            - `max-download-result`\n            - `max-overall-download-limit`\n            - `max-overall-upload-limit`\n            - `optimize-concurrent-downloads`\n            - `save-cookies`\n            - `save-session`\n            - `server-stat-of`\n\n            In addition, options listed in the Input File subsection are available, except for following options:\n            `checksum`, `index-out`, `out`, `pause` and `select-file`.\n\n            With the log option, you can dynamically start logging or change log file. To stop logging, specify an\n            empty string (\"\") as the parameter value. Note that log file is always opened in append mode.\n\n    Returns:\n        `\"OK\"` for success.\n    \"\"\"\n    return self.call(self.CHANGE_GLOBAL_OPTION, [options])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.change_option","title":"change_option","text":"<pre><code>change_option(gid: str, options: dict) -&gt; str\n</code></pre> <p>Change a download options dynamically.</p> <p>Original signature:</p> <pre><code>aria2.changeOption([secret], gid, options)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to change options of.</p> </li> <li> <code>options</code>               (<code>dict</code>)           \u2013            <p>The options listed in Input File subsection are available, except for following options:</p> <ul> <li><code>dry-run</code></li> <li><code>metalink-base-uri</code></li> <li><code>parameterized-uri</code></li> <li><code>pause</code></li> <li><code>piece-length</code></li> <li><code>rpc-save-upload-metadata</code></li> </ul> <p>Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required):</p> <ul> <li><code>bt-max-peers</code></li> <li><code>bt-request-peer-speed-limit</code></li> <li><code>bt-remove-unselected-file</code></li> <li><code>force-save</code></li> <li><code>max-download-limit</code></li> <li><code>max-upload-limit</code></li> </ul> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> for success.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples set the max-download-limit option to 20K for the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.changeOption\",\n...         \"params\": [\"0000000000000001\", {\"max-download-limit\": \"10K\"}],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_option(self, gid: str, options: dict) -&gt; str:\n    \"\"\"Change a download options dynamically.\n\n    Original signature:\n\n        aria2.changeOption([secret], gid, options)\n\n    Parameters:\n        gid: The download to change options of.\n        options: The options listed in Input File subsection are available, except for following options:\n\n            - `dry-run`\n            - `metalink-base-uri`\n            - `parameterized-uri`\n            - `pause`\n            - `piece-length`\n            - `rpc-save-upload-metadata`\n\n            Except for the following options, changing the other options of active download makes it restart (restart\n            itself is managed by aria2, and no user intervention is required):\n\n            - `bt-max-peers`\n            - `bt-request-peer-speed-limit`\n            - `bt-remove-unselected-file`\n            - `force-save`\n            - `max-download-limit`\n            - `max-upload-limit`\n\n    Returns:\n        `\"OK\"` for success.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples set the max-download-limit option to 20K for the download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.changeOption\",\n        ...         \"params\": [\"0000000000000001\", {\"max-download-limit\": \"10K\"}],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n    \"\"\"\n    return self.call(self.CHANGE_OPTION, [gid, options])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.change_position","title":"change_position","text":"<pre><code>change_position(gid: str, pos: int, how: str) -&gt; int\n</code></pre> <p>Change position of a download.</p> <p>This method changes the position of the download denoted by <code>gid</code> in the queue.</p> <p>Original signature:</p> <pre><code>aria2.changePosition([secret], gid, pos, how)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to change the position of.</p> </li> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>An integer.</p> </li> <li> <code>how</code>               (<code>str</code>)           \u2013            <p><code>POS_SET</code>, <code>POS_CUR</code> or <code>POS_END</code>.</p> <ul> <li>If <code>how</code> is <code>POS_SET</code>, it moves the download to a position relative to the beginning of the queue.</li> <li>If <code>how</code> is <code>POS_CUR</code>, it moves the download to a position relative to the current position.</li> <li>If <code>how</code> is <code>POS_END</code>, it moves the download to a position relative to the end of the queue.</li> <li>If the destination position is less than 0 or beyond the end of the queue,   it moves the download to the beginning or the end of the queue respectively.</li> </ul> <p>For example, if GID#0000000000000001 is currently in position 3, <code>change_position('0000000000000001', -1, 'POS_CUR')</code> will change its position to 2. Additionally <code>change_position('0000000000000001', 0, 'POS_SET')</code> will change its position to 0 (the beginning of the queue).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An integer denoting the resulting position.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples move the download GID#0000000000000001 to the front of the queue.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.changePosition\",\n...         \"params\": [\"0000000000000001\", 0, \"POS_SET\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_position(self, gid: str, pos: int, how: str) -&gt; int:\n    \"\"\"Change position of a download.\n\n    This method changes the position of the download denoted by `gid` in the queue.\n\n    Original signature:\n\n        aria2.changePosition([secret], gid, pos, how)\n\n    Parameters:\n        gid: The download to change the position of.\n        pos: An integer.\n        how: `POS_SET`, `POS_CUR` or `POS_END`.\n\n            - If `how` is `POS_SET`, it moves the download to a position relative to the beginning of the queue.\n            - If `how` is `POS_CUR`, it moves the download to a position relative to the current position.\n            - If `how` is `POS_END`, it moves the download to a position relative to the end of the queue.\n            - If the destination position is less than 0 or beyond the end of the queue,\n              it moves the download to the beginning or the end of the queue respectively.\n\n            For example, if GID#0000000000000001 is currently in position 3,\n            `change_position('0000000000000001', -1, 'POS_CUR')` will change its position to 2. Additionally\n            `change_position('0000000000000001', 0, 'POS_SET')` will change its position to 0 (the beginning of the queue).\n\n    Returns:\n        An integer denoting the resulting position.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples move the download GID#0000000000000001 to the front of the queue.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.changePosition\",\n        ...         \"params\": [\"0000000000000001\", 0, \"POS_SET\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0}\n    \"\"\"\n    return self.call(self.CHANGE_POSITION, [gid, pos, how])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.change_uri","title":"change_uri","text":"<pre><code>change_uri(\n    gid: str,\n    file_index: int,\n    del_uris: list[str],\n    add_uris: list[str],\n    position: int | None = None,\n) -&gt; list[int]\n</code></pre> <p>Remove the URIs in <code>del_uris</code> from and appends the URIs in <code>add_uris</code> to download denoted by gid.</p> <p>Original signature:</p> <pre><code>aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to change URIs of.</p> </li> <li> <code>file_index</code>               (<code>int</code>)           \u2013            <p>Used to select which file to remove/attach given URIs. <code>file_index</code> is 1-based.</p> </li> <li> <code>del_uris</code>               (<code>list[str]</code>)           \u2013            <p>List of strings.</p> </li> <li> <code>add_uris</code>               (<code>list[str]</code>)           \u2013            <p>List of strings.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Used to specify where URIs are inserted in the existing waiting URI list. <code>position</code> is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. <code>position</code> is the position after URIs are removed, not the position when this method is called.</p> </li> </ul> <p>A download can contain multiple files and URIs are attached to each file. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in <code>del_uris</code>. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in <code>del_uris</code>.</p> <p>Returns:</p> <ul> <li> <code>list[int]</code>           \u2013            <p>A list which contains two integers.</p> </li> <li> <code>list[int]</code>           \u2013            <p>The first integer is the number of URIs deleted.</p> </li> <li> <code>list[int]</code>           \u2013            <p>The second integer is the number of URIs added.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer',\n...                       'method':'aria2.changeUri',\n...                       'params':['0000000000000001', 1, [],\n                                   ['http://example.org/file']]})\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def change_uri(\n    self,\n    gid: str,\n    file_index: int,\n    del_uris: list[str],\n    add_uris: list[str],\n    position: int | None = None,\n) -&gt; list[int]:\n    \"\"\"Remove the URIs in `del_uris` from and appends the URIs in `add_uris` to download denoted by gid.\n\n    Original signature:\n\n        aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position])\n\n    Parameters:\n        gid: The download to change URIs of.\n        file_index: Used to select which file to remove/attach given URIs. `file_index` is 1-based.\n        del_uris: List of strings.\n        add_uris: List of strings.\n        position: Used to specify where URIs are inserted in the existing waiting URI list. `position` is 0-based.\n            When position is omitted, URIs are appended to the back of the list.\n            This method first executes the removal and then the addition.\n            `position` is the position after URIs are removed, not the position when this\n            method is called.\n\n    A download can contain multiple files and URIs are attached to each file.\n    When removing an URI, if the same URIs exist in download, only one of them is removed for\n    each URI in `del_uris`. In other words, if there are three URIs http://example.org/aria2 and you want\n    remove them all, you have to specify (at least) 3 http://example.org/aria2 in `del_uris`.\n\n    Returns:\n        A list which contains two integers.\n        The first integer is the number of URIs deleted.\n        The second integer is the number of URIs added.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the\n        download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer',\n        ...                       'method':'aria2.changeUri',\n        ...                       'params':['0000000000000001', 1, [],\n                                           ['http://example.org/file']]})\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]}\n    \"\"\"\n    return self.call(self.CHANGE_URI, [gid, file_index, del_uris, add_uris, position])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.force_pause","title":"force_pause","text":"<pre><code>force_pause(gid: str) -&gt; str\n</code></pre> <p>Force pause a download.</p> <p>This method pauses the download denoted by gid. This method behaves just like <code>pause()</code> except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first.</p> <p>Original signature:</p> <pre><code>aria2.forcePause([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to force pause.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the paused download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_pause(self, gid: str) -&gt; str:\n    \"\"\"Force pause a download.\n\n    This method pauses the download denoted by gid.\n    This method behaves just like [`pause()`][aria2p.client.Client.pause] except that\n    this method pauses downloads without performing any actions which take time,\n    such as contacting BitTorrent trackers to unregister the download first.\n\n    Original signature:\n\n        aria2.forcePause([secret], gid)\n\n    Parameters:\n        gid: The download to force pause.\n\n    Returns:\n        The GID of the paused download.\n    \"\"\"\n    return self.call(self.FORCE_PAUSE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.force_pause_all","title":"force_pause_all","text":"<pre><code>force_pause_all() -&gt; str\n</code></pre> <p>Force pause all active/waiting downloads.</p> <p>This method is equal to calling <code>force_pause()</code> for every active/waiting download.</p> <p>Original signature:</p> <pre><code>aria2.forcePauseAll([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_pause_all(self) -&gt; str:\n    \"\"\"Force pause all active/waiting downloads.\n\n    This method is equal to calling [`force_pause()`][aria2p.client.Client.force_pause] for every active/waiting download.\n\n    Original signature:\n\n        aria2.forcePauseAll([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.FORCE_PAUSE_ALL)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.force_remove","title":"force_remove","text":"<pre><code>force_remove(gid: str) -&gt; str\n</code></pre> <p>Force remove a download.</p> <p>This method removes the download denoted by gid. This method behaves just like <code>remove()</code> except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first.</p> <p>Original signature:</p> <pre><code>aria2.forceRemove([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to force remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the removed download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_remove(self, gid: str) -&gt; str:\n    \"\"\"Force remove a download.\n\n    This method removes the download denoted by gid.\n    This method behaves just like [`remove()`][aria2p.client.Client.remove] except\n    that this method removes the download without performing any actions which take time, such as contacting\n    BitTorrent trackers to unregister the download first.\n\n    Original signature:\n\n        aria2.forceRemove([secret], gid)\n\n    Parameters:\n        gid: The download to force remove.\n\n    Returns:\n        The GID of the removed download.\n    \"\"\"\n    return self.call(self.FORCE_REMOVE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.force_shutdown","title":"force_shutdown","text":"<pre><code>force_shutdown() -&gt; str\n</code></pre> <p>Force shutdown aria2.</p> <p>This method shuts down aria2. This method behaves like <code>shutdown()</code> without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first.</p> <p>Original signature:</p> <pre><code>aria2.forceShutdown([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def force_shutdown(self) -&gt; str:\n    \"\"\"Force shutdown aria2.\n\n    This method shuts down aria2. This method behaves like [`shutdown()`][aria2p.client.Client.shutdown] without performing any\n    actions which take time, such as contacting BitTorrent trackers to unregister downloads first.\n\n    Original signature:\n\n        aria2.forceShutdown([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.FORCE_SHUTDOWN)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_files","title":"get_files","text":"<pre><code>get_files(gid: str) -&gt; dict\n</code></pre> <p>Return file list of a download.</p> <p>This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings.</p> <ul> <li><code>index</code>: Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.</li> <li><code>path</code>: File path.</li> <li><code>length</code>: File size in bytes.</li> <li><code>completedLength</code>: Completed length of this file in bytes.   Please note that it is possible that sum of <code>completedLength</code>   is less than the <code>completedLength</code> returned by the <code>tell_status()</code> method.   This is because <code>completedLength</code> in <code>get_files()</code> only includes completed pieces.   On the other hand, <code>completedLength</code> in <code>tell_status()</code>   also includes partially completed pieces.</li> <li><code>selected</code>: true if this file is selected by <code>--select-file</code> option.   If <code>--select-file</code> is not specified   or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false.</li> <li><code>uris</code> Returns a list of URIs for this file.   The element type is the same struct used in the <code>get_uris()</code> method.</li> </ul> <p>Original signature:</p> <pre><code>aria2.getFiles([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to list files of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The file list of a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getFiles\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'index': u'1',\n              u'length': u'34896138',\n              u'completedLength': u'34896138',\n              u'path': u'/downloads/file',\n              u'selected': u'true',\n              u'uris': [{u'status': u'used',\n                         u'uri': u'http://example.org/file'}]}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_files(self, gid: str) -&gt; dict:\n    \"\"\"Return file list of a download.\n\n    This method returns the file list of the download denoted by gid (string). The response is an array of\n    structs which contain following keys. Values are strings.\n\n    - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.\n    - `path`: File path.\n    - `length`: File size in bytes.\n    - `completedLength`: Completed length of this file in bytes.\n      Please note that it is possible that sum of `completedLength`\n      is less than the `completedLength` returned by the [`tell_status()`][aria2p.client.Client.tell_status] method.\n      This is because `completedLength` in [`get_files()`][aria2p.client.Client.get_files] only includes completed pieces.\n      On the other hand, `completedLength` in [`tell_status()`][aria2p.client.Client.tell_status]\n      also includes partially completed pieces.\n    - `selected`: true if this file is selected by [`--select-file`][aria2p.options.Options.select_file] option.\n      If [`--select-file`][aria2p.options.Options.select_file] is not specified\n      or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false.\n    - `uris` Returns a list of URIs for this file.\n      The element type is the same struct used in the [`get_uris()`][aria2p.client.Client.get_uris] method.\n\n    Original signature:\n\n        aria2.getFiles([secret], gid)\n\n    Parameters:\n        gid: The download to list files of.\n\n    Returns:\n        The file list of a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getFiles\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'index': u'1',\n                      u'length': u'34896138',\n                      u'completedLength': u'34896138',\n                      u'path': u'/downloads/file',\n                      u'selected': u'true',\n                      u'uris': [{u'status': u'used',\n                                 u'uri': u'http://example.org/file'}]}]}\n    \"\"\"\n    return self.call(self.GET_FILES, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_global_option","title":"get_global_option","text":"<pre><code>get_global_option() -&gt; dict\n</code></pre> <p>Return the global options.</p> <p>Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the <code>get_option()</code> method.</p> <p>Original signature:</p> <pre><code>aria2.getGlobalOption([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The global options. The response is a struct. Its keys are the names of options.</p> </li> <li> <code>dict</code>           \u2013            <p>Values are strings.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_global_option(self) -&gt; dict:\n    \"\"\"Return the global options.\n\n    Note that this method does not return options which have no default value and have not\n    been set on the command-line, in configuration files or RPC methods. Because global options are used as a\n    template for the options of newly added downloads, the response contains keys returned by the\n    [`get_option()`][aria2p.client.Client.get_option] method.\n\n    Original signature:\n\n        aria2.getGlobalOption([secret])\n\n    Returns:\n        The global options. The response is a struct. Its keys are the names of options.\n        Values are strings.\n    \"\"\"\n    return self.call(self.GET_GLOBAL_OPTION)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_global_stat","title":"get_global_stat","text":"<pre><code>get_global_stat() -&gt; dict\n</code></pre> <p>Return global statistics such as the overall download and upload speeds.</p> <p>Original signature:</p> <pre><code>aria2.getGlobalStat([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A struct that contains the following keys (values are strings):</p> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>downloadSpeed</code>: Overall download speed (byte/sec).</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>uploadSpeed</code>: Overall upload speed(byte/sec).</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numActive</code>: The number of active downloads.</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numWaiting</code>: The number of waiting downloads.</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numStopped</code>: The number of stopped downloads in the current session. This value is capped by the <code>--max-download-result</code> option.</li> </ul> </li> <li> <code>dict</code>           \u2013            <ul> <li><code>numStoppedTotal</code>: The number of stopped downloads in the current session and not capped by the <code>--max-download-result</code> option.</li> </ul> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getGlobalStat\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'downloadSpeed': u'21846',\n             u'numActive': u'2',\n             u'numStopped': u'0',\n             u'numWaiting': u'0',\n             u'uploadSpeed': u'0'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_global_stat(self) -&gt; dict:\n    \"\"\"Return global statistics such as the overall download and upload speeds.\n\n    Original signature:\n\n        aria2.getGlobalStat([secret])\n\n    Returns:\n        A struct that contains the following keys (values are strings):\n\n        - `downloadSpeed`: Overall download speed (byte/sec).\n        - `uploadSpeed`: Overall upload speed(byte/sec).\n        - `numActive`: The number of active downloads.\n        - `numWaiting`: The number of waiting downloads.\n        - `numStopped`: The number of stopped downloads in the current session. This value is capped by the\n            [`--max-download-result`][aria2p.options.Options.max_download_result] option.\n        - `numStoppedTotal`: The number of stopped downloads in the current session and not capped by the\n            [`--max-download-result`][aria2p.options.Options.max_download_result] option.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getGlobalStat\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'downloadSpeed': u'21846',\n                     u'numActive': u'2',\n                     u'numStopped': u'0',\n                     u'numWaiting': u'0',\n                     u'uploadSpeed': u'0'}}\n    \"\"\"\n    return self.call(self.GET_GLOBAL_STAT)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_option","title":"get_option","text":"<pre><code>get_option(gid: str) -&gt; dict\n</code></pre> <p>Return options of a download.</p> <p>Original signature:</p> <pre><code>aria2.getOption([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to get the options of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A struct where keys are the names of options. The values are strings.</p> </li> <li> <code>dict</code>           \u2013            <p>Note that this method does not return options which have</p> </li> <li> <code>dict</code>           \u2013            <p>no default value and have not been set on the command-line, in configuration files or RPC methods.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples get options of the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getOption\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'allow-overwrite': u'false',\n             u'allow-piece-length-change': u'false',\n             u'always-resume': u'true',\n             u'async-dns': u'true',\n ...\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_option(self, gid: str) -&gt; dict:\n    \"\"\"Return options of a download.\n\n    Original signature:\n\n        aria2.getOption([secret], gid)\n\n    Parameters:\n        gid: The download to get the options of.\n\n    Returns:\n        A struct where keys are the names of options. The values are strings.\n        Note that this method does not return options which have\n        no default value and have not been set on the command-line, in configuration files or RPC methods.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples get options of the download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getOption\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'allow-overwrite': u'false',\n                     u'allow-piece-length-change': u'false',\n                     u'always-resume': u'true',\n                     u'async-dns': u'true',\n         ...\n    \"\"\"\n    return self.call(self.GET_OPTION, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_params","title":"get_params  <code>staticmethod</code>","text":"<pre><code>get_params(*args: Any) -&gt; list\n</code></pre> <p>Build the list of parameters.</p> <p>This method simply removes the <code>None</code> values from the given arguments.</p> <p>Parameters:</p> <ul> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>List of parameters.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>           \u2013            <p>A new list, with <code>None</code> values filtered out.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef get_params(*args: Any) -&gt; list:\n    \"\"\"Build the list of parameters.\n\n    This method simply removes the `None` values from the given arguments.\n\n    Parameters:\n        *args: List of parameters.\n\n    Returns:\n        A new list, with `None` values filtered out.\n    \"\"\"\n    return [_ for _ in args if _ is not None]\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_payload","title":"get_payload  <code>staticmethod</code>","text":"<pre><code>get_payload(\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    as_json: bool = True,\n) -&gt; str | dict\n</code></pre> <p>Build a payload.</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>str</code>)           \u2013            <p>The method name. You can use the constant defined in <code>Client</code>.</p> </li> <li> <code>params</code>               (<code>list[Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>The list of parameters.</p> </li> <li> <code>msg_id</code>               (<code>int | str | None</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the call, sent back with the server's answer.</p> </li> <li> <code>as_json</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to return the payload as a JSON-string or Python dictionary.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | dict</code>           \u2013            <p>The payload as a JSON string or as Python dictionary.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef get_payload(\n    method: str,\n    params: list[Any] | None = None,\n    msg_id: int | str | None = None,\n    as_json: bool = True,  # noqa: FBT001,FBT002\n) -&gt; str | dict:\n    \"\"\"Build a payload.\n\n    Parameters:\n        method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client].\n        params: The list of parameters.\n        msg_id: The ID of the call, sent back with the server's answer.\n        as_json: Whether to return the payload as a JSON-string or Python dictionary.\n\n    Returns:\n        The payload as a JSON string or as Python dictionary.\n    \"\"\"\n    payload: dict[str, Any] = {\"jsonrpc\": \"2.0\", \"method\": method}\n\n    if msg_id is None:\n        payload[\"id\"] = DEFAULT_ID\n    else:\n        payload[\"id\"] = msg_id\n\n    if params:\n        payload[\"params\"] = params\n\n    return json.dumps(payload) if as_json else payload\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_peers","title":"get_peers","text":"<pre><code>get_peers(gid: str) -&gt; dict\n</code></pre> <p>Return peers list of a download.</p> <p>This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings.</p> <ul> <li><code>peerId</code>: Percent-encoded peer ID.</li> <li><code>ip</code>: IP address of the peer.</li> <li><code>port</code>: Port number of the peer.</li> <li><code>bitfield</code>: Hexadecimal representation of the download progress of the peer. The highest bit corresponds to   the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is   missing. Any spare bits at the end are set to zero.</li> <li><code>amChoking</code>: true if aria2 is choking the peer. Otherwise false.</li> <li><code>peerChoking</code>: true if the peer is choking aria2. Otherwise false.</li> <li><code>downloadSpeed</code>: Download speed (byte/sec) that this client obtains from the peer.</li> <li><code>uploadSpeed</code>: Upload speed(byte/sec) that this client uploads to the peer.</li> <li><code>seeder</code>: true if this peer is a seeder. Otherwise false.</li> </ul> <p>Original signature:</p> <pre><code>aria2.getPeers([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to get peers from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The peers connected to a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getPeers\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'amChoking': u'true',\n              u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff',\n              u'downloadSpeed': u'10602',\n              u'ip': u'10.0.0.9',\n              u'peerChoking': u'false',\n              u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6',\n              u'port': u'6881',\n              u'seeder': u'true',\n              u'uploadSpeed': u'0'},\n             {u'amChoking': u'false',\n              u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff',\n              u'downloadSpeed': u'8654',\n              u'ip': u'10.0.0.30',\n              u'peerChoking': u'false',\n              u'peerId': u'bittorrent client758',\n              u'port': u'37842',\n              u'seeder': u'false',\n              u'uploadSpeed': u'6890'}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_peers(self, gid: str) -&gt; dict:\n    \"\"\"Return peers list of a download.\n\n    This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent\n    only. The response is an array of structs and contains the following keys. Values are strings.\n\n    - `peerId`: Percent-encoded peer ID.\n    - `ip`: IP address of the peer.\n    - `port`: Port number of the peer.\n    - `bitfield`: Hexadecimal representation of the download progress of the peer. The highest bit corresponds to\n      the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is\n      missing. Any spare bits at the end are set to zero.\n    - `amChoking`: true if aria2 is choking the peer. Otherwise false.\n    - `peerChoking`: true if the peer is choking aria2. Otherwise false.\n    - `downloadSpeed`: Download speed (byte/sec) that this client obtains from the peer.\n    - `uploadSpeed`: Upload speed(byte/sec) that this client uploads to the peer.\n    - `seeder`: true if this peer is a seeder. Otherwise false.\n\n    Original signature:\n\n        aria2.getPeers([secret], gid)\n\n    Parameters:\n        gid: The download to get peers from.\n\n    Returns:\n        The peers connected to a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getPeers\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'amChoking': u'true',\n                      u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff',\n                      u'downloadSpeed': u'10602',\n                      u'ip': u'10.0.0.9',\n                      u'peerChoking': u'false',\n                      u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6',\n                      u'port': u'6881',\n                      u'seeder': u'true',\n                      u'uploadSpeed': u'0'},\n                     {u'amChoking': u'false',\n                      u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff',\n                      u'downloadSpeed': u'8654',\n                      u'ip': u'10.0.0.30',\n                      u'peerChoking': u'false',\n                      u'peerId': u'bittorrent client758',\n                      u'port': u'37842',\n                      u'seeder': u'false',\n                      u'uploadSpeed': u'6890'}]}\n    \"\"\"\n    return self.call(self.GET_PEERS, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_servers","title":"get_servers","text":"<pre><code>get_servers(gid: str) -&gt; dict\n</code></pre> <p>Return servers currently connected for a download.</p> <p>This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings.</p> <ul> <li><code>index</code>: Index of the file, starting at 1, in the same order as files appear in the multi-file metalink.</li> <li><code>servers</code>: A list of structs which contain the following keys.<ul> <li><code>uri</code>: Original URI.</li> <li><code>currentUri</code>: This is the URI currently used for downloading.   If redirection is involved, currentUri and uri may differ.</li> <li><code>downloadSpeed</code>: Download speed (byte/sec).</li> </ul> </li> </ul> <p>Original signature:</p> <pre><code>aria2.getServers([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to get servers from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The servers connected to a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getServers\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'index': u'1',\n              u'servers': [{u'currentUri': u'http://example.org/file',\n                            u'downloadSpeed': u'10467',\n                            u'uri': u'http://example.org/file'}]}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_servers(self, gid: str) -&gt; dict:\n    \"\"\"Return servers currently connected for a download.\n\n    This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The\n    response is an array of structs and contains the following keys. Values are strings.\n\n    - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file metalink.\n    - `servers`: A list of structs which contain the following keys.\n        - `uri`: Original URI.\n        - `currentUri`: This is the URI currently used for downloading.\n          If redirection is involved, currentUri and uri may differ.\n        - `downloadSpeed`: Download speed (byte/sec).\n\n    Original signature:\n\n        aria2.getServers([secret], gid)\n\n    Parameters:\n        gid: The download to get servers from.\n\n    Returns:\n        The servers connected to a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getServers\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'index': u'1',\n                      u'servers': [{u'currentUri': u'http://example.org/file',\n                                    u'downloadSpeed': u'10467',\n                                    u'uri': u'http://example.org/file'}]}]}\n    \"\"\"\n    return self.call(self.GET_SERVERS, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_session_info","title":"get_session_info","text":"<pre><code>get_session_info() -&gt; dict\n</code></pre> <p>Return session information.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A struct that contains the <code>sessionId</code> key, which is generated each time aria2 is invoked.</p> </li> </ul> <p>Original signature:</p> <pre><code>aria2.getSessionInfo([secret])\n</code></pre> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getSessionInfo\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_session_info(self) -&gt; dict:\n    \"\"\"Return session information.\n\n    Returns:\n        A struct that contains the `sessionId` key, which is generated each time aria2 is invoked.\n\n    Original signature:\n\n        aria2.getSessionInfo([secret])\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getSessionInfo\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}}\n    \"\"\"\n    return self.call(self.GET_SESSION_INFO)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_uris","title":"get_uris","text":"<pre><code>get_uris(gid: str) -&gt; dict\n</code></pre> <p>Return URIs used in a download.</p> <p>This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string.</p> <ul> <li><code>uri</code>: URI</li> <li><code>status</code>: 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue.</li> </ul> <p>Original signature:</p> <pre><code>aria2.getUris([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to list URIs of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The URIs used in a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.getUris\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [{u'status': u'used',\n              u'uri': u'http://example.org/file'}]}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_uris(self, gid: str) -&gt; dict:\n    \"\"\"Return URIs used in a download.\n\n    This method returns the URIs used in the download denoted by gid (string). The response is an array of\n    structs and it contains following keys. Values are string.\n\n    - `uri`: URI\n    - `status`: 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue.\n\n    Original signature:\n\n        aria2.getUris([secret], gid)\n\n    Parameters:\n        gid: The download to list URIs of.\n\n    Returns:\n        The URIs used in a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.getUris\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [{u'status': u'used',\n                      u'uri': u'http://example.org/file'}]}\n    \"\"\"\n    return self.call(self.GET_URIS, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return aria2 version and the list of enabled features.</p> <p>Original signature:</p> <pre><code>aria2.getVersion([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A struct that contains the following keys:</p> </li> <li> <code>str</code>           \u2013            <ul> <li><code>version</code>: Version number of aria2 as a string.</li> </ul> </li> <li> <code>str</code>           \u2013            <ul> <li><code>enabledFeatures</code>: List of enabled features. Each feature is given as a string.</li> </ul> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getVersion\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'enabledFeatures': [u'Async DNS',\n                                  u'BitTorrent',\n                                  u'Firefox3 Cookie',\n                                  u'GZip',\n                                  u'HTTPS',\n                                  u'Message Digest',\n                                  u'Metalink',\n                                  u'XML-RPC'],\n             u'version': u'1.11.0'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def get_version(self) -&gt; str:\n    \"\"\"Return aria2 version and the list of enabled features.\n\n    Original signature:\n\n        aria2.getVersion([secret])\n\n    Returns:\n        A struct that contains the following keys:\n\n        - `version`: Version number of aria2 as a string.\n        - `enabledFeatures`: List of enabled features. Each feature is given as a string.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"aria2.getVersion\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'enabledFeatures': [u'Async DNS',\n                                          u'BitTorrent',\n                                          u'Firefox3 Cookie',\n                                          u'GZip',\n                                          u'HTTPS',\n                                          u'Message Digest',\n                                          u'Metalink',\n                                          u'XML-RPC'],\n                     u'version': u'1.11.0'}}\n    \"\"\"\n    return self.call(self.GET_VERSION)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.list_methods","title":"list_methods","text":"<pre><code>list_methods() -&gt; list[str]\n</code></pre> <p>Return the available RPC methods.</p> <p>This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names.</p> <p>Original signature:</p> <pre><code>system.listMethods()\n</code></pre> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The list of available RPC methods.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listMethods\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [u'aria2.addUri',\n             u'aria2.addTorrent',\n ...\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def list_methods(self) -&gt; list[str]:\n    \"\"\"Return the available RPC methods.\n\n    This method returns all the available RPC methods in an array of string. Unlike other methods,\n    this method does not require secret token. This is safe because this method just returns the available\n    method names.\n\n    Original signature:\n\n        system.listMethods()\n\n    Returns:\n        The list of available RPC methods.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listMethods\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [u'aria2.addUri',\n                     u'aria2.addTorrent',\n         ...\n    \"\"\"\n    return self.call(self.LIST_METHODS)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.list_notifications","title":"list_notifications","text":"<pre><code>list_notifications() -&gt; list[str]\n</code></pre> <p>Return all the available RPC notifications.</p> <p>This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names.</p> <p>Original signature:</p> <pre><code>system.listNotifications()\n</code></pre> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The list of available RPC notifications.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listNotifications\"}\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': [u'aria2.onDownloadStart',\n             u'aria2.onDownloadPause',\n ...\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def list_notifications(self) -&gt; list[str]:\n    \"\"\"Return all the available RPC notifications.\n\n    This method returns all the available RPC notifications in an array of string. Unlike other methods,\n    this method does not require secret token. This is safe because this method just returns the available\n    notifications names.\n\n    Original signature:\n\n        system.listNotifications()\n\n    Returns:\n        The list of available RPC notifications.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\"jsonrpc\": \"2.0\", \"id\": \"qwer\", \"method\": \"system.listNotifications\"}\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': [u'aria2.onDownloadStart',\n                     u'aria2.onDownloadPause',\n         ...\n    \"\"\"\n    return self.call(self.LIST_NOTIFICATIONS)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.listen_to_notifications","title":"listen_to_notifications","text":"<pre><code>listen_to_notifications(\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,\n) -&gt; None\n</code></pre> <p>Start listening to aria2 notifications via WebSocket.</p> <p>This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification.</p> <p>Stop listening to notifications with the <code>stop_listening</code> method.</p> <p>Parameters:</p> <ul> <li> <code>on_download_start</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStart</code> event.</p> </li> <li> <code>on_download_pause</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadPause</code> event.</p> </li> <li> <code>on_download_stop</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadStop</code> event.</p> </li> <li> <code>on_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadComplete</code> event.</p> </li> <li> <code>on_download_error</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onDownloadError</code> event.</p> </li> <li> <code>on_bt_download_complete</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Callback for the <code>onBtDownloadComplete</code> event.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds.</p> </li> <li> <code>handle_signals</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def listen_to_notifications(\n    self,\n    on_download_start: Callable | None = None,\n    on_download_pause: Callable | None = None,\n    on_download_stop: Callable | None = None,\n    on_download_complete: Callable | None = None,\n    on_download_error: Callable | None = None,\n    on_bt_download_complete: Callable | None = None,\n    timeout: int = 5,\n    handle_signals: bool = True,  # noqa: FBT001,FBT002\n) -&gt; None:\n    \"\"\"Start listening to aria2 notifications via WebSocket.\n\n    This method opens a WebSocket connection to the server and wait for notifications (or events) to be received.\n    It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type\n    of notification.\n\n    Stop listening to notifications with the [`stop_listening`][aria2p.client.Client.stop_listening] method.\n\n    Parameters:\n        on_download_start: Callback for the `onDownloadStart` event.\n        on_download_pause: Callback for the `onDownloadPause` event.\n        on_download_stop: Callback for the `onDownloadStop` event.\n        on_download_complete: Callback for the `onDownloadComplete` event.\n        on_download_error: Callback for the `onDownloadError` event.\n        on_bt_download_complete: Callback for the `onBtDownloadComplete` event.\n        timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity\n            when stopping to listen. Default is 5 seconds.\n        handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT.\n    \"\"\"\n    self.listening = True\n    ws_server = self.ws_server\n    log_prefix = f\"Notifications ({ws_server})\"\n\n    logger.debug(f\"{log_prefix}: opening WebSocket with timeout={timeout}\")\n    try:\n        socket = websocket.create_connection(ws_server, timeout=timeout)\n    except (ConnectionRefusedError, ConnectionResetError):\n        logger.error(f\"{log_prefix}: connection refused. Is the server running?\")\n        return\n\n    callbacks = {\n        NOTIFICATION_START: on_download_start,\n        NOTIFICATION_PAUSE: on_download_pause,\n        NOTIFICATION_STOP: on_download_stop,\n        NOTIFICATION_COMPLETE: on_download_complete,\n        NOTIFICATION_ERROR: on_download_error,\n        NOTIFICATION_BT_COMPLETE: on_bt_download_complete,\n    }\n\n    stopped = SignalHandler([\"SIGTERM\", \"SIGINT\"]) if handle_signals else False\n\n    while not stopped:\n        logger.debug(f\"{log_prefix}: waiting for data over WebSocket\")\n        try:\n            message = socket.recv()\n        except websocket.WebSocketConnectionClosedException:\n            logger.error(f\"{log_prefix}: connection to server was closed. Is the server running?\")\n            break\n        except websocket.WebSocketTimeoutException:\n            logger.debug(f\"{log_prefix}: reached timeout ({timeout}s)\")\n        else:\n            notification = Notification.get_or_raise(json.loads(message))\n            logger.info(\n                f\"{log_prefix}: received {notification.type} with gid={notification.gid}\",\n            )\n            callback = callbacks.get(notification.type)\n            if callable(callback):\n                logger.debug(f\"{log_prefix}: calling {callback} with gid={notification.gid}\")\n                callback(notification.gid)\n            else:\n                logger.debug(f\"{log_prefix}: no callback given for type \" + notification.type)\n\n        if not self.listening:\n            logger.debug(f\"{log_prefix}: stopped listening\")\n            break\n\n    if stopped:\n        logger.debug(f\"{log_prefix}: stopped listening after receiving a signal\")\n        self.listening = False\n\n    logger.debug(f\"{log_prefix}: closing WebSocket\")\n    socket.close()\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.multicall","title":"multicall","text":"<pre><code>multicall(methods: list[dict]) -&gt; list[CallReturnType]\n</code></pre> <p>Call multiple methods in a single request.</p> <p>This methods encapsulates multiple method calls in a single request.</p> <p>Original signature:</p> <pre><code>system.multicall(methods)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>methods</code>               (<code>list[dict]</code>)           \u2013            <p>An array of structs. The structs contain two keys: <code>methodName</code> and <code>params</code>. - <code>methodName</code> is the method name to call and - <code>params</code> is array containing parameters to the method call.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[CallReturnType]</code>           \u2013            <p>An array of responses.</p> </li> <li> <code>list[CallReturnType]</code>           \u2013            <p>The elements will be either a one-item array containing the return value of the method call or a struct of fault</p> </li> <li> <code>list[CallReturnType]</code>           \u2013            <p>element if an encapsulated method call fails.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent.</p> <pre><code>&gt;&gt;&gt; import urllib2, json, base64\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"system.multicall\",\n...         \"params\": [\n...             [\n...                 {\n...                     \"methodName\": \"aria2.addUri\",\n...                     \"params\": [[\"http://example.org\"]],\n...                 },\n...                 {\n...                     \"methodName\": \"aria2.addTorrent\",\n...                     \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n...                 },\n...             ]\n...         ],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'0000000000000001'], [u'd2703803b52216d1']]}\n</code></pre> <p>JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification:</p> <pre><code>&gt;&gt;&gt; jsonreq = json.dumps(\n...     [\n...         {\n...             \"jsonrpc\": \"2.0\",\n...             \"id\": \"qwer\",\n...             \"method\": \"aria2.addUri\",\n...             \"params\": [[\"http://example.org\"]],\n...         },\n...         {\n...             \"jsonrpc\": \"2.0\",\n...             \"id\": \"asdf\",\n...             \"method\": \"aria2.addTorrent\",\n...             \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n...         },\n...     ]\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n[{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'0000000000000001'},\n {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}]\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def multicall(self, methods: list[dict]) -&gt; list[CallReturnType]:\n    \"\"\"Call multiple methods in a single request.\n\n    This methods encapsulates multiple method calls in a single request.\n\n    Original signature:\n\n        system.multicall(methods)\n\n    Parameters:\n        methods: An array of structs. The structs contain two keys: `methodName` and `params`.\n            - `methodName` is the method name to call and\n            - `params` is array containing parameters to the method call.\n\n    Returns:\n        An array of responses.\n        The elements will be either a one-item array containing the return value of the method call or a struct of fault\n        element if an encapsulated method call fails.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is\n        file.torrent.\n\n        &gt;&gt;&gt; import urllib2, json, base64\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"system.multicall\",\n        ...         \"params\": [\n        ...             [\n        ...                 {\n        ...                     \"methodName\": \"aria2.addUri\",\n        ...                     \"params\": [[\"http://example.org\"]],\n        ...                 },\n        ...                 {\n        ...                     \"methodName\": \"aria2.addTorrent\",\n        ...                     \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n        ...                 },\n        ...             ]\n        ...         ],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'0000000000000001'], [u'd2703803b52216d1']]}\n\n        JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification:\n\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     [\n        ...         {\n        ...             \"jsonrpc\": \"2.0\",\n        ...             \"id\": \"qwer\",\n        ...             \"method\": \"aria2.addUri\",\n        ...             \"params\": [[\"http://example.org\"]],\n        ...         },\n        ...         {\n        ...             \"jsonrpc\": \"2.0\",\n        ...             \"id\": \"asdf\",\n        ...             \"method\": \"aria2.addTorrent\",\n        ...             \"params\": [base64.b64encode(open(\"file.torrent\").read())],\n        ...         },\n        ...     ]\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'0000000000000001'},\n         {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}]\n    \"\"\"\n    return self.call(self.MULTICALL, [methods])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.multicall2","title":"multicall2","text":"<pre><code>multicall2(\n    calls: Multicalls2Type, insert_secret: bool = True\n) -&gt; CallReturnType\n</code></pre> <p>Call multiple methods in one request.</p> <p>A method equivalent to multicall, but with a simplified usage.</p> <p>Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2.</p> <p>With a classic multicall, you would write your params like:</p> <pre><code>[\n    {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]},\n    {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]},\n]\n</code></pre> <p>With multicall2, you can reduce the verbosity:</p> <pre><code>[\n    (client.REMOVE, [\"0000000000000001\"]),\n    (client.REMOVE, [\"2fa07b6e85c40205\"]),\n]\n</code></pre> Note <p>multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method.</p> <p>Parameters:</p> <ul> <li> <code>calls</code>               (<code>Multicalls2Type</code>)           \u2013            <p>List of tuples composed of method name and parameters.</p> </li> <li> <code>insert_secret</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to insert the secret token in the parameters or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CallReturnType</code>           \u2013            <p>The answer from the server, as a Python object (dict / list / str / int).</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def multicall2(self, calls: Multicalls2Type, insert_secret: bool = True) -&gt; CallReturnType:  # noqa: FBT001,FBT002\n    \"\"\"Call multiple methods in one request.\n\n    A method equivalent to multicall, but with a simplified usage.\n\n    Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you\n    to provide the values only, in tuples of length 2.\n\n    With a classic multicall, you would write your params like:\n\n        [\n            {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]},\n            {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]},\n        ]\n\n    With multicall2, you can reduce the verbosity:\n\n        [\n            (client.REMOVE, [\"0000000000000001\"]),\n            (client.REMOVE, [\"2fa07b6e85c40205\"]),\n        ]\n\n    Note:\n        multicall2 is not part of the JSON-RPC protocol specification.\n        It is implemented here as a simple convenience method.\n\n    Parameters:\n        calls: List of tuples composed of method name and parameters.\n        insert_secret: Whether to insert the secret token in the parameters or not.\n\n    Returns:\n        The answer from the server, as a Python object (dict / list / str / int).\n    \"\"\"\n    multicall_params = []\n\n    for method, params in calls:\n        params = self.get_params(*params)  # noqa: PLW2901\n        if insert_secret and self.secret and method.startswith(\"aria2.\"):\n            params.insert(0, f\"token:{self.secret}\")\n        multicall_params.append({\"methodName\": method, \"params\": params})\n\n    payload: str = self.get_payload(self.MULTICALL, [multicall_params])  # type: ignore\n    return self.res_or_raise(self.post(payload))\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.pause","title":"pause","text":"<pre><code>pause(gid: str) -&gt; str\n</code></pre> <p>Pause a download.</p> <p>This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the <code>unpause()</code> method.</p> <p>Original signature:</p> <pre><code>aria2.pause([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to pause.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the paused download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def pause(self, gid: str) -&gt; str:\n    \"\"\"Pause a download.\n\n    This method pauses the download denoted by gid (string).\n    The status of paused download becomes paused.\n    If the download was active, the download is placed in the front of waiting queue.\n    While the status is paused, the download is not started.\n    To change status to waiting, use the [`unpause()`][aria2p.client.Client.unpause] method.\n\n    Original signature:\n\n        aria2.pause([secret], gid)\n\n    Parameters:\n        gid: The download to pause.\n\n    Returns:\n        The GID of the paused download.\n    \"\"\"\n    return self.call(self.PAUSE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.pause_all","title":"pause_all","text":"<pre><code>pause_all() -&gt; str\n</code></pre> <p>Pause all active/waiting downloads.</p> <p>This method is equal to calling <code>pause()</code> for every active/waiting download.</p> <p>Original signature:</p> <pre><code>aria2.pauseAll([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def pause_all(self) -&gt; str:\n    \"\"\"Pause all active/waiting downloads.\n\n    This method is equal to calling [`pause()`][aria2p.client.Client.pause] for every active/waiting download.\n\n    Original signature:\n\n        aria2.pauseAll([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.PAUSE_ALL)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.post","title":"post","text":"<pre><code>post(payload: str) -&gt; dict\n</code></pre> <p>Send a POST request to the server.</p> <p>The response is a JSON string, which we then load as a Python object.</p> <p>Parameters:</p> <ul> <li> <code>payload</code>               (<code>str</code>)           \u2013            <p>The payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The answer from the server, as a Python dictionary.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def post(self, payload: str) -&gt; dict:\n    \"\"\"Send a POST request to the server.\n\n    The response is a JSON string, which we then load as a Python object.\n\n    Parameters:\n        payload: The payload / data to send to the remote process. It contains the following key-value pairs:\n            \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional).\n\n    Returns:\n        The answer from the server, as a Python dictionary.\n    \"\"\"\n    return requests.post(self.server, data=payload, timeout=self.timeout).json()\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.purge_download_result","title":"purge_download_result","text":"<pre><code>purge_download_result() -&gt; str\n</code></pre> <p>Purge completed/error/removed downloads from memory.</p> <p>Original signature:</p> <pre><code>aria2.purgeDownloadResult([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def purge_download_result(self) -&gt; str:\n    \"\"\"Purge completed/error/removed downloads from memory.\n\n    Original signature:\n\n        aria2.purgeDownloadResult([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.PURGE_DOWNLOAD_RESULT)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.remove","title":"remove","text":"<pre><code>remove(gid: str) -&gt; str\n</code></pre> <p>Remove a download.</p> <p>This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download.</p> <p>Original signature:</p> <pre><code>aria2.remove([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the removed download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples remove a download with GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.remove\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; c.read()\n'{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def remove(self, gid: str) -&gt; str:\n    \"\"\"Remove a download.\n\n    This method removes the download denoted by gid (string). If the specified download is in progress,\n    it is first stopped. The status of the removed download becomes removed. This method returns GID of\n    removed download.\n\n    Original signature:\n\n        aria2.remove([secret], gid)\n\n    Parameters:\n        gid: The download to remove.\n\n    Returns:\n        The GID of the removed download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples remove a download with GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.remove\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; c.read()\n        '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}'\n    \"\"\"\n    return self.call(self.REMOVE, [gid])  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.remove_download_result","title":"remove_download_result","text":"<pre><code>remove_download_result(gid: str) -&gt; str\n</code></pre> <p>Remove a completed/error/removed download from memory.</p> <p>Original signature:</p> <pre><code>aria2.removeDownloadResult([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download result to remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> for success.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following examples remove the download result of the download GID#0000000000000001.</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.removeDownloadResult\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def remove_download_result(self, gid: str) -&gt; str:\n    \"\"\"Remove a completed/error/removed download from memory.\n\n    Original signature:\n\n        aria2.removeDownloadResult([secret], gid)\n\n    Parameters:\n        gid: The download result to remove.\n\n    Returns:\n        `\"OK\"` for success.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following examples remove the download result of the download GID#0000000000000001.\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.removeDownloadResult\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'}\n    \"\"\"\n    return self.call(self.REMOVE_DOWNLOAD_RESULT, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.res_or_raise","title":"res_or_raise  <code>staticmethod</code>","text":"<pre><code>res_or_raise(response: dict) -&gt; CallReturnType\n</code></pre> <p>Return the result of the response, or raise an error with code and message.</p> <p>Parameters:</p> <ul> <li> <code>response</code>               (<code>dict</code>)           \u2013            <p>A response sent by the server.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CallReturnType</code>           \u2013            <p>The \"result\" value of the response.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When the response contains an error (client/server error). See the <code>ClientException</code> class.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef res_or_raise(response: dict) -&gt; CallReturnType:\n    \"\"\"Return the result of the response, or raise an error with code and message.\n\n    Parameters:\n        response: A response sent by the server.\n\n    Returns:\n        The \"result\" value of the response.\n\n    Raises:\n        ClientException: When the response contains an error (client/server error).\n            See the [`ClientException`][aria2p.client.ClientException] class.\n    \"\"\"\n    if \"error\" in response:\n        raise Client.response_as_exception(response)\n    return response[\"result\"]\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.response_as_exception","title":"response_as_exception  <code>staticmethod</code>","text":"<pre><code>response_as_exception(response: dict) -&gt; ClientException\n</code></pre> <p>Transform the response as a <code>ClientException</code> instance and return it.</p> <p>Parameters:</p> <ul> <li> <code>response</code>               (<code>dict</code>)           \u2013            <p>A response sent by the server.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ClientException</code>           \u2013            <p>An instance of the <code>ClientException</code> class.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef response_as_exception(response: dict) -&gt; ClientException:\n    \"\"\"Transform the response as a [`ClientException`][aria2p.client.ClientException] instance and return it.\n\n    Parameters:\n        response: A response sent by the server.\n\n    Returns:\n        An instance of the [`ClientException`][aria2p.client.ClientException] class.\n    \"\"\"\n    return ClientException(response[\"error\"][\"code\"], response[\"error\"][\"message\"])\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.save_session","title":"save_session","text":"<pre><code>save_session() -&gt; str\n</code></pre> <p>Save the current session to a file.</p> <p>This method saves the current session to a file specified by the <code>--save-session</code> option.</p> <p>Original signature:</p> <pre><code>aria2.saveSession([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code> if it succeeds.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def save_session(self) -&gt; str:\n    \"\"\"Save the current session to a file.\n\n    This method saves the current session to a file specified\n    by the [`--save-session`][aria2p.options.Options.save_session] option.\n\n    Original signature:\n\n        aria2.saveSession([secret])\n\n    Returns:\n        `\"OK\"` if it succeeds.\n    \"\"\"\n    return self.call(self.SAVE_SESSION)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.shutdown","title":"shutdown","text":"<pre><code>shutdown() -&gt; str\n</code></pre> <p>Shutdown aria2.</p> <p>Original signature:</p> <pre><code>aria2.shutdown([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def shutdown(self) -&gt; str:\n    \"\"\"Shutdown aria2.\n\n    Original signature:\n\n        aria2.shutdown([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.SHUTDOWN)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.stop_listening","title":"stop_listening","text":"<pre><code>stop_listening() -&gt; None\n</code></pre> <p>Stop listening to notifications.</p> <p>Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to <code>Client.listen_to_notifications</code>.</p> Source code in <code>src/aria2p/client.py</code> <pre><code>def stop_listening(self) -&gt; None:\n    \"\"\"Stop listening to notifications.\n\n    Although this method returns instantly, the actual listening loop can take some time to break out,\n    depending on the timeout that was given to [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications].\n    \"\"\"\n    self.listening = False\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.tell_active","title":"tell_active","text":"<pre><code>tell_active(keys: list[str] | None = None) -&gt; list[dict]\n</code></pre> <p>Return the list of active downloads.</p> <p>Original signature:</p> <pre><code>aria2.tellActive([secret][, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return. Please refer to the <code>tell_status()</code> method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>An array of the same structs as returned by the <code>tell_status()</code> method.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_active(self, keys: list[str] | None = None) -&gt; list[dict]:\n    \"\"\"Return the list of active downloads.\n\n    Original signature:\n\n        aria2.tellActive([secret][, keys])\n\n    Parameters:\n        keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method.\n\n    Returns:\n        An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method.\n    \"\"\"\n    return self.call(self.TELL_ACTIVE, [keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.tell_status","title":"tell_status","text":"<pre><code>tell_status(\n    gid: str, keys: list[str] | None = None\n) -&gt; dict\n</code></pre> <p>Tell status of a download.</p> <p>This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, <code>tell_status(\"0000000000000001\", [\"gid\", \"status\"])</code> returns the gid and status keys only. The response is a struct and contains following keys. Values are strings.</p> <ul> <li><code>gid</code>: GID of the download.</li> <li><code>status</code>: active for currently downloading/seeding downloads. waiting for downloads in the queue; download is   not started. paused for paused downloads. error for downloads that were stopped because of error.   complete for stopped and completed downloads. removed for the downloads removed by user.</li> <li><code>totalLength</code>: Total length of the download in bytes.</li> <li><code>completedLength</code>: Completed length of the download in bytes.</li> <li><code>uploadLength</code>: Uploaded length of the download in bytes.</li> <li><code>bitfield</code>: Hexadecimal representation of the download progress. The highest bit corresponds to the piece at   index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing   pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key   will not be included in the response.</li> <li><code>downloadSpeed</code>: Download speed of this download measured in bytes/sec.</li> <li><code>uploadSpeed</code>: Upload speed of this download measured in bytes/sec.</li> <li><code>infoHash</code>: InfoHash. BitTorrent only.</li> <li><code>numSeeders</code>: The number of seeders aria2 has connected to. BitTorrent only.</li> <li><code>seeder</code> true if the local endpoint is a seeder. Otherwise false. BitTorrent only.</li> <li><code>pieceLength</code>: Piece length in bytes.</li> <li><code>numPieces</code>: The number of pieces.</li> <li><code>connections</code>: The number of peers/servers aria2 has connected to.</li> <li><code>errorCode</code>: The code of the last error for this item, if any. The value is a string. The error codes are defined   in the EXIT STATUS section. This value is only available for stopped/completed downloads.</li> <li><code>errorMessage</code>: The (hopefully) human readable error message associated to errorCode.</li> <li><code>followedBy</code>: List of GIDs which are generated as the result of this download. For example, when aria2 downloads a   Metalink file, it generates downloads described in the Metalink   (see the <code>--follow-metalink</code> option).   This value is useful to track auto-generated downloads. If there are no such downloads,   this key will not be included in the response.</li> <li><code>following</code>: The reverse link for followedBy.   A download included in followedBy has this object's GID in its following value.</li> <li><code>belongsTo</code>: GID of a parent download. Some downloads are a part of another download. For example, if a file in a   Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If   this download has no parent, this key will not be included in the response.</li> <li><code>dir</code>:Directory to save files.</li> <li><code>files</code>: Return the list of files.   The elements of this list are the same structs used in <code>get_files()</code> method.</li> <li><code>bittorrent</code>: Struct which contains information retrieved from the .torrent (file). BitTorrent only.   It contains the following keys:<ul> <li><code>announceList</code>: List of lists of announce URIs. If the torrent contains announce and no announce-list, announce   is converted to the announce-list format.</li> <li><code>comment</code>: The comment of the torrent. comment.utf-8 is used if available.</li> <li><code>creationDate</code>: The creation time of the torrent. The value is an integer since the epoch, measured in seconds.</li> <li><code>mode</code>: File mode of the torrent. The value is either single or multi.</li> <li><code>info</code>: Struct which contains data from Info dictionary. It contains following keys.<ul> <li><code>name</code>: name in info dictionary. name.utf-8 is used if available.</li> </ul> </li> </ul> </li> <li><code>verifiedLength</code>: The number of verified number of bytes while the files are being hash checked. This key exists only   when this download is being hash checked.</li> <li><code>verifyIntegrityPending</code>: true if this download is waiting for the hash check in a queue.   This key exists only when this download is in the queue.</li> </ul> <p>Original signature:</p> <pre><code>aria2.tellStatus([secret], gid[, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to tell status of.</p> </li> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The details of a download.</p> </li> </ul> <p>Examples:</p> <p>Original JSON-RPC Example</p> <p>The following example gets information about a download with GID#0000000000000001:</p> <pre><code>&gt;&gt;&gt; import urllib2, json\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.tellStatus\",\n...         \"params\": [\"0000000000000001\"],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'bitfield': u'0000000000',\n             u'completedLength': u'901120',\n             u'connections': u'1',\n             u'dir': u'/downloads',\n             u'downloadSpeed': u'15158',\n             u'files': [{u'index': u'1',\n                         u'length': u'34896138',\n                         u'completedLength': u'34896138',\n                         u'path': u'/downloads/file',\n                         u'selected': u'true',\n                         u'uris': [{u'status': u'used',\n                                    u'uri': u'http://example.org/file'}]}],\n             u'gid': u'0000000000000001',\n             u'numPieces': u'34',\n             u'pieceLength': u'1048576',\n             u'status': u'active',\n             u'totalLength': u'34896138',\n             u'uploadLength': u'0',\n             u'uploadSpeed': u'0'}}\n</code></pre> <p>The following example gets only specific keys:</p> <pre><code>&gt;&gt;&gt; jsonreq = json.dumps(\n...     {\n...         \"jsonrpc\": \"2.0\",\n...         \"id\": \"qwer\",\n...         \"method\": \"aria2.tellStatus\",\n...         \"params\": [\n...             \"0000000000000001\",\n...             [\"gid\", \"totalLength\", \"completedLength\"],\n...         ],\n...     }\n... )\n&gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n&gt;&gt;&gt; pprint(json.loads(c.read()))\n{u'id': u'qwer',\n u'jsonrpc': u'2.0',\n u'result': {u'completedLength': u'5701632',\n             u'gid': u'0000000000000001',\n             u'totalLength': u'34896138'}}\n</code></pre> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_status(self, gid: str, keys: list[str] | None = None) -&gt; dict:\n    \"\"\"Tell status of a download.\n\n    This method returns the progress of the download denoted by gid (string). keys is an array of strings. If\n    specified, the response contains only keys in the keys array. If keys is empty or omitted, the response\n    contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For\n    example, `tell_status(\"0000000000000001\", [\"gid\", \"status\"])` returns the gid and status keys only. The\n    response is a struct and contains following keys. Values are strings.\n\n    - `gid`: GID of the download.\n    - `status`: active for currently downloading/seeding downloads. waiting for downloads in the queue; download is\n      not started. paused for paused downloads. error for downloads that were stopped because of error.\n      complete for stopped and completed downloads. removed for the downloads removed by user.\n    - `totalLength`: Total length of the download in bytes.\n    - `completedLength`: Completed length of the download in bytes.\n    - `uploadLength`: Uploaded length of the download in bytes.\n    - `bitfield`: Hexadecimal representation of the download progress. The highest bit corresponds to the piece at\n      index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing\n      pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key\n      will not be included in the response.\n    - `downloadSpeed`: Download speed of this download measured in bytes/sec.\n    - `uploadSpeed`: Upload speed of this download measured in bytes/sec.\n    - `infoHash`: InfoHash. BitTorrent only.\n    - `numSeeders`: The number of seeders aria2 has connected to. BitTorrent only.\n    - `seeder` true if the local endpoint is a seeder. Otherwise false. BitTorrent only.\n    - `pieceLength`: Piece length in bytes.\n    - `numPieces`: The number of pieces.\n    - `connections`: The number of peers/servers aria2 has connected to.\n    - `errorCode`: The code of the last error for this item, if any. The value is a string. The error codes are defined\n      in the EXIT STATUS section. This value is only available for stopped/completed downloads.\n    - `errorMessage`: The (hopefully) human readable error message associated to errorCode.\n    - `followedBy`: List of GIDs which are generated as the result of this download. For example, when aria2 downloads a\n      Metalink file, it generates downloads described in the Metalink\n      (see the [`--follow-metalink`][aria2p.options.Options.follow_metalink] option).\n      This value is useful to track auto-generated downloads. If there are no such downloads,\n      this key will not be included in the response.\n    - `following`: The reverse link for followedBy.\n      A download included in followedBy has this object's GID in its following value.\n    - `belongsTo`: GID of a parent download. Some downloads are a part of another download. For example, if a file in a\n      Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If\n      this download has no parent, this key will not be included in the response.\n    - `dir`:Directory to save files.\n    - `files`: Return the list of files.\n      The elements of this list are the same structs used in [`get_files()`][aria2p.client.Client.get_files] method.\n    - `bittorrent`: Struct which contains information retrieved from the .torrent (file). BitTorrent only.\n      It contains the following keys:\n        - `announceList`: List of lists of announce URIs. If the torrent contains announce and no announce-list, announce\n          is converted to the announce-list format.\n        - `comment`: The comment of the torrent. comment.utf-8 is used if available.\n        - `creationDate`: The creation time of the torrent. The value is an integer since the epoch, measured in seconds.\n        - `mode`: File mode of the torrent. The value is either single or multi.\n        - `info`: Struct which contains data from Info dictionary. It contains following keys.\n            - `name`: name in info dictionary. name.utf-8 is used if available.\n    - `verifiedLength`: The number of verified number of bytes while the files are being hash checked. This key exists only\n      when this download is being hash checked.\n    - `verifyIntegrityPending`: true if this download is waiting for the hash check in a queue.\n      This key exists only when this download is in the queue.\n\n    Original signature:\n\n        aria2.tellStatus([secret], gid[, keys])\n\n    Parameters:\n        gid: The download to tell status of.\n        keys: The keys to return.\n\n    Returns:\n        The details of a download.\n\n    Examples:\n        **Original JSON-RPC Example**\n\n        The following example gets information about a download with GID#0000000000000001:\n\n        &gt;&gt;&gt; import urllib2, json\n        &gt;&gt;&gt; from pprint import pprint\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.tellStatus\",\n        ...         \"params\": [\"0000000000000001\"],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'bitfield': u'0000000000',\n                     u'completedLength': u'901120',\n                     u'connections': u'1',\n                     u'dir': u'/downloads',\n                     u'downloadSpeed': u'15158',\n                     u'files': [{u'index': u'1',\n                                 u'length': u'34896138',\n                                 u'completedLength': u'34896138',\n                                 u'path': u'/downloads/file',\n                                 u'selected': u'true',\n                                 u'uris': [{u'status': u'used',\n                                            u'uri': u'http://example.org/file'}]}],\n                     u'gid': u'0000000000000001',\n                     u'numPieces': u'34',\n                     u'pieceLength': u'1048576',\n                     u'status': u'active',\n                     u'totalLength': u'34896138',\n                     u'uploadLength': u'0',\n                     u'uploadSpeed': u'0'}}\n\n        The following example gets only specific keys:\n\n        &gt;&gt;&gt; jsonreq = json.dumps(\n        ...     {\n        ...         \"jsonrpc\": \"2.0\",\n        ...         \"id\": \"qwer\",\n        ...         \"method\": \"aria2.tellStatus\",\n        ...         \"params\": [\n        ...             \"0000000000000001\",\n        ...             [\"gid\", \"totalLength\", \"completedLength\"],\n        ...         ],\n        ...     }\n        ... )\n        &gt;&gt;&gt; c = urllib2.urlopen(\"http://localhost:6800/jsonrpc\", jsonreq)\n        &gt;&gt;&gt; pprint(json.loads(c.read()))\n        {u'id': u'qwer',\n         u'jsonrpc': u'2.0',\n         u'result': {u'completedLength': u'5701632',\n                     u'gid': u'0000000000000001',\n                     u'totalLength': u'34896138'}}\n    \"\"\"\n    return self.call(self.TELL_STATUS, [gid, keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.tell_stopped","title":"tell_stopped","text":"<pre><code>tell_stopped(\n    offset: int, num: int, keys: list[str] | None = None\n) -&gt; list[dict]\n</code></pre> <p>Return the list of stopped downloads.</p> <p>This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download.</p> <p>Original signature:</p> <pre><code>aria2.tellStopped([secret], offset, num[, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>)           \u2013            <p>Same semantics as described in the <code>tell_waiting()</code> method.</p> </li> <li> <code>num</code>               (<code>int</code>)           \u2013            <p>An integer to specify the maximum number of downloads to be returned.</p> </li> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return. Please refer to the <code>tell_status()</code> method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>An array of the same structs as returned by the <code>tell_status()</code> method.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_stopped(self, offset: int, num: int, keys: list[str] | None = None) -&gt; list[dict]:\n    \"\"\"Return the list of stopped downloads.\n\n    This method returns a list of stopped downloads. offset is an integer and specifies the offset from the\n    least recently stopped download.\n\n    Original signature:\n\n        aria2.tellStopped([secret], offset, num[, keys])\n\n    Parameters:\n        offset: Same semantics as described in the [`tell_waiting()`][aria2p.client.Client.tell_waiting] method.\n        num: An integer to specify the maximum number of downloads to be returned.\n        keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method.\n\n    Returns:\n        An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method.\n    \"\"\"\n    return self.call(self.TELL_STOPPED, [offset, num, keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.tell_waiting","title":"tell_waiting","text":"<pre><code>tell_waiting(\n    offset: int, num: int, keys: list[str] | None = None\n) -&gt; list[dict]\n</code></pre> <p>Return the list of waiting downloads.</p> <p>This method returns a list of waiting downloads, including paused ones.</p> <p>Original signature:</p> <pre><code>aria2.tellWaiting([secret], offset, num[, keys])\n</code></pre> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>)           \u2013            <p>An integer to specify the offset from the download waiting at the front. If <code>offset</code> is a positive integer, this method returns downloads in the range of [<code>offset</code>, <code>offset</code> + <code>num</code>). <code>offset</code> can be a negative integer. <code>offset == -1</code> points last download in the waiting queue and <code>offset == -2</code> points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. <code>tell_waiting(0, 1)</code> returns <code>[\"A\"]</code>. <code>tell_waiting(1, 2)</code> returns <code>[\"B\", \"C\"]</code>. <code>tell_waiting(-1, 2)</code> returns <code>[\"C\", \"B\"]</code>.</p> </li> <li> <code>num</code>               (<code>int</code>)           \u2013            <p>An integer to specify the maximum number of downloads to be returned.</p> </li> <li> <code>keys</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The keys to return. Please refer to the <code>tell_status()</code> method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>An array of the same structs as returned by <code>tell_status()</code> method.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def tell_waiting(self, offset: int, num: int, keys: list[str] | None = None) -&gt; list[dict]:\n    \"\"\"Return the list of waiting downloads.\n\n    This method returns a list of waiting downloads, including paused ones.\n\n    Original signature:\n\n        aria2.tellWaiting([secret], offset, num[, keys])\n\n    Parameters:\n        offset: An integer to specify the offset from the download waiting at the front.\n            If `offset` is a positive integer, this method returns downloads in the range of [`offset`, `offset` + `num`).\n            `offset` can be a negative integer. `offset == -1` points last download in the waiting queue and `offset == -2`\n            points the download before the last download, and so on. Downloads in the response are in reversed order then.\n            For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. `tell_waiting(0, 1)`\n            returns `[\"A\"]`. `tell_waiting(1, 2)` returns `[\"B\", \"C\"]`. `tell_waiting(-1, 2)` returns `[\"C\", \"B\"]`.\n        num: An integer to specify the maximum number of downloads to be returned.\n        keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method.\n\n    Returns:\n        An array of the same structs as returned by [`tell_status()`][aria2p.client.Client.tell_status] method.\n    \"\"\"\n    return self.call(self.TELL_WAITING, [offset, num, keys])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.unpause","title":"unpause","text":"<pre><code>unpause(gid: str) -&gt; str\n</code></pre> <p>Resume a download.</p> <p>This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download.</p> <p>Original signature:</p> <pre><code>aria2.unpause([secret], gid)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The download to resume.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The GID of the resumed download.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def unpause(self, gid: str) -&gt; str:\n    \"\"\"Resume a download.\n\n    This method changes the status of the download denoted by gid (string) from paused to waiting,\n    making the download eligible to be restarted. This method returns the GID of the unpaused download.\n\n    Original signature:\n\n        aria2.unpause([secret], gid)\n\n    Parameters:\n        gid: The download to resume.\n\n    Returns:\n        The GID of the resumed download.\n    \"\"\"\n    return self.call(self.UNPAUSE, [gid])  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Client.unpause_all","title":"unpause_all","text":"<pre><code>unpause_all() -&gt; str\n</code></pre> <p>Resume all downloads.</p> <p>This method is equal to calling <code>unpause()</code> for every active/waiting download.</p> <p>Original signature:</p> <pre><code>aria2.unpauseAll([secret])\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>\"OK\"</code>.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def unpause_all(self) -&gt; str:\n    \"\"\"Resume all downloads.\n\n    This method is equal to calling [`unpause()`][aria2p.client.Client.unpause] for every active/waiting download.\n\n    Original signature:\n\n        aria2.unpauseAll([secret])\n\n    Returns:\n        `\"OK\"`.\n    \"\"\"\n    return self.call(self.UNPAUSE_ALL)  # type: ignore\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.ClientException","title":"ClientException","text":"<pre><code>ClientException(code: int, message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>An exception specific to JSON-RPC errors.</p> <p>Parameters:</p> <ul> <li> <code>code</code>               (<code>int</code>)           \u2013            <p>The error code.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The error message.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def __init__(self, code: int, message: str) -&gt; None:\n    \"\"\"Initialize the exception.\n\n    Parameters:\n        code: The error code.\n        message: The error message.\n    \"\"\"\n    super().__init__()\n    if code in JSONRPC_CODES:\n        message = f\"{JSONRPC_CODES[code]}\\n{message}\"\n\n    self.code = code\n    self.message = message\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Notification","title":"Notification","text":"<pre><code>Notification(event_type: str, gid: str)\n</code></pre> <p>A helper class for notifications.</p> <p>You should not need to use this class. It simply provides methods to instantiate a notification with a message received from the server through a WebSocket, or to raise a ClientException if the message is invalid.</p> <p>Parameters:</p> <ul> <li> <code>event_type</code>               (<code>str</code>)           \u2013            <p>The notification type. Possible types are available in the NOTIFICATION_TYPES variable.</p> </li> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>The GID of the download related to the notification.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_message</code>             \u2013              <p>Return an instance of Notification.</p> </li> <li> <code>get_or_raise</code>             \u2013              <p>Raise a ClientException when the message is invalid or return a Notification instance.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>def __init__(self, event_type: str, gid: str) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        event_type: The notification type. Possible types are available in the NOTIFICATION_TYPES variable.\n        gid: The GID of the download related to the notification.\n    \"\"\"\n    self.type = event_type\n    self.gid = gid\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Notification.from_message","title":"from_message  <code>staticmethod</code>","text":"<pre><code>from_message(message: dict) -&gt; Notification\n</code></pre> <p>Return an instance of Notification.</p> <p>This method expects a valid message (not containing errors).</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>dict</code>)           \u2013            <p>A valid message received over WebSocket.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Notification</code>           \u2013            <p>A Notification instance.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef from_message(message: dict) -&gt; Notification:\n    \"\"\"Return an instance of Notification.\n\n    This method expects a valid message (not containing errors).\n\n    Parameters:\n        message: A valid message received over WebSocket.\n\n    Returns:\n        A Notification instance.\n    \"\"\"\n    return Notification(event_type=message[\"method\"], gid=message[\"params\"][0][\"gid\"])\n</code></pre>"},{"location":"reference/aria2p/client/#aria2p.client.Notification.get_or_raise","title":"get_or_raise  <code>staticmethod</code>","text":"<pre><code>get_or_raise(message: dict) -&gt; Notification\n</code></pre> <p>Raise a ClientException when the message is invalid or return a Notification instance.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>dict</code>)           \u2013            <p>The JSON-loaded message received over WebSocket.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Notification</code>           \u2013            <p>A Notification instance if the message is valid.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When the message contains an error.</p> </li> </ul> Source code in <code>src/aria2p/client.py</code> <pre><code>@staticmethod\ndef get_or_raise(message: dict) -&gt; Notification:\n    \"\"\"Raise a ClientException when the message is invalid or return a Notification instance.\n\n    Parameters:\n        message: The JSON-loaded message received over WebSocket.\n\n    Returns:\n        A Notification instance if the message is valid.\n\n    Raises:\n        ClientException: When the message contains an error.\n    \"\"\"\n    if \"error\" in message:\n        raise Client.response_as_exception(message)\n    return Notification.from_message(message)\n</code></pre>"},{"location":"reference/aria2p/debug/","title":"aria2p.debug","text":""},{"location":"reference/aria2p/debug/#aria2p.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>           \u2013            <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>           \u2013            <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>             \u2013              <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>             \u2013              <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/aria2p/debug/#aria2p.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    interpreter_path: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>               (<code>str</code>)           \u2013            <p>Python interpreter name.</p> </li> <li> <code>interpreter_path</code>               (<code>str</code>)           \u2013            <p>Path to Python executable.</p> </li> <li> <code>interpreter_version</code>               (<code>str</code>)           \u2013            <p>Python interpreter version.</p> </li> <li> <code>packages</code>               (<code>list[Package]</code>)           \u2013            <p>Installed packages.</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Operating System.</p> </li> <li> <code>variables</code>               (<code>list[Variable]</code>)           \u2013            <p>Environment variables.</p> </li> </ul>"},{"location":"reference/aria2p/debug/#aria2p.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Environment.interpreter_path","title":"interpreter_path  <code>instance-attribute</code>","text":"<pre><code>interpreter_path: str\n</code></pre> <p>Path to Python executable.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Package version.</p> </li> </ul>"},{"location":"reference/aria2p/debug/#aria2p.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Variable name.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Variable value.</p> </li> </ul>"},{"location":"reference/aria2p/debug/#aria2p.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/aria2p/debug/#aria2p.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Environment information.</p> </li> </ul> Source code in <code>src/aria2p/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"aria2p\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"ARIA2P\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        interpreter_path=sys.executable,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/aria2p/debug/#aria2p.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'aria2p') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>               (<code>str</code>, default:                   <code>'aria2p'</code> )           \u2013            <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A version number.</p> </li> </ul> Source code in <code>src/aria2p/debug.py</code> <pre><code>def get_version(dist: str = \"aria2p\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/aria2p/debug/#aria2p.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/aria2p/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version} ({info.interpreter_path})\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/aria2p/downloads/","title":"aria2p.downloads","text":""},{"location":"reference/aria2p/downloads/#aria2p.downloads","title":"downloads","text":"<p>This module defines the BitTorrent, File and Download classes.</p> <p>They respectively hold structured information about torrent files, files and downloads in aria2c.</p> <p>Classes:</p> <ul> <li> <code>BitTorrent</code>           \u2013            <p>Information retrieved from a torrent file.</p> </li> <li> <code>Download</code>           \u2013            <p>Class containing all information about a download, as retrieved with the client.</p> </li> <li> <code>File</code>           \u2013            <p>Information about a download's file.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.BitTorrent","title":"BitTorrent","text":"<pre><code>BitTorrent(struct: dict)\n</code></pre> <p>Information retrieved from a torrent file.</p> <p>Parameters:</p> <ul> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>announce_list</code>               (<code>list[list[str]] | None</code>)           \u2013            <p>List of lists of announce URIs.</p> </li> <li> <code>comment</code>               (<code>str | None</code>)           \u2013            <p>Return the comment of the torrent.</p> </li> <li> <code>creation_date</code>               (<code>datetime</code>)           \u2013            <p>Return the creation time of the torrent.</p> </li> <li> <code>info</code>               (<code>dict | None</code>)           \u2013            <p>Struct which contains data from Info dictionary.</p> </li> <li> <code>mode</code>               (<code>str | None</code>)           \u2013            <p>File mode of the torrent.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def __init__(self, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.BitTorrent.announce_list","title":"announce_list  <code>property</code>","text":"<pre><code>announce_list: list[list[str]] | None\n</code></pre> <p>List of lists of announce URIs.</p> <p>If the torrent contains announce and no announce-list, announce is converted to the announce-list format.</p> <p>Returns:</p> <ul> <li> <code>list[list[str]] | None</code>           \u2013            <p>The announce URIs.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.BitTorrent.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str | None\n</code></pre> <p>Return the comment of the torrent.</p> <p>comment.utf-8 is used if available.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The torrent's comment.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.BitTorrent.creation_date","title":"creation_date  <code>property</code>","text":"<pre><code>creation_date: datetime\n</code></pre> <p>Return the creation time of the torrent.</p> <p>The value is an integer since the epoch, measured in seconds.</p> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The creation date.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.BitTorrent.info","title":"info  <code>property</code>","text":"<pre><code>info: dict | None\n</code></pre> <p>Struct which contains data from Info dictionary.</p> <p>It contains the <code>name</code> key: name in info dictionary. <code>name.utf-8</code> is used if available.</p> <p>Returns:</p> <ul> <li> <code>dict | None</code>           \u2013            <p>The torrent's info.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.BitTorrent.mode","title":"mode  <code>property</code>","text":"<pre><code>mode: str | None\n</code></pre> <p>File mode of the torrent.</p> <p>The value is either single or multi.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The file mode.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download","title":"Download","text":"<pre><code>Download(api: API, struct: dict)\n</code></pre> <p>Class containing all information about a download, as retrieved with the client.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The reference to an <code>API</code> instance.</p> </li> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>completed_length_string</code>             \u2013              <p>Return the completed length as string.</p> </li> <li> <code>copy_files</code>             \u2013              <p>Copy downloaded files to another directory.</p> </li> <li> <code>download_speed_string</code>             \u2013              <p>Return the download speed as string.</p> </li> <li> <code>eta_string</code>             \u2013              <p>Return the Estimated Time of Arrival as a string.</p> </li> <li> <code>move</code>             \u2013              <p>Move the download in the queue, relatively.</p> </li> <li> <code>move_down</code>             \u2013              <p>Move the download down in the queue.</p> </li> <li> <code>move_files</code>             \u2013              <p>Move downloaded files to another directory.</p> </li> <li> <code>move_to</code>             \u2013              <p>Move the download in the queue, absolutely.</p> </li> <li> <code>move_to_bottom</code>             \u2013              <p>Move the download to the bottom of the queue.</p> </li> <li> <code>move_to_top</code>             \u2013              <p>Move the download to the top of the queue.</p> </li> <li> <code>move_up</code>             \u2013              <p>Move the download up in the queue.</p> </li> <li> <code>pause</code>             \u2013              <p>Pause the download.</p> </li> <li> <code>piece_length_string</code>             \u2013              <p>Return the piece length as string.</p> </li> <li> <code>progress_string</code>             \u2013              <p>Return the progress percentage as string.</p> </li> <li> <code>purge</code>             \u2013              <p>Purge itself from the results.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove the download from the queue (even if active).</p> </li> <li> <code>resume</code>             \u2013              <p>Resume the download.</p> </li> <li> <code>total_length_string</code>             \u2013              <p>Return the total length as string.</p> </li> <li> <code>update</code>             \u2013              <p>Update the internal values of the download with more recent values.</p> </li> <li> <code>update_options</code>             \u2013              <p>Re-fetch the options from the remote.</p> </li> <li> <code>upload_length_string</code>             \u2013              <p>Return the upload length as string.</p> </li> <li> <code>upload_speed_string</code>             \u2013              <p>Return the upload speed as string.</p> </li> <li> <code>verified_length_string</code>             \u2013              <p>Return the verified length as string.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>belongs_to</code>               (<code>Download | None</code>)           \u2013            <p>Parent download.</p> </li> <li> <code>belongs_to_id</code>               (<code>str | None</code>)           \u2013            <p>GID of a parent download.</p> </li> <li> <code>bitfield</code>               (<code>str | None</code>)           \u2013            <p>Hexadecimal representation of the download progress.</p> </li> <li> <code>bittorrent</code>               (<code>BitTorrent | None</code>)           \u2013            <p>Struct which contains information retrieved from the .torrent (file).</p> </li> <li> <code>completed_length</code>               (<code>int</code>)           \u2013            <p>Completed length of the download in bytes.</p> </li> <li> <code>connections</code>               (<code>int</code>)           \u2013            <p>Return the number of peers/servers aria2 has connected to.</p> </li> <li> <code>control_file_path</code>               (<code>Path</code>)           \u2013            <p>Return the path to the aria2 control file for this download.</p> </li> <li> <code>dir</code>               (<code>Path</code>)           \u2013            <p>Directory to save files.</p> </li> <li> <code>download_speed</code>               (<code>int</code>)           \u2013            <p>Download speed of this download measured in bytes/sec.</p> </li> <li> <code>error_code</code>               (<code>str | None</code>)           \u2013            <p>Return the code of the last error for this item, if any.</p> </li> <li> <code>error_message</code>               (<code>str | None</code>)           \u2013            <p>Return the (hopefully) human readable error message associated to errorCode.</p> </li> <li> <code>eta</code>               (<code>timedelta</code>)           \u2013            <p>Return the Estimated Time of Arrival (a timedelta).</p> </li> <li> <code>files</code>               (<code>list[File]</code>)           \u2013            <p>Return the list of files.</p> </li> <li> <code>followed_by</code>               (<code>list[Download]</code>)           \u2013            <p>List of downloads generated as the result of this download.</p> </li> <li> <code>followed_by_ids</code>               (<code>list[str]</code>)           \u2013            <p>List of GIDs which are generated as the result of this download.</p> </li> <li> <code>following</code>               (<code>Download | None</code>)           \u2013            <p>Return the download this download is following.</p> </li> <li> <code>following_id</code>               (<code>str | None</code>)           \u2013            <p>Return the reverse link for followedBy.</p> </li> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>GID of the download.</p> </li> <li> <code>has_failed</code>               (<code>bool</code>)           \u2013            <p>Return True if download has errored.</p> </li> <li> <code>info_hash</code>               (<code>str | None</code>)           \u2013            <p>Return the InfoHash.</p> </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            <p>Return True if download is active.</p> </li> <li> <code>is_complete</code>               (<code>bool</code>)           \u2013            <p>Return True if download is complete.</p> </li> <li> <code>is_metadata</code>               (<code>bool</code>)           \u2013            <p>Return True if this download is only composed of metadata, and no actual files.</p> </li> <li> <code>is_paused</code>               (<code>bool</code>)           \u2013            <p>Return True if download is paused.</p> </li> <li> <code>is_removed</code>               (<code>bool</code>)           \u2013            <p>Return True if download was removed.</p> </li> <li> <code>is_torrent</code>               (<code>bool</code>)           \u2013            <p>Return true if this download is a torrent.</p> </li> <li> <code>is_waiting</code>               (<code>bool</code>)           \u2013            <p>Return True if download is waiting.</p> </li> <li> <code>live</code>               (<code>Download</code>)           \u2013            <p>Return the same object with updated data.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Return the name of the download.</p> </li> <li> <code>num_pieces</code>               (<code>int</code>)           \u2013            <p>Return the number of pieces.</p> </li> <li> <code>num_seeders</code>               (<code>int</code>)           \u2013            <p>Return the number of seeders aria2 has connected to.</p> </li> <li> <code>options</code>               (<code>Options</code>)           \u2013            <p>Options specific to this download.</p> </li> <li> <code>piece_length</code>               (<code>int</code>)           \u2013            <p>Piece length in bytes.</p> </li> <li> <code>progress</code>               (<code>float</code>)           \u2013            <p>Return the progress of the download as float.</p> </li> <li> <code>root_files_paths</code>               (<code>list[Path]</code>)           \u2013            <p>Return the unique set of directories/files for this download.</p> </li> <li> <code>seeder</code>               (<code>bool</code>)           \u2013            <p>Return True if the local endpoint is a seeder, otherwise false.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>Return the status of the download.</p> </li> <li> <code>total_length</code>               (<code>int</code>)           \u2013            <p>Total length of the download in bytes.</p> </li> <li> <code>upload_length</code>               (<code>int</code>)           \u2013            <p>Return the uploaded length of the download in bytes.</p> </li> <li> <code>upload_speed</code>               (<code>int</code>)           \u2013            <p>Upload speed of this download measured in bytes/sec.</p> </li> <li> <code>verified_length</code>               (<code>int</code>)           \u2013            <p>Return the number of verified number of bytes while the files are being hash checked.</p> </li> <li> <code>verify_integrity_pending</code>               (<code>bool | None</code>)           \u2013            <p>Return True if this download is waiting for the hash check in a queue.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def __init__(self, api: API, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        api: The reference to an [`API`][aria2p.api.API] instance.\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self.api = api\n    self._struct = struct or {}\n    self._files: list[File] = []\n    self._root_files_paths: list[Path] = []\n    self._bittorrent: BitTorrent | None = None\n    self._name = \"\"\n    self._options: Options | None = None\n    self._followed_by: list[Download] | None = None\n    self._following: Download | None = None\n    self._belongs_to: Download | None = None\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.belongs_to","title":"belongs_to  <code>property</code>","text":"<pre><code>belongs_to: Download | None\n</code></pre> <p>Parent download.</p> <p>Returns:</p> <ul> <li> <code>Download | None</code>           \u2013            <p>An instance of <code>Download</code>.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.belongs_to_id","title":"belongs_to_id  <code>property</code>","text":"<pre><code>belongs_to_id: str | None\n</code></pre> <p>GID of a parent download.</p> <p>Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, The downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The GID of the parent download.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.bitfield","title":"bitfield  <code>property</code>","text":"<pre><code>bitfield: str | None\n</code></pre> <p>Hexadecimal representation of the download progress.</p> <p>The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The hexadecimal representation of the download progress.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.bittorrent","title":"bittorrent  <code>property</code>","text":"<pre><code>bittorrent: BitTorrent | None\n</code></pre> <p>Struct which contains information retrieved from the .torrent (file).</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>BitTorrent | None</code>           \u2013            <p>A BitTorrent instance or <code>None</code>.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.completed_length","title":"completed_length  <code>property</code>","text":"<pre><code>completed_length: int\n</code></pre> <p>Completed length of the download in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The completed length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.connections","title":"connections  <code>property</code>","text":"<pre><code>connections: int\n</code></pre> <p>Return the number of peers/servers aria2 has connected to.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of connected peers/servers.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.control_file_path","title":"control_file_path  <code>property</code>","text":"<pre><code>control_file_path: Path\n</code></pre> <p>Return the path to the aria2 control file for this download.</p> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The control file path.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.dir","title":"dir  <code>property</code>","text":"<pre><code>dir: Path\n</code></pre> <p>Directory to save files.</p> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The directory where the files are saved.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.download_speed","title":"download_speed  <code>property</code>","text":"<pre><code>download_speed: int\n</code></pre> <p>Download speed of this download measured in bytes/sec.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The download speed in bytes/sec.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.error_code","title":"error_code  <code>property</code>","text":"<pre><code>error_code: str | None\n</code></pre> <p>Return the code of the last error for this item, if any.</p> <p>The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The error code.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.error_message","title":"error_message  <code>property</code>","text":"<pre><code>error_message: str | None\n</code></pre> <p>Return the (hopefully) human readable error message associated to errorCode.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The error message.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.eta","title":"eta  <code>property</code>","text":"<pre><code>eta: timedelta\n</code></pre> <p>Return the Estimated Time of Arrival (a timedelta).</p> <p>Returns:</p> <ul> <li> <code>timedelta</code>           \u2013            <p>ETA or <code>timedelta.max</code> if unknown.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.files","title":"files  <code>property</code>","text":"<pre><code>files: list[File]\n</code></pre> <p>Return the list of files.</p> <p>The elements of this list are the same structs used in aria2.getFiles() method.</p> <p>Returns:</p> <ul> <li> <code>list[File]</code>           \u2013            <p>The files of this download.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.followed_by","title":"followed_by  <code>property</code>","text":"<pre><code>followed_by: list[Download]\n</code></pre> <p>List of downloads generated as the result of this download.</p> <p>Returns:</p> <ul> <li> <code>list[Download]</code>           \u2013            <p>A list of instances of <code>Download</code>.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.followed_by_ids","title":"followed_by_ids  <code>property</code>","text":"<pre><code>followed_by_ids: list[str]\n</code></pre> <p>List of GIDs which are generated as the result of this download.</p> <p>For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The children downloads IDs.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.following","title":"following  <code>property</code>","text":"<pre><code>following: Download | None\n</code></pre> <p>Return the download this download is following.</p> <p>Returns:</p> <ul> <li> <code>Download | None</code>           \u2013            <p>An instance of <code>Download</code>.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.following_id","title":"following_id  <code>property</code>","text":"<pre><code>following_id: str | None\n</code></pre> <p>Return the reverse link for followedBy.</p> <p>A download included in followedBy has this object's GID in its following value.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The parent download ID.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.gid","title":"gid  <code>property</code>","text":"<pre><code>gid: str\n</code></pre> <p>GID of the download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download GID.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.has_failed","title":"has_failed  <code>property</code>","text":"<pre><code>has_failed: bool\n</code></pre> <p>Return True if download has errored.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download has failed.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.info_hash","title":"info_hash  <code>property</code>","text":"<pre><code>info_hash: str | None\n</code></pre> <p>Return the InfoHash.</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The InfoHash.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre> <p>Return True if download is active.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is active.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.is_complete","title":"is_complete  <code>property</code>","text":"<pre><code>is_complete: bool\n</code></pre> <p>Return True if download is complete.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is complete.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.is_metadata","title":"is_metadata  <code>property</code>","text":"<pre><code>is_metadata: bool\n</code></pre> <p>Return True if this download is only composed of metadata, and no actual files.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this is a metadata download.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.is_paused","title":"is_paused  <code>property</code>","text":"<pre><code>is_paused: bool\n</code></pre> <p>Return True if download is paused.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is paused.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.is_removed","title":"is_removed  <code>property</code>","text":"<pre><code>is_removed: bool\n</code></pre> <p>Return True if download was removed.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download was removed.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.is_torrent","title":"is_torrent  <code>property</code>","text":"<pre><code>is_torrent: bool\n</code></pre> <p>Return true if this download is a torrent.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this is a torrent downlaod.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.is_waiting","title":"is_waiting  <code>property</code>","text":"<pre><code>is_waiting: bool\n</code></pre> <p>Return True if download is waiting.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this download is waiting.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.live","title":"live  <code>property</code>","text":"<pre><code>live: Download\n</code></pre> <p>Return the same object with updated data.</p> <p>Returns:</p> <ul> <li> <code>Download</code>           \u2013            <p>Itself.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Return the name of the download.</p> <p>Name is the name of the file if single-file, first file's directory name if multi-file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download name.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.num_pieces","title":"num_pieces  <code>property</code>","text":"<pre><code>num_pieces: int\n</code></pre> <p>Return the number of pieces.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of pieces.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.num_seeders","title":"num_seeders  <code>property</code>","text":"<pre><code>num_seeders: int\n</code></pre> <p>Return the number of seeders aria2 has connected to.</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The numbers of seeders.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.options","title":"options  <code>property</code> <code>writable</code>","text":"<pre><code>options: Options\n</code></pre> <p>Options specific to this download.</p> <p>Returns:</p> <ul> <li> <code>Options</code>           \u2013            <p>The download options.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.piece_length","title":"piece_length  <code>property</code>","text":"<pre><code>piece_length: int\n</code></pre> <p>Piece length in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The piece length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.progress","title":"progress  <code>property</code>","text":"<pre><code>progress: float\n</code></pre> <p>Return the progress of the download as float.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>Progress percentage.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.root_files_paths","title":"root_files_paths  <code>property</code>","text":"<pre><code>root_files_paths: list[Path]\n</code></pre> <p>Return the unique set of directories/files for this download.</p> <p>Instead of returning all the leaves like self.files, return the relative root directories if any, and relative root files.</p> <p>This property is useful when we need to list the directories and files in order to move or copy them. We don't want to copy files one by one, but rather entire directories at once when possible.</p> <p>Returns:</p> <ul> <li> <code>list[Path]</code>           \u2013            <p>The root file paths.</p> </li> </ul> <p>Examples:</p> <p>Download directory is <code>/a/b</code>.</p> <pre><code>&gt;&gt;&gt; self.files\n[\"/a/b/c/1.txt\", \"/a/b/c/2.txt\", \"/a/b/3.txt\"]\n&gt;&gt;&gt; self.root_files_paths\n[\"/a/b/c\", \"/a/b/3.txt\"]\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.seeder","title":"seeder  <code>property</code>","text":"<pre><code>seeder: bool\n</code></pre> <p>Return True if the local endpoint is a seeder, otherwise false.</p> <p>BitTorrent only.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If the local endpoint is a seeder.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.status","title":"status  <code>property</code>","text":"<pre><code>status: str\n</code></pre> <p>Return the status of the download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p><code>active</code>, <code>waiting</code>, <code>paused</code>, <code>error</code>, <code>complete</code> or <code>removed</code>.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.total_length","title":"total_length  <code>property</code>","text":"<pre><code>total_length: int\n</code></pre> <p>Total length of the download in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The total length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.upload_length","title":"upload_length  <code>property</code>","text":"<pre><code>upload_length: int\n</code></pre> <p>Return the uploaded length of the download in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The uploaded length in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.upload_speed","title":"upload_speed  <code>property</code>","text":"<pre><code>upload_speed: int\n</code></pre> <p>Upload speed of this download measured in bytes/sec.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The upload speed in bytes/sec.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.verified_length","title":"verified_length  <code>property</code>","text":"<pre><code>verified_length: int\n</code></pre> <p>Return the number of verified number of bytes while the files are being hash checked.</p> <p>This key exists only when this download is being hash checked.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The verified length.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.verify_integrity_pending","title":"verify_integrity_pending  <code>property</code>","text":"<pre><code>verify_integrity_pending: bool | None\n</code></pre> <p>Return True if this download is waiting for the hash check in a queue.</p> <p>This key exists only when this download is in the queue.</p> <p>Returns:</p> <ul> <li> <code>bool | None</code>           \u2013            <p>Whether this download is waiting for the hash check.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.completed_length_string","title":"completed_length_string","text":"<pre><code>completed_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the completed length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The completed length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def completed_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the completed length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The completed length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.completed_length, delim=\" \")\n    return str(self.completed_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.copy_files","title":"copy_files","text":"<pre><code>copy_files(\n    to_directory: str | Path, force: bool = False\n) -&gt; bool\n</code></pre> <p>Copy downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to copy files into.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def copy_files(self, to_directory: str | Path, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Copy downloaded files to another directory.\n\n    Parameters:\n        to_directory: The target directory to copy files into.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.api.copy_files([self], to_directory, force)[0]\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.download_speed_string","title":"download_speed_string","text":"<pre><code>download_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the download speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download speed string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def download_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the download speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The download speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.download_speed, delim=\" \", postfix=\"/s\")\n    return str(self.download_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.eta_string","title":"eta_string","text":"<pre><code>eta_string(precision: int = 0) -&gt; str\n</code></pre> <p>Return the Estimated Time of Arrival as a string.</p> <p>Parameters:</p> <ul> <li> <code>precision</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The precision to use, see [aria2p.utils.human_readable_timedelta].</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Estimated Time of Arrival as a string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def eta_string(self, precision: int = 0) -&gt; str:\n    \"\"\"Return the Estimated Time of Arrival as a string.\n\n    Parameters:\n        precision: The precision to use, see [aria2p.utils.human_readable_timedelta].\n\n    Returns:\n        The Estimated Time of Arrival as a string.\n    \"\"\"\n    eta = self.eta\n\n    if eta == timedelta.max:\n        return \"-\"\n\n    return human_readable_timedelta(eta, precision=precision)\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.move","title":"move","text":"<pre><code>move(pos: int) -&gt; int\n</code></pre> <p>Move the download in the queue, relatively.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>Number of times to move.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move(self, pos: int) -&gt; int:\n    \"\"\"Move the download in the queue, relatively.\n\n    Parameters:\n        pos: Number of times to move.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move(self, pos)\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.move_down","title":"move_down","text":"<pre><code>move_down(pos: int = 1) -&gt; int\n</code></pre> <p>Move the download down in the queue.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move down.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_down(self, pos: int = 1) -&gt; int:\n    \"\"\"Move the download down in the queue.\n\n    Parameters:\n        pos: Number of times to move down.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_down(self, pos)\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.move_files","title":"move_files","text":"<pre><code>move_files(\n    to_directory: str | Path, force: bool = False\n) -&gt; bool\n</code></pre> <p>Move downloaded files to another directory.</p> <p>Parameters:</p> <ul> <li> <code>to_directory</code>               (<code>str | Path</code>)           \u2013            <p>The target directory to move files to.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to move files even if download is not complete.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_files(self, to_directory: str | Path, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Move downloaded files to another directory.\n\n    Parameters:\n        to_directory: The target directory to move files to.\n        force: Whether to move files even if download is not complete.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.api.move_files([self], to_directory, force)[0]\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.move_to","title":"move_to","text":"<pre><code>move_to(pos: int) -&gt; int\n</code></pre> <p>Move the download in the queue, absolutely.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>)           \u2013            <p>The absolute position in the queue to take.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_to(self, pos: int) -&gt; int:\n    \"\"\"Move the download in the queue, absolutely.\n\n    Parameters:\n        pos: The absolute position in the queue to take.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_to(self, pos)\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.move_to_bottom","title":"move_to_bottom","text":"<pre><code>move_to_bottom() -&gt; int\n</code></pre> <p>Move the download to the bottom of the queue.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_to_bottom(self) -&gt; int:\n    \"\"\"Move the download to the bottom of the queue.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_to_bottom(self)\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.move_to_top","title":"move_to_top","text":"<pre><code>move_to_top() -&gt; int\n</code></pre> <p>Move the download to the top of the queue.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_to_top(self) -&gt; int:\n    \"\"\"Move the download to the top of the queue.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_to_top(self)\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.move_up","title":"move_up","text":"<pre><code>move_up(pos: int = 1) -&gt; int\n</code></pre> <p>Move the download up in the queue.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Number of times to move up.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The new position of the download.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def move_up(self, pos: int = 1) -&gt; int:\n    \"\"\"Move the download up in the queue.\n\n    Parameters:\n        pos: Number of times to move up.\n\n    Returns:\n        The new position of the download.\n    \"\"\"\n    return self.api.move_up(self, pos)\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.pause","title":"pause","text":"<pre><code>pause(force: bool = False) -&gt; bool\n</code></pre> <p>Pause the download.</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force pause (don't contact servers).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Always True (raises exception otherwise).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When pausing failed.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def pause(self, force: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Pause the download.\n\n    Parameters:\n        force: Whether to force pause (don't contact servers).\n\n    Returns:\n        Always True (raises exception otherwise).\n\n    Raises:\n        ClientException: When pausing failed.\n    \"\"\"\n    result = self.api.pause([self], force=force)[0]\n    if not result:\n        raise result  # type: ignore  # we know it's a ClientException\n    return True\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.piece_length_string","title":"piece_length_string","text":"<pre><code>piece_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the piece length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The piece length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def piece_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the piece length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The piece length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.piece_length, delim=\" \")\n    return str(self.piece_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.progress_string","title":"progress_string","text":"<pre><code>progress_string(digits: int = 2) -&gt; str\n</code></pre> <p>Return the progress percentage as string.</p> <p>Parameters:</p> <ul> <li> <code>digits</code>               (<code>int</code>, default:                   <code>2</code> )           \u2013            <p>Number of decimal digits to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The progress percentage.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def progress_string(self, digits: int = 2) -&gt; str:\n    \"\"\"Return the progress percentage as string.\n\n    Parameters:\n        digits: Number of decimal digits to use.\n\n    Returns:\n        The progress percentage.\n    \"\"\"\n    return f\"{self.progress:.{digits}f}%\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.purge","title":"purge","text":"<pre><code>purge() -&gt; bool\n</code></pre> <p>Purge itself from the results.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or failure of the operation.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def purge(self) -&gt; bool:\n    \"\"\"Purge itself from the results.\n\n    Returns:\n        Success or failure of the operation.\n    \"\"\"\n    return self.api.client.remove_download_result(self.gid) == \"OK\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.remove","title":"remove","text":"<pre><code>remove(force: bool = False, files: bool = False) -&gt; bool\n</code></pre> <p>Remove the download from the queue (even if active).</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force removal.</p> </li> <li> <code>files</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove files as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Always True (raises exception otherwise).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When removal failed.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def remove(self, force: bool = False, files: bool = False) -&gt; bool:  # noqa: FBT001,FBT002\n    \"\"\"Remove the download from the queue (even if active).\n\n    Parameters:\n        force: Whether to force removal.\n        files: Whether to remove files as well.\n\n    Returns:\n        Always True (raises exception otherwise).\n\n    Raises:\n        ClientException: When removal failed.\n    \"\"\"\n    result = self.api.remove([self], force=force, files=files)[0]\n    if not result:\n        raise result  # type: ignore  # we know it's a ClientException\n    return True\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.resume","title":"resume","text":"<pre><code>resume() -&gt; bool\n</code></pre> <p>Resume the download.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Always True (raises exception otherwise).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientException</code>             \u2013            <p>When resuming failed.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def resume(self) -&gt; bool:\n    \"\"\"Resume the download.\n\n    Returns:\n        Always True (raises exception otherwise).\n\n    Raises:\n        ClientException: When resuming failed.\n    \"\"\"\n    result = self.api.resume([self])[0]\n    if not result:\n        raise result  # type: ignore  # we know it's a ClientException\n    return True\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.total_length_string","title":"total_length_string","text":"<pre><code>total_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the total length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The total length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def total_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the total length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The total length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.total_length, delim=\" \")\n    return str(self.total_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Update the internal values of the download with more recent values.</p> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def update(self) -&gt; None:\n    \"\"\"Update the internal values of the download with more recent values.\"\"\"\n    self._struct = self.api.client.tell_status(self.gid)\n\n    self._files = []\n    self._name = \"\"\n    self._bittorrent = None\n    self._followed_by = None\n    self._following = None\n    self._belongs_to = None\n    self._options = None\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.update_options","title":"update_options","text":"<pre><code>update_options() -&gt; None\n</code></pre> <p>Re-fetch the options from the remote.</p> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def update_options(self) -&gt; None:\n    \"\"\"Re-fetch the options from the remote.\"\"\"\n    self._options = self.api.get_options(downloads=[self])[0]\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.upload_length_string","title":"upload_length_string","text":"<pre><code>upload_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the upload length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The upload length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def upload_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the upload length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The upload length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.upload_length, delim=\" \")\n    return str(self.upload_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.upload_speed_string","title":"upload_speed_string","text":"<pre><code>upload_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the upload speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The upload speed string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def upload_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the upload speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The upload speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.upload_speed, delim=\" \", postfix=\"/s\")\n    return str(self.upload_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.Download.verified_length_string","title":"verified_length_string","text":"<pre><code>verified_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the verified length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The verified length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def verified_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the verified length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The verified length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.verified_length, delim=\" \")\n    return str(self.verified_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File","title":"File","text":"<pre><code>File(struct: dict)\n</code></pre> <p>Information about a download's file.</p> <p>Parameters:</p> <ul> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>completed_length_string</code>             \u2013              <p>Return the completed length as string.</p> </li> <li> <code>length_string</code>             \u2013              <p>Return the length as string.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>completed_length</code>               (<code>int</code>)           \u2013            <p>Completed length of this file in bytes.</p> </li> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.</p> </li> <li> <code>is_metadata</code>               (<code>bool</code>)           \u2013            <p>Return True if this file is aria2 metadata and not an actual file.</p> </li> <li> <code>length</code>               (<code>int</code>)           \u2013            <p>Return the file size in bytes.</p> </li> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>File path.</p> </li> <li> <code>selected</code>               (<code>bool</code>)           \u2013            <p>Return True if this file is selected by <code>--select-file</code> option.</p> </li> <li> <code>uris</code>               (<code>list[dict]</code>)           \u2013            <p>Return a list of URIs for this file.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def __init__(self, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.completed_length","title":"completed_length  <code>property</code>","text":"<pre><code>completed_length: int\n</code></pre> <p>Completed length of this file in bytes.</p> <p>Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The completed length.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.index","title":"index  <code>property</code>","text":"<pre><code>index: int\n</code></pre> <p>Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The index of the file.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.is_metadata","title":"is_metadata  <code>property</code>","text":"<pre><code>is_metadata: bool\n</code></pre> <p>Return True if this file is aria2 metadata and not an actual file.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If the file is metadata.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.length","title":"length  <code>property</code>","text":"<pre><code>length: int\n</code></pre> <p>Return the file size in bytes.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The file size in bytes.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.path","title":"path  <code>property</code>","text":"<pre><code>path: Path\n</code></pre> <p>File path.</p> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The file path.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.selected","title":"selected  <code>property</code>","text":"<pre><code>selected: bool\n</code></pre> <p>Return True if this file is selected by <code>--select-file</code> option.</p> <p>If <code>--select-file</code> is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If this file is selected.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.uris","title":"uris  <code>property</code>","text":"<pre><code>uris: list[dict]\n</code></pre> <p>Return a list of URIs for this file.</p> <p>The element type is the same struct used in the <code>client.get_uris()</code> method.</p> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>The list of URIs.</p> </li> </ul>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.completed_length_string","title":"completed_length_string","text":"<pre><code>completed_length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the completed length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The completed length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def completed_length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the completed length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The completed length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.completed_length, delim=\" \")\n    return str(self.completed_length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/downloads/#aria2p.downloads.File.length_string","title":"length_string","text":"<pre><code>length_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the length as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The length string.</p> </li> </ul> Source code in <code>src/aria2p/downloads.py</code> <pre><code>def length_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the length as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The length string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.length, delim=\" \")\n    return str(self.length) + \" B\"\n</code></pre>"},{"location":"reference/aria2p/interface/","title":"aria2p.interface","text":""},{"location":"reference/aria2p/interface/#aria2p.interface","title":"interface","text":"<p>This module contains all the code responsible for the HTOP-like interface.</p> <p>Classes:</p> <ul> <li> <code>Column</code>           \u2013            <p>A class to specify a column in the interface.</p> </li> <li> <code>Exit</code>           \u2013            <p>A simple exception to exit the interactive interface.</p> </li> <li> <code>HorizontalScroll</code>           \u2013            <p>A wrapper around asciimatics' Screen.print_at and Screen.paint methods.</p> </li> <li> <code>Interface</code>           \u2013            <p>The main class responsible for drawing the HTOP-like interface.</p> </li> <li> <code>Key</code>           \u2013            <p>A class to represent an input key.</p> </li> <li> <code>Keys</code>           \u2013            <p>The actions and their shortcuts keys.</p> </li> <li> <code>Palette</code>           \u2013            <p>A simple class to hold palettes getters.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>color_palette_parser</code>             \u2013              <p>Return a color tuple (foreground color, mode, background color).</p> </li> <li> <code>key_bind_parser</code>             \u2013              <p>Return a list of Key instances.</p> </li> </ul>"},{"location":"reference/aria2p/interface/#aria2p.interface.Column","title":"Column","text":"<pre><code>Column(\n    header: str,\n    padding: str,\n    get_text: Callable,\n    get_sort: Callable,\n    get_palette: Callable,\n)\n</code></pre> <p>A class to specify a column in the interface.</p> <p>It's composed of a header (the string to display on top), a padding (how to align the text), and three callable functions to get the text from a Python object, to sort between these objects, and to get a color palette based on the text.</p> <p>Parameters:</p> <ul> <li> <code>header</code>               (<code>str</code>)           \u2013            <p>The string to display on top.</p> </li> <li> <code>padding</code>               (<code>str</code>)           \u2013            <p>How to align the text.</p> </li> <li> <code>get_text</code>               (<code>Callable</code>)           \u2013            <p>Function accepting a Download as argument and returning the text to display.</p> </li> <li> <code>get_sort</code>               (<code>Callable</code>)           \u2013            <p>Function accepting a Download as argument and returning the attribute used to sort.</p> </li> <li> <code>get_palette</code>               (<code>Callable</code>)           \u2013            <p>Function accepting text as argument and returning a palette or a palette identifier.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def __init__(\n    self,\n    header: str,\n    padding: str,\n    get_text: Callable,\n    get_sort: Callable,\n    get_palette: Callable,\n) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        header: The string to display on top.\n        padding: How to align the text.\n        get_text: Function accepting a Download as argument and returning the text to display.\n        get_sort: Function accepting a Download as argument and returning the attribute used to sort.\n        get_palette: Function accepting text as argument and returning a palette or a palette identifier.\n    \"\"\"\n    self.header = header\n    self.padding = padding\n    self.get_text = get_text\n    self.get_sort = get_sort\n    self.get_palette = get_palette\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Exit","title":"Exit","text":"<p>               Bases: <code>Exception</code></p> <p>A simple exception to exit the interactive interface.</p>"},{"location":"reference/aria2p/interface/#aria2p.interface.HorizontalScroll","title":"HorizontalScroll","text":"<pre><code>HorizontalScroll(screen: Screen, scroll: int = 0)\n</code></pre> <p>A wrapper around asciimatics' Screen.print_at and Screen.paint methods.</p> <p>It allows scroll the rows horizontally, used when moving left and right: the first N characters will not be printed.</p> <p>Parameters:</p> <ul> <li> <code>screen</code>               (<code>Screen</code>)           \u2013            <p>The asciimatics screen object.</p> </li> <li> <code>scroll</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Base scroll to use when printing. Will decrease by one with each character skipped.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>print_at</code>             \u2013              <p>Wrapper print_at method.</p> </li> <li> <code>set_scroll</code>             \u2013              <p>Set the scroll value.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def __init__(self, screen: Screen, scroll: int = 0) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        screen (Screen): The asciimatics screen object.\n        scroll (int): Base scroll to use when printing. Will decrease by one with each character skipped.\n    \"\"\"\n    self.screen = screen\n    self.scroll = scroll\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.HorizontalScroll.print_at","title":"print_at","text":"<pre><code>print_at(\n    text: str, x: int, y: int, palette: list | tuple\n) -&gt; int\n</code></pre> <p>Wrapper print_at method.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>Text to print.</p> </li> <li> <code>x</code>               (<code>int</code>)           \u2013            <p>X axis position / column.</p> </li> <li> <code>y</code>               (<code>int</code>)           \u2013            <p>Y axis position / row.</p> </li> <li> <code>palette</code>               (<code>list | tuple</code>)           \u2013            <p>A length-3 tuple or a list of length-3 tuples representing asciimatics palettes.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of characters actually printed.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def print_at(self, text: str, x: int, y: int, palette: list | tuple) -&gt; int:\n    \"\"\"Wrapper print_at method.\n\n    Parameters:\n        text: Text to print.\n        x: X axis position / column.\n        y: Y axis position / row.\n        palette: A length-3 tuple or a list of length-3 tuples representing asciimatics palettes.\n\n    Returns:\n        The number of characters actually printed.\n    \"\"\"\n    if self.scroll == 0:\n        if isinstance(palette, list):\n            self.screen.paint(text, x, y, colour_map=palette)\n        else:\n            self.screen.print_at(text, x, y, *palette)\n        written = len(text)\n    else:\n        text_length = len(text)\n        if text_length &gt; self.scroll:\n            new_text = text[self.scroll :]\n            written = len(new_text)\n            if isinstance(palette, list):\n                new_palette = palette[self.scroll :]\n                self.screen.paint(new_text, x, y, colour_map=new_palette)\n            else:\n                self.screen.print_at(new_text, x, y, *palette)\n            self.scroll = 0\n        else:\n            self.scroll -= text_length\n            written = 0\n    return written\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.HorizontalScroll.set_scroll","title":"set_scroll","text":"<pre><code>set_scroll(scroll: int) -&gt; None\n</code></pre> <p>Set the scroll value.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def set_scroll(self, scroll: int) -&gt; None:\n    \"\"\"Set the scroll value.\"\"\"\n    self.scroll = scroll\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface","title":"Interface","text":"<pre><code>Interface(api: API | None = None)\n</code></pre> <p>The main class responsible for drawing the HTOP-like interface.</p> <p>It should be instantiated with an API instance, and then ran with its <code>run</code> method.</p> <p>If you want to re-use this class' code to create an HTOP-like interface for another purpose, simply change these few things:</p> <ul> <li>columns, columns_order and palettes attributes</li> <li>sort and reverse attributes default values</li> <li>get_data method. It should return a list of objects that can be compared by equality (==, eq, hash)</li> <li>init method to accept other arguments</li> <li>remove/change the few events with \"download\" or \"self.api\" in the process_event method</li> </ul> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API | None</code>, default:                   <code>None</code> )           \u2013            <p>An instance of API.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_column_at_x</code>             \u2013              <p>For an horizontal position X, return the column index.</p> </li> <li> <code>get_data</code>             \u2013              <p>Return a list of objects.</p> </li> <li> <code>print_headers</code>             \u2013              <p>Print the headers (columns names).</p> </li> <li> <code>print_rows</code>             \u2013              <p>Print the rows.</p> </li> <li> <code>process_event</code>             \u2013              <p>Process an event.</p> </li> <li> <code>run</code>             \u2013              <p>The main drawing loop.</p> </li> <li> <code>set_screen</code>             \u2013              <p>Set the screen object, its scroller wrapper, width, height, and columns bounds.</p> </li> <li> <code>sort_data</code>             \u2013              <p>Sort data according to interface state.</p> </li> <li> <code>update_data</code>             \u2013              <p>Set the interface data and rows contents.</p> </li> <li> <code>update_rows</code>             \u2013              <p>Update rows contents according to data and interface state.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def __init__(self, api: API | None = None) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        api: An instance of API.\n    \"\"\"\n    if api is None:\n        api = API()\n    self.api = api\n\n    self.rows = []\n    self.data = []\n    self.bounds = []\n    self.downloads_uris = []\n    self.height = 20\n    self.width = 80\n\n    # reduce curses' 1 second delay when hitting escape to 25 ms\n    os.environ.setdefault(\"ESCDELAY\", \"25\")\n\n    self.state_mapping: dict[int, Interface.StateConf] = {\n        self.State.MAIN: {\n            \"process_keyboard_event\": self.process_keyboard_event_main,\n            \"process_mouse_event\": self.process_mouse_event_main,\n            \"print_functions\": [self.print_table],\n        },\n        self.State.HELP: {\n            \"process_keyboard_event\": self.process_keyboard_event_help,\n            \"process_mouse_event\": self.process_mouse_event_help,\n            \"print_functions\": [self.print_help],\n        },\n        self.State.SETUP: {\n            \"process_keyboard_event\": self.process_keyboard_event_setup,\n            \"process_mouse_event\": self.process_mouse_event_setup,\n            \"print_functions\": [],\n        },\n        self.State.REMOVE_ASK: {\n            \"process_keyboard_event\": self.process_keyboard_event_remove_ask,\n            \"process_mouse_event\": self.process_mouse_event_remove_ask,\n            \"print_functions\": [self.print_remove_ask_column, self.print_table],\n        },\n        self.State.SELECT_SORT: {\n            \"process_keyboard_event\": self.process_keyboard_event_select_sort,\n            \"process_mouse_event\": self.process_mouse_event_select_sort,\n            \"print_functions\": [self.print_select_sort_column, self.print_table],\n        },\n        self.State.ADD_DOWNLOADS: {\n            \"process_keyboard_event\": self.process_keyboard_event_add_downloads,\n            \"process_mouse_event\": self.process_mouse_event_add_downloads,\n            \"print_functions\": [self.print_add_downloads, self.print_table],\n        },\n    }\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.get_column_at_x","title":"get_column_at_x","text":"<pre><code>get_column_at_x(x: int) -&gt; int\n</code></pre> <p>For an horizontal position X, return the column index.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def get_column_at_x(self, x: int) -&gt; int:\n    \"\"\"For an horizontal position X, return the column index.\"\"\"\n    for i, bound in enumerate(self.bounds):\n        if bound[0] &lt;= x &lt;= bound[1]:\n            return i\n    raise ValueError(\"clicked outside of boundaries\")\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.get_data","title":"get_data","text":"<pre><code>get_data() -&gt; list[Download]\n</code></pre> <p>Return a list of objects.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def get_data(self) -&gt; list[Download]:\n    \"\"\"Return a list of objects.\"\"\"\n    return self.api.get_downloads()\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.print_headers","title":"print_headers","text":"<pre><code>print_headers() -&gt; None\n</code></pre> <p>Print the headers (columns names).</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def print_headers(self) -&gt; None:\n    \"\"\"Print the headers (columns names).\"\"\"\n    self.scroller.set_scroll(self.x_scroll)\n    x, y, c = self.x_offset, self.y_offset, 0\n\n    for column_name in self.columns_order:\n        column = self.columns[column_name]\n        palette = self.palettes[\"focused_header\"] if c == self.sort else self.palettes[\"header\"]\n\n        if column.padding == \"100%\":\n            header_string = f\"{column.header}\"\n            fill_up = \" \" * max(0, self.width - x - len(header_string))\n            written = self.scroller.print_at(header_string, x, y, palette)\n            self.scroller.print_at(fill_up, x + written, y, self.palettes[\"header\"])\n\n        else:\n            header_string = f\"{column.header:{column.padding}} \"\n            written = self.scroller.print_at(header_string, x, y, palette)\n\n        x += written\n        c += 1  # noqa: SIM113\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.print_rows","title":"print_rows","text":"<pre><code>print_rows() -&gt; None\n</code></pre> <p>Print the rows.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def print_rows(self) -&gt; None:\n    \"\"\"Print the rows.\"\"\"\n    y = self.y_offset + 1\n    for row in self.rows[self.row_offset : self.row_offset + self.height]:\n        self.scroller.set_scroll(self.x_scroll)\n        x = self.x_offset\n\n        for i, column_name in enumerate(self.columns_order):\n            column = self.columns[column_name]\n            padding = f\"&lt;{max(0, self.width - x)}\" if column.padding == \"100%\" else column.padding\n\n            if self.focused == y - self.y_offset - 1 + self.row_offset:\n                palette = self.palettes[\"focused_row\"]\n            else:\n                palette = column.get_palette(row[i])\n                if isinstance(palette, str):\n                    palette = self.palettes[palette]\n\n            field_string = f\"{row[i]:{padding}} \"\n            written = self.scroller.print_at(field_string, x, y, palette)\n            x += written\n\n        y += 1\n\n    for i in range(self.height - y):\n        self.screen.print_at(\" \" * self.width, self.x_offset, y + i, *self.palettes[\"ui\"])\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.process_event","title":"process_event","text":"<pre><code>process_event(event: KeyboardEvent | MouseEvent) -&gt; None\n</code></pre> <p>Process an event.</p> <p>For reactivity purpose, this method should not compute expensive stuff, only change the state of the interface, changes that will be applied by update_data and update_rows methods.</p> <p>Parameters:</p> <ul> <li> <code>event</code>               (<code>KeyboardEvent | MouseEvent</code>)           \u2013            <p>The event to process.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def process_event(self, event: KeyboardEvent | MouseEvent) -&gt; None:\n    \"\"\"Process an event.\n\n    For reactivity purpose, this method should not compute expensive stuff, only change the state of the interface,\n    changes that will be applied by update_data and update_rows methods.\n\n    Parameters:\n        event (KeyboardEvent | MouseEvent): The event to process.\n    \"\"\"\n    if isinstance(event, KeyboardEvent):\n        self.process_keyboard_event(event)\n\n    elif isinstance(event, MouseEvent):\n        self.process_mouse_event(event)\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.run","title":"run","text":"<pre><code>run() -&gt; bool\n</code></pre> <p>The main drawing loop.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def run(self) -&gt; bool:\n    \"\"\"The main drawing loop.\"\"\"\n    try:\n        # outer loop to support screen resize\n        while True:\n            with ManagedScreen() as screen:\n                logger.debug(f\"Created new screen {screen}\")\n                self.set_screen(screen)\n                self.frame = 0\n                # break (and re-enter) when screen has been resized\n                while not screen.has_resized():\n                    # keep previous sort in memory to know if we have to re-sort the rows\n                    # once all events are processed (to avoid useless/redundant sort passes)\n                    previous_sort = (self.sort, self.reverse)\n\n                    # we only refresh when explicitly asked for\n                    self.refresh = False\n\n                    # process all events before refreshing screen,\n                    # otherwise the reactivity is slowed down a lot with fast inputs\n                    event = screen.get_event()\n                    logger.debug(f\"Got event {event}\")\n                    while event:\n                        # avoid crashing the interface if exceptions occur while processing an event\n                        try:\n                            self.process_event(event)\n                        except Exit:\n                            logger.debug(\"Received exit command\")\n                            return True\n                        except Exception as error:  # noqa: BLE001\n                            # TODO: display error in status bar\n                            logger.exception(error)\n                        event = screen.get_event()\n                        logger.debug(f\"Got event {event}\")\n\n                    # time to update data and rows\n                    if self.frame == 0:\n                        logger.debug(\"Tick! Updating data and rows\")\n                        self.update_data()\n                        self.update_rows()\n                        self.refresh = True\n\n                    # time to refresh the screen\n                    if self.refresh:\n                        logger.debug(\"Refresh! Printing text\")\n                        # sort if needed, unless it was just done at frame 0 when updating\n                        if (self.sort, self.reverse) != previous_sort and self.frame != 0:\n                            self.sort_data()\n                            self.update_rows()\n\n                        # actual printing and screen refresh\n                        for print_function in self.state_mapping[self.state][\"print_functions\"]:\n                            print_function()\n                        screen.refresh()\n\n                    # sleep and increment frame\n                    time.sleep(self.sleep)\n                    self.frame = (self.frame + 1) % self.frames\n                logger.debug(\"Screen has resized\")\n                self.post_resize()\n    except Exception as error:  # noqa: BLE001\n        logger.exception(error)\n        return False\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.set_screen","title":"set_screen","text":"<pre><code>set_screen(screen: Screen) -&gt; None\n</code></pre> <p>Set the screen object, its scroller wrapper, width, height, and columns bounds.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def set_screen(self, screen: Screen) -&gt; None:\n    \"\"\"Set the screen object, its scroller wrapper, width, height, and columns bounds.\"\"\"\n    self.screen = screen\n    self.height, self.width = screen.dimensions\n    self.scroller = HorizontalScroll(screen)\n    self.bounds = []\n    for column_name in self.columns_order:\n        column = self.columns[column_name]\n        if column.padding == \"100%\":  # last column\n            self.bounds.append((self.bounds[-1][1] + 1, self.width))\n        else:\n            padding = int(column.padding.lstrip(\"&lt;&gt;=^\"))\n            if not self.bounds:\n                self.bounds = [(0, padding)]\n            else:\n                self.bounds.append((self.bounds[-1][1] + 1, self.bounds[-1][1] + 1 + padding))\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.sort_data","title":"sort_data","text":"<pre><code>sort_data() -&gt; None\n</code></pre> <p>Sort data according to interface state.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def sort_data(self) -&gt; None:\n    \"\"\"Sort data according to interface state.\"\"\"\n    sort_function = self.columns[self.columns_order[self.sort]].get_sort\n    self.data = sorted(self.data, key=sort_function, reverse=self.reverse)\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.update_data","title":"update_data","text":"<pre><code>update_data() -&gt; None\n</code></pre> <p>Set the interface data and rows contents.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def update_data(self) -&gt; None:\n    \"\"\"Set the interface data and rows contents.\"\"\"\n    try:\n        self.data = self.get_data()\n        self.sort_data()\n    except requests.exceptions.Timeout:\n        logger.debug(\"Request timeout\")\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Interface.update_rows","title":"update_rows","text":"<pre><code>update_rows() -&gt; None\n</code></pre> <p>Update rows contents according to data and interface state.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>def update_rows(self) -&gt; None:\n    \"\"\"Update rows contents according to data and interface state.\"\"\"\n    text_getters = [self.columns[c].get_text for c in self.columns_order]\n    n_columns = len(self.columns_order)\n    self.rows = [tuple(text_getters[i](item) for i in range(n_columns)) for item in self.data]\n    if self.follow:\n        self.focused = self.data.index(self.follow)\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Key","title":"Key","text":"<pre><code>Key(name: str, value: int | None = None)\n</code></pre> <p>A class to represent an input key.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The key name.</p> </li> <li> <code>value</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The key value.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def __init__(self, name: str, value: int | None = None) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        name: The key name.\n        value: The key value.\n    \"\"\"\n    self.name = name\n    if value is None:\n        value = self.get_value(name)\n    self.value = value\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Keys","title":"Keys","text":"<p>The actions and their shortcuts keys.</p>"},{"location":"reference/aria2p/interface/#aria2p.interface.Palette","title":"Palette","text":"<p>A simple class to hold palettes getters.</p> <p>Methods:</p> <ul> <li> <code>name</code>             \u2013              <p>Return the palette for a NAME cell.</p> </li> <li> <code>status</code>             \u2013              <p>Return the palette for a STATUS cell.</p> </li> </ul>"},{"location":"reference/aria2p/interface/#aria2p.interface.Palette.name","title":"name  <code>staticmethod</code>","text":"<pre><code>name(value: str) -&gt; str | list[tuple[int, int, int]]\n</code></pre> <p>Return the palette for a NAME cell.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>@staticmethod\ndef name(value: str) -&gt; str | list[tuple[int, int, int]]:\n    \"\"\"Return the palette for a NAME cell.\"\"\"\n    if value.startswith(\"[METADATA]\"):\n        return (\n            [(Screen.COLOUR_GREEN, Screen.A_UNDERLINE, Screen.COLOUR_BLACK)] * 10\n            + [Interface.palettes[\"metadata\"]] * (len(value.strip()) - 10)\n            + [Interface.palettes[\"row\"]]\n        )\n    return \"name\"\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.Palette.status","title":"status  <code>staticmethod</code>","text":"<pre><code>status(value: str) -&gt; str\n</code></pre> <p>Return the palette for a STATUS cell.</p> Source code in <code>src/aria2p/interface.py</code> <pre><code>@staticmethod\ndef status(value: str) -&gt; str:\n    \"\"\"Return the palette for a STATUS cell.\"\"\"\n    return \"status_\" + value\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.color_palette_parser","title":"color_palette_parser","text":"<pre><code>color_palette_parser(palette: str) -&gt; tuple[int, int, int]\n</code></pre> <p>Return a color tuple (foreground color, mode, background color).</p> <p>Parameters:</p> <ul> <li> <code>palette</code>               (<code>str</code>)           \u2013            <p>The palette name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[int, int, int]</code>           \u2013            <p>Foreground color, mode, background color.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def color_palette_parser(palette: str) -&gt; tuple[int, int, int]:\n    \"\"\"Return a color tuple (foreground color, mode, background color).\n\n    Parameters:\n        palette: The palette name.\n\n    Returns:\n        Foreground color, mode, background color.\n    \"\"\"\n    default_colors = configs[\"DEFAULT\"][\"colors\"]\n    colors = configs.get(\"USER\", {}).get(\"colors\", default_colors)\n\n    # get values of colors and modes for ascimatics.screen module\n    color_map = {\n        \"BLACK\": Screen.COLOUR_BLACK,\n        \"WHITE\": Screen.COLOUR_WHITE,\n        \"RED\": Screen.COLOUR_RED,\n        \"CYAN\": Screen.COLOUR_CYAN,\n        \"YELLOW\": Screen.COLOUR_YELLOW,\n        \"BLUE\": Screen.COLOUR_BLUE,\n        \"GREEN\": Screen.COLOUR_GREEN,\n        \"DEFAULT\": Screen.COLOUR_DEFAULT,\n    }\n    mode_map = {\n        \"NORMAL\": Screen.A_NORMAL,\n        \"BOLD\": Screen.A_BOLD,\n        \"UNDERLINE\": Screen.A_UNDERLINE,\n        \"REVERSE\": Screen.A_REVERSE,\n    }\n\n    palette_colors = colors.get(palette, default_colors[palette])\n    palette_fg, palette_mode, palette_bg = palette_colors.split(\" \")\n\n    return (\n        color_map[palette_fg],\n        mode_map[palette_mode],\n        color_map[palette_bg],\n    )\n</code></pre>"},{"location":"reference/aria2p/interface/#aria2p.interface.key_bind_parser","title":"key_bind_parser","text":"<pre><code>key_bind_parser(action: str) -&gt; list[Key]\n</code></pre> <p>Return a list of Key instances.</p> <p>Parameters:</p> <ul> <li> <code>action</code>               (<code>str</code>)           \u2013            <p>The action name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Key]</code>           \u2013            <p>A list of keys.</p> </li> </ul> Source code in <code>src/aria2p/interface.py</code> <pre><code>def key_bind_parser(action: str) -&gt; list[Key]:\n    \"\"\"Return a list of Key instances.\n\n    Parameters:\n        action: The action name.\n\n    Returns:\n        A list of keys.\n    \"\"\"\n    default_bindings = configs[\"DEFAULT\"][\"key_bindings\"]\n    bindings = configs.get(\"USER\", {}).get(\"key_bindings\", default_bindings)\n\n    key_binds = bindings.get(action, default_bindings[action])\n\n    if isinstance(key_binds, list):\n        return [Key(k) for k in key_binds]\n    return [Key(key_binds)]\n</code></pre>"},{"location":"reference/aria2p/options/","title":"aria2p.options","text":""},{"location":"reference/aria2p/options/#aria2p.options","title":"options","text":"<p>Module for aria2c options.</p> <p>This module defines the Options class, which holds information retrieved with the <code>get_option</code> or <code>get_global_option</code> methods of the client.</p> <p>Classes:</p> <ul> <li> <code>Options</code>           \u2013            <p>This class holds information retrieved with the <code>get_option</code> or <code>get_global_option</code> methods of the client.</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options","title":"Options","text":"<pre><code>Options(\n    api: API, struct: dict, download: Download | None = None\n)\n</code></pre> <p>This class holds information retrieved with the <code>get_option</code> or <code>get_global_option</code> methods of the client.</p> <p>Instances are given a reference to an <code>API</code> instance to be able to change their values both locally and remotely, by using the API client and calling remote methods to change options.</p> <p>The options are available with the same names, using underscores instead of dashes, except for \"continue\" (which is a Python reserved keyword) which is here called \"continue_downloads\". For example, \"max-concurrent-downloads\" is used like <code>options.max_concurrent_downloads = 5</code>.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The reference to an <code>API</code> instance.</p> </li> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> <li> <code>download</code>               (<code>Download | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional <code>Download</code> object to inform about the owner, or None to tell they are global options.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get</code>             \u2013              <p>Get the value of an option given its name.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return a copy of the struct dictionary of this Options object.</p> </li> <li> <code>set</code>             \u2013              <p>Set the value of an option given its name.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>all_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>all-proxy</code> option value.</p> </li> <li> <code>all_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>all-proxy-passwd</code> option value.</p> </li> <li> <code>all_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>all-proxy-user</code> option value.</p> </li> <li> <code>allow_overwrite</code>               (<code>bool</code>)           \u2013            <p>Return the <code>allow-overwrite</code> option value.</p> </li> <li> <code>allow_piece_length_change</code>               (<code>bool</code>)           \u2013            <p>Return the <code>allow-piece-length-change</code> option value.</p> </li> <li> <code>always_resume</code>               (<code>bool</code>)           \u2013            <p>Return the <code>always-resume</code> option value.</p> </li> <li> <code>are_global</code>               (<code>bool</code>)           \u2013            <p>Tell if options are global, or tied to a Download object.</p> </li> <li> <code>async_dns</code>               (<code>bool</code>)           \u2013            <p>Return the <code>async-dns</code> option value.</p> </li> <li> <code>async_dns_server</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>async-dns-server</code> option value.</p> </li> <li> <code>auto_file_renaming</code>               (<code>bool</code>)           \u2013            <p>Return the <code>auto-file-renaming</code> option value.</p> </li> <li> <code>auto_save_interval</code>               (<code>int</code>)           \u2013            <p>Save a control file (*.aria2) every SEC seconds.</p> </li> <li> <code>bt_detach_seed_only</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-detach-seed-only</code> option value.</p> </li> <li> <code>bt_enable_hook_after_hash_check</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-enable-hook-after-hash-check</code> option value.</p> </li> <li> <code>bt_enable_lpd</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-enable-lpd</code> option value.</p> </li> <li> <code>bt_exclude_tracker</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>bt-exclude-tracker</code> option value.</p> </li> <li> <code>bt_external_ip</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-external-ip</code> option value.</p> </li> <li> <code>bt_force_encryption</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-force-encryption</code> option value.</p> </li> <li> <code>bt_hash_check_seed</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-hash-check-seed</code> option value.</p> </li> <li> <code>bt_lpd_interface</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-lpd-interface</code> option value.</p> </li> <li> <code>bt_max_open_files</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-max-open-files</code> option value.</p> </li> <li> <code>bt_max_peers</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-max-peers</code> option value.</p> </li> <li> <code>bt_metadata_only</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-metadata-only</code> option value.</p> </li> <li> <code>bt_min_crypto_level</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-min-crypto-level</code> option value.</p> </li> <li> <code>bt_prioritize_piece</code>               (<code>str</code>)           \u2013            <p>Return the <code>bt-prioritize-piece</code> option value.</p> </li> <li> <code>bt_remove_unselected_file</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-remove-unselected-file</code> option value.</p> </li> <li> <code>bt_request_peer_speed_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-request-peer-speed-limit</code> option value.</p> </li> <li> <code>bt_require_crypto</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-require-crypto</code> option value.</p> </li> <li> <code>bt_save_metadata</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-save-metadata</code> option value.</p> </li> <li> <code>bt_seed_unverified</code>               (<code>bool</code>)           \u2013            <p>Return the <code>bt-seed-unverified</code> option value.</p> </li> <li> <code>bt_stop_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-stop-timeout</code> option value.</p> </li> <li> <code>bt_tracker</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>bt-tracker</code> option value.</p> </li> <li> <code>bt_tracker_connect_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-tracker-connect-timeout</code> option value.</p> </li> <li> <code>bt_tracker_interval</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-tracker-interval</code> option value.</p> </li> <li> <code>bt_tracker_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>bt-tracker-timeout</code> option value.</p> </li> <li> <code>ca_certificate</code>               (<code>str</code>)           \u2013            <p>Return the <code>ca-certificate</code> option value.</p> </li> <li> <code>certificate</code>               (<code>str</code>)           \u2013            <p>Return the <code>certificate</code> option value.</p> </li> <li> <code>check_certificate</code>               (<code>bool</code>)           \u2013            <p>Return the <code>check-certificate</code> option value.</p> </li> <li> <code>check_integrity</code>               (<code>bool</code>)           \u2013            <p>Return the <code>check-integrity</code> option value.</p> </li> <li> <code>checksum</code>               (<code>str</code>)           \u2013            <p>Return the <code>checksum</code> option value.</p> </li> <li> <code>conditional_get</code>               (<code>bool</code>)           \u2013            <p>Return the <code>conditional-get</code> option value.</p> </li> <li> <code>conf_path</code>               (<code>str</code>)           \u2013            <p>Return the <code>conf-path</code> option value.</p> </li> <li> <code>connect_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>connect-timeout</code> option value.</p> </li> <li> <code>console_log_level</code>               (<code>str</code>)           \u2013            <p>Return the <code>console-log-level</code> option value.</p> </li> <li> <code>continue_downloads</code>               (<code>bool</code>)           \u2013            <p>Return the <code>continue-downloads</code> option value.</p> </li> <li> <code>daemon</code>               (<code>bool</code>)           \u2013            <p>Return the <code>daemon</code> option value.</p> </li> <li> <code>deferred_input</code>               (<code>bool</code>)           \u2013            <p>Return the <code>deferred-input</code> option value.</p> </li> <li> <code>dht_entry_point</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-entry-point</code> option value.</p> </li> <li> <code>dht_entry_point6</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-entry-point6</code> option value.</p> </li> <li> <code>dht_file_path</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-file-path</code> option value.</p> </li> <li> <code>dht_file_path6</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-file-path6</code> option value.</p> </li> <li> <code>dht_listen_addr6</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-listen-addr6</code> option value.</p> </li> <li> <code>dht_listen_port</code>               (<code>str</code>)           \u2013            <p>Return the <code>dht-listen-port</code> option value.</p> </li> <li> <code>dht_message_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>dht-message-timeout</code> option value.</p> </li> <li> <code>dir</code>               (<code>str</code>)           \u2013            <p>Return the <code>dir</code> option value.</p> </li> <li> <code>disable_ipv6</code>               (<code>bool</code>)           \u2013            <p>Return the <code>disable-ipv6</code> option value.</p> </li> <li> <code>disk_cache</code>               (<code>int</code>)           \u2013            <p>Return the <code>disk-cache</code> option value.</p> </li> <li> <code>download_result</code>               (<code>str</code>)           \u2013            <p>Return the <code>download-result</code> option value.</p> </li> <li> <code>dry_run</code>               (<code>bool</code>)           \u2013            <p>Return the <code>dry-run</code> option value.</p> </li> <li> <code>dscp</code>               (<code>str</code>)           \u2013            <p>Return the <code>dscp</code> option value.</p> </li> <li> <code>enable_color</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-color</code> option value.</p> </li> <li> <code>enable_dht</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-dht</code> option value.</p> </li> <li> <code>enable_dht6</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-dht6</code> option value.</p> </li> <li> <code>enable_http_keep_alive</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-http-keep-alive</code> option value.</p> </li> <li> <code>enable_http_pipelining</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-http-pipelining</code> option value.</p> </li> <li> <code>enable_mmap</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-mmap</code> option value.</p> </li> <li> <code>enable_peer_exchange</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-peer-exchange</code> option value.</p> </li> <li> <code>enable_rpc</code>               (<code>bool</code>)           \u2013            <p>Return the <code>enable-rpc</code> option value.</p> </li> <li> <code>event_poll</code>               (<code>str</code>)           \u2013            <p>Specify the method for polling events.</p> </li> <li> <code>file_allocation</code>               (<code>str</code>)           \u2013            <p>Return the <code>file-allocation</code> option value.</p> </li> <li> <code>follow_metalink</code>               (<code>str</code>)           \u2013            <p>Return the <code>follow-metalink</code> option value.</p> </li> <li> <code>follow_torrent</code>               (<code>str</code>)           \u2013            <p>Return the <code>follow-torrent</code> option value.</p> </li> <li> <code>force_save</code>               (<code>bool</code>)           \u2013            <p>Return the <code>force-save</code> option value.</p> </li> <li> <code>force_sequential</code>               (<code>bool</code>)           \u2013            <p>Return the <code>force-sequential</code> option value.</p> </li> <li> <code>ftp_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-passwd</code> option value.</p> </li> <li> <code>ftp_pasv</code>               (<code>bool</code>)           \u2013            <p>Return the <code>ftp-pasv</code> option value.</p> </li> <li> <code>ftp_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-proxy</code> option value.</p> </li> <li> <code>ftp_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-proxy-passwd</code> option value.</p> </li> <li> <code>ftp_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-proxy-user</code> option value.</p> </li> <li> <code>ftp_reuse_connection</code>               (<code>bool</code>)           \u2013            <p>Return the <code>ftp-reuse-connection</code> option value.</p> </li> <li> <code>ftp_type</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-type</code> option value.</p> </li> <li> <code>ftp_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>ftp-user</code> option value.</p> </li> <li> <code>gid</code>               (<code>str</code>)           \u2013            <p>Return the <code>gid</code> option value.</p> </li> <li> <code>hash_check_only</code>               (<code>bool</code>)           \u2013            <p>Return the <code>hash-check-only</code> option value.</p> </li> <li> <code>header</code>               (<code>str</code>)           \u2013            <p>Return the <code>header</code> option value.</p> </li> <li> <code>http_accept_gzip</code>               (<code>bool</code>)           \u2013            <p>Return the <code>http-accept-gzip</code> option value.</p> </li> <li> <code>http_auth_challenge</code>               (<code>bool</code>)           \u2013            <p>Return the <code>http-auth-challenge</code> option value.</p> </li> <li> <code>http_no_cache</code>               (<code>bool</code>)           \u2013            <p>Return the <code>http-no-cache</code> option value.</p> </li> <li> <code>http_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-passwd</code> option value.</p> </li> <li> <code>http_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-proxy</code> option value.</p> </li> <li> <code>http_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-proxy-passwd</code> option value.</p> </li> <li> <code>http_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-proxy-user</code> option value.</p> </li> <li> <code>http_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>http-user</code> option value.</p> </li> <li> <code>https_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>https-proxy</code> option value.</p> </li> <li> <code>https_proxy_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>https-proxy-passwd</code> option value.</p> </li> <li> <code>https_proxy_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>https-proxy-user</code> option value.</p> </li> <li> <code>human_readable</code>               (<code>bool</code>)           \u2013            <p>Return the <code>human-readable</code> option value.</p> </li> <li> <code>index_out</code>               (<code>str</code>)           \u2013            <p>Return the <code>index-out</code> option value.</p> </li> <li> <code>input_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>input-file</code> option value.</p> </li> <li> <code>interface</code>               (<code>str</code>)           \u2013            <p>Return the <code>interface</code> option value.</p> </li> <li> <code>keep_unfinished_download_result</code>               (<code>bool</code>)           \u2013            <p>Return the <code>keep-unfinished-download-result</code> option value.</p> </li> <li> <code>listen_port</code>               (<code>str</code>)           \u2013            <p>Return the <code>listen-port</code> option value.</p> </li> <li> <code>load_cookies</code>               (<code>str</code>)           \u2013            <p>Return the <code>load-cookies</code> option value.</p> </li> <li> <code>log</code>               (<code>str</code>)           \u2013            <p>Return the <code>log</code> option value.</p> </li> <li> <code>log_level</code>               (<code>str</code>)           \u2013            <p>Return the <code>log-level</code> option value.</p> </li> <li> <code>lowest_speed_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>lowest-speed-limit</code> option value.</p> </li> <li> <code>max_concurrent_downloads</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-concurrent-downloads</code> option value.</p> </li> <li> <code>max_connection_per_server</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-connection-per-server</code> option value.</p> </li> <li> <code>max_download_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-download-limit</code> option value.</p> </li> <li> <code>max_download_result</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-download-result</code> option value.</p> </li> <li> <code>max_file_not_found</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-file-not-found</code> option value.</p> </li> <li> <code>max_mmap_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-mmap-limit</code> option value.</p> </li> <li> <code>max_overall_download_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-overall-download-limit</code> option value.</p> </li> <li> <code>max_overall_upload_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-overall-upload-limit</code> option value.</p> </li> <li> <code>max_resume_failure_tries</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-resume-failure-tries</code> option value.</p> </li> <li> <code>max_tries</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-tries</code> option value.</p> </li> <li> <code>max_upload_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>max-upload-limit</code> option value.</p> </li> <li> <code>metalink_base_uri</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-base-uri</code> option value.</p> </li> <li> <code>metalink_enable_unique_protocol</code>               (<code>bool</code>)           \u2013            <p>Return the <code>metalink-enable-unique-protocol</code> option value.</p> </li> <li> <code>metalink_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-file</code> option value.</p> </li> <li> <code>metalink_language</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-language</code> option value.</p> </li> <li> <code>metalink_location</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>metalink-location</code> option value.</p> </li> <li> <code>metalink_os</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-os</code> option value.</p> </li> <li> <code>metalink_preferred_protocol</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-preferred-protocol</code> option value.</p> </li> <li> <code>metalink_version</code>               (<code>str</code>)           \u2013            <p>Return the <code>metalink-version</code> option value.</p> </li> <li> <code>min_split_size</code>               (<code>int</code>)           \u2013            <p>Return the <code>min-split-size</code> option value.</p> </li> <li> <code>min_tls_version</code>               (<code>str</code>)           \u2013            <p>Return the <code>min-tls-version</code> option value.</p> </li> <li> <code>multiple_interface</code>               (<code>list[str]</code>)           \u2013            <p>Return the <code>multiple-interface</code> option value.</p> </li> <li> <code>netrc_path</code>               (<code>str</code>)           \u2013            <p>Return the <code>netrc-path</code> option value.</p> </li> <li> <code>no_conf</code>               (<code>bool</code>)           \u2013            <p>Return the <code>no-conf</code> option value.</p> </li> <li> <code>no_file_allocation_limit</code>               (<code>int</code>)           \u2013            <p>Return the <code>no-file-allocation-limit</code> option value.</p> </li> <li> <code>no_netrc</code>               (<code>bool</code>)           \u2013            <p>Return the <code>no-netrc</code> option value.</p> </li> <li> <code>no_proxy</code>               (<code>str</code>)           \u2013            <p>Return the <code>no-proxy</code> option value.</p> </li> <li> <code>on_bt_download_complete</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-bt-download-complete</code> option value.</p> </li> <li> <code>on_download_complete</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-complete</code> option value.</p> </li> <li> <code>on_download_error</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-error</code> option value.</p> </li> <li> <code>on_download_pause</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-pause</code> option value.</p> </li> <li> <code>on_download_start</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-start</code> option value.</p> </li> <li> <code>on_download_stop</code>               (<code>str</code>)           \u2013            <p>Return the <code>on-download-stop</code> option value.</p> </li> <li> <code>optimize_concurrent_downloads</code>               (<code>str</code>)           \u2013            <p>Return the <code>optimize-concurrent-downloads</code> option value.</p> </li> <li> <code>out</code>               (<code>str</code>)           \u2013            <p>Return the <code>out</code> option value.</p> </li> <li> <code>parameterized_uri</code>               (<code>bool</code>)           \u2013            <p>Return the <code>parameterized-uri</code> option value.</p> </li> <li> <code>pause</code>               (<code>bool</code>)           \u2013            <p>Return the <code>pause</code> option value.</p> </li> <li> <code>pause_metadata</code>               (<code>bool</code>)           \u2013            <p>Return the <code>pause-metadata</code> option value.</p> </li> <li> <code>peer_id_prefix</code>               (<code>str</code>)           \u2013            <p>Return the <code>peer-id-prefix</code> option value.</p> </li> <li> <code>piece_length</code>               (<code>str</code>)           \u2013            <p>Return the <code>piece-length</code> option value.</p> </li> <li> <code>private_key</code>               (<code>str</code>)           \u2013            <p>Return the <code>private-key</code> option value.</p> </li> <li> <code>proxy_method</code>               (<code>str</code>)           \u2013            <p>Return the <code>proxy-method</code> option value.</p> </li> <li> <code>quiet</code>               (<code>bool</code>)           \u2013            <p>Return the <code>quiet</code> option value.</p> </li> <li> <code>realtime_chunk_checksum</code>               (<code>bool</code>)           \u2013            <p>Return the <code>realtime-chunk-checksum</code> option value.</p> </li> <li> <code>referer</code>               (<code>str</code>)           \u2013            <p>Return the <code>referer</code> option value.</p> </li> <li> <code>remote_time</code>               (<code>bool</code>)           \u2013            <p>Return the <code>remote-time</code> option value.</p> </li> <li> <code>remove_control_file</code>               (<code>bool</code>)           \u2013            <p>Return the <code>remove-control-file</code> option value.</p> </li> <li> <code>retry_wait</code>               (<code>int</code>)           \u2013            <p>Return the <code>retry-wait</code> option value.</p> </li> <li> <code>reuse_uri</code>               (<code>bool</code>)           \u2013            <p>Return the <code>reuse-uri</code> option value.</p> </li> <li> <code>rlimit_nofile</code>               (<code>int</code>)           \u2013            <p>Return the <code>rlimit-nofile</code> option value.</p> </li> <li> <code>rpc_allow_origin_all</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-allow-origin-all</code> option value.</p> </li> <li> <code>rpc_certificate</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-certificate</code> option value.</p> </li> <li> <code>rpc_listen_all</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-listen-all</code> option value.</p> </li> <li> <code>rpc_listen_port</code>               (<code>int</code>)           \u2013            <p>Return the <code>rpc-listen-port</code> option value.</p> </li> <li> <code>rpc_max_request_size</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-max-request-size</code> option value.</p> </li> <li> <code>rpc_passwd</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-passwd</code> option value.</p> </li> <li> <code>rpc_private_key</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-private-key</code> option value.</p> </li> <li> <code>rpc_save_upload_metadata</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-save-upload-metadata</code> option value.</p> </li> <li> <code>rpc_secret</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-secret</code> option value.</p> </li> <li> <code>rpc_secure</code>               (<code>bool</code>)           \u2013            <p>Return the <code>rpc-secure</code> option value.</p> </li> <li> <code>rpc_user</code>               (<code>str</code>)           \u2013            <p>Return the <code>rpc-user</code> option value.</p> </li> <li> <code>save_cookies</code>               (<code>str</code>)           \u2013            <p>Return the <code>save-cookies</code> option value.</p> </li> <li> <code>save_not_found</code>               (<code>bool</code>)           \u2013            <p>Return the <code>save-not-found</code> option value.</p> </li> <li> <code>save_session</code>               (<code>str</code>)           \u2013            <p>Return the <code>save-session</code> option value.</p> </li> <li> <code>save_session_interval</code>               (<code>int</code>)           \u2013            <p>Return the <code>save-session-interval</code> option value.</p> </li> <li> <code>seed_ratio</code>               (<code>float</code>)           \u2013            <p>Return the <code>seed-ratio</code> option value.</p> </li> <li> <code>seed_time</code>               (<code>float</code>)           \u2013            <p>Return the <code>seed-time</code> option value.</p> </li> <li> <code>select_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>select-file</code> option value.</p> </li> <li> <code>server_stat_if</code>               (<code>str</code>)           \u2013            <p>Return the <code>server-stat-if</code> option value.</p> </li> <li> <code>server_stat_of</code>               (<code>str</code>)           \u2013            <p>Return the <code>server-stat-of</code> option value.</p> </li> <li> <code>server_stat_timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>server-stat-timeout</code> option value.</p> </li> <li> <code>show_console_readout</code>               (<code>bool</code>)           \u2013            <p>Return the <code>show-console-readout</code> option value.</p> </li> <li> <code>show_files</code>               (<code>bool</code>)           \u2013            <p>Return the <code>show-files</code> option value.</p> </li> <li> <code>socket_recv_buffer_size</code>               (<code>int</code>)           \u2013            <p>Return the <code>socket-recv-buffer-size</code> option value.</p> </li> <li> <code>split</code>               (<code>int</code>)           \u2013            <p>Return the <code>split</code> option value.</p> </li> <li> <code>ssh_host_key_md</code>               (<code>str</code>)           \u2013            <p>Return the <code>ssh-host-key-md</code> option value.</p> </li> <li> <code>stderr</code>               (<code>bool</code>)           \u2013            <p>Return the <code>stderr</code> option value.</p> </li> <li> <code>stop</code>               (<code>int</code>)           \u2013            <p>Return the <code>stop</code> option value.</p> </li> <li> <code>stop_with_process</code>               (<code>int</code>)           \u2013            <p>Return the <code>stop-with-process</code> option value.</p> </li> <li> <code>stream_piece_selector</code>               (<code>str</code>)           \u2013            <p>Return the <code>stream-piece-selector</code> option value.</p> </li> <li> <code>summary_interval</code>               (<code>int</code>)           \u2013            <p>Return the <code>summary-interval</code> option value.</p> </li> <li> <code>timeout</code>               (<code>int</code>)           \u2013            <p>Return the <code>timeout</code> option value.</p> </li> <li> <code>torrent_file</code>               (<code>str</code>)           \u2013            <p>Return the <code>torrent-file</code> option value.</p> </li> <li> <code>truncate_console_readout</code>               (<code>bool</code>)           \u2013            <p>Return the <code>truncate-console-readout</code> option value.</p> </li> <li> <code>uri_selector</code>               (<code>str</code>)           \u2013            <p>Return the <code>uri-selector</code> option value.</p> </li> <li> <code>use_head</code>               (<code>bool</code>)           \u2013            <p>Return the <code>use-head</code> option value.</p> </li> <li> <code>user_agent</code>               (<code>str</code>)           \u2013            <p>Return the <code>user-agent</code> option value.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def __init__(self, api: API, struct: dict, download: Download | None = None):\n    \"\"\"Initialize the object.\n\n    Parameters:\n        api: The reference to an [`API`][aria2p.api.API] instance.\n        struct: A dictionary Python object returned by the JSON-RPC client.\n        download: An optional [`Download`][aria2p.downloads.Download] object\n            to inform about the owner, or None to tell they are global options.\n    \"\"\"\n    self.api = api\n    self.download = download\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/options/#aria2p.options.Options.all_proxy","title":"all_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>all_proxy: str\n</code></pre> <p>Return the <code>all-proxy</code> option value.</p> <p>Use a proxy server for all protocols.</p> <p>To override a previously defined proxy, use \"\". You also can override this setting and specify a proxy server for a particular protocol using --http-proxy, --https-proxy and --ftp-proxy options. This affects all downloads. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>. See also ENVIRONMENT section.</p> Note <p>If user and password are embedded in proxy URI and they are also specified by --{http,https,ftp, all}-proxy-{user,passwd}  options, those specified later override prior options. For example, if you specified http-proxy-user=myname, http-proxy-passwd=mypass in aria2.conf and you specified --http-proxy=\"http://proxy\" on the command-line, then you'd get HTTP proxy http://proxy with user myname and password mypass.</p> <p>Another example: if you specified on the command-line --http-proxy=\"http://user:pass@proxy\" --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\", then you'd get HTTP proxy http://proxy with user myname and password mypass.</p> <p>One more example:  if you specified in command-line --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\" --http-proxy=\"http://user:pass@proxy\", then you'd get HTTP proxy http://proxy with user user and password pass.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.all_proxy_passwd","title":"all_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>all_proxy_passwd: str\n</code></pre> <p>Return the <code>all-proxy-passwd</code> option value.</p> <p>Set password for --all-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.all_proxy_user","title":"all_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>all_proxy_user: str\n</code></pre> <p>Return the <code>all-proxy-user</code> option value.</p> <p>Set user for --all-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.allow_overwrite","title":"allow_overwrite  <code>property</code> <code>writable</code>","text":"<pre><code>allow_overwrite: bool\n</code></pre> <p>Return the <code>allow-overwrite</code> option value.</p> <p>Restart download from scratch if the corresponding control file doesn't exist.</p> <p>See also --auto-file-renaming option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.allow_piece_length_change","title":"allow_piece_length_change  <code>property</code> <code>writable</code>","text":"<pre><code>allow_piece_length_change: bool\n</code></pre> <p>Return the <code>allow-piece-length-change</code> option value.</p> <p>If false is given, aria2 aborts download when a piece length is different from one in a control file.</p> <p>If true is given, you can proceed but some download progress will be lost. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.always_resume","title":"always_resume  <code>property</code> <code>writable</code>","text":"<pre><code>always_resume: bool\n</code></pre> <p>Return the <code>always-resume</code> option value.</p> <p>Always resume download.</p> <p>If true is given, aria2 always tries to resume download and if resume is not possible, aborts download. If false is given, when all given URIs do not support resume or aria2 encounters N URIs which does not support resume (N is the value specified using --max-resume-failure-tries option), aria2 downloads file from scratch. See --max-resume-failure-tries option. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.are_global","title":"are_global  <code>property</code>","text":"<pre><code>are_global: bool\n</code></pre> <p>Tell if options are global, or tied to a Download object.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether these options are global.</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.async_dns","title":"async_dns  <code>property</code> <code>writable</code>","text":"<pre><code>async_dns: bool\n</code></pre> <p>Return the <code>async-dns</code> option value.</p> <p>Enable asynchronous DNS.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.async_dns_server","title":"async_dns_server  <code>property</code> <code>writable</code>","text":"<pre><code>async_dns_server: list[str]\n</code></pre> <p>Return the <code>async-dns-server</code> option value.</p> <p>Comma separated list of DNS server address used in asynchronous DNS resolver.</p> <p>Usually asynchronous DNS resolver reads DNS server addresses from /etc/resolv.conf. When this option is used, it uses DNS servers specified in this option instead of ones in /etc/resolv.conf. You can specify both IPv4 and IPv6 address. This option is useful when the system does not have /etc/resolv.conf and user does not have the permission to create it.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.auto_file_renaming","title":"auto_file_renaming  <code>property</code> <code>writable</code>","text":"<pre><code>auto_file_renaming: bool\n</code></pre> <p>Return the <code>auto-file-renaming</code> option value.</p> <p>Rename file name if the same file already exists.</p> <p>This option works only in HTTP(S)/FTP download. The new file name has a dot and a number(1..9999) appended after the name, but before the file extension, if any. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.auto_save_interval","title":"auto_save_interval  <code>property</code> <code>writable</code>","text":"<pre><code>auto_save_interval: int\n</code></pre> <p>Save a control file (*.aria2) every SEC seconds.</p> <p>If 0 is given, a control file is not saved during download. aria2 saves a control file when it stops regardless of the value. The possible values are between 0 to 600. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_detach_seed_only","title":"bt_detach_seed_only  <code>property</code> <code>writable</code>","text":"<pre><code>bt_detach_seed_only: bool\n</code></pre> <p>Return the <code>bt-detach-seed-only</code> option value.</p> <p>Exclude seed only downloads when counting concurrent active downloads (See -j option).</p> <p>This means that if -j3 is given and this option is turned on and 3 downloads are active and one of those enters seed mode, then it is excluded from active download count (thus it becomes 2), and the next download waiting in queue gets started. But be aware that seeding item is still recognized as active download in RPC method. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_enable_hook_after_hash_check","title":"bt_enable_hook_after_hash_check  <code>property</code> <code>writable</code>","text":"<pre><code>bt_enable_hook_after_hash_check: bool\n</code></pre> <p>Return the <code>bt-enable-hook-after-hash-check</code> option value.</p> <p>Allow hook command invocation after hash check (see -V option) in BitTorrent download.</p> <p>By default, when hash check succeeds, the command given by --on-bt-download-complete is executed. To disable this action, give false to this option. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_enable_lpd","title":"bt_enable_lpd  <code>property</code> <code>writable</code>","text":"<pre><code>bt_enable_lpd: bool\n</code></pre> <p>Return the <code>bt-enable-lpd</code> option value.</p> <p>Enable Local Peer Discovery.</p> <p>If a private flag is set in a torrent, aria2 doesn't use this feature for that download even if true is given. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_exclude_tracker","title":"bt_exclude_tracker  <code>property</code> <code>writable</code>","text":"<pre><code>bt_exclude_tracker: list[str]\n</code></pre> <p>Return the <code>bt-exclude-tracker</code> option value.</p> <p>Comma separated list of BitTorrent tracker's announce URI to remove.</p> <p>You can use special value * which matches all URIs, thus removes all announce URIs. When specifying * in shell command-line, don't forget to escape or quote it. See also --bt-tracker option.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_external_ip","title":"bt_external_ip  <code>property</code> <code>writable</code>","text":"<pre><code>bt_external_ip: str\n</code></pre> <p>Return the <code>bt-external-ip</code> option value.</p> <p>Specify the external IP address to use in BitTorrent download and DHT.</p> <p>It may be sent to BitTorrent tracker. For DHT, this option should be set to report that local node is downloading a particular torrent. This is critical to use DHT in a private network. Although this function is named external, it can accept any kind of IP addresses.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_force_encryption","title":"bt_force_encryption  <code>property</code> <code>writable</code>","text":"<pre><code>bt_force_encryption: bool\n</code></pre> <p>Return the <code>bt-force-encryption</code> option value.</p> <p>Requires BitTorrent message payload encryption with arc4.</p> <p>This is a shorthand of --bt-require-crypto --bt-min-crypto-level=arc4. This option does not change the option value of those options. If true is given, deny legacy BitTorrent handshake and only use Obfuscation handshake and always encrypt message payload. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_hash_check_seed","title":"bt_hash_check_seed  <code>property</code> <code>writable</code>","text":"<pre><code>bt_hash_check_seed: bool\n</code></pre> <p>Return the <code>bt-hash-check-seed</code> option value.</p> <p>If true is given, after hash check using --check-integrity option and file is complete, continue to seed file.</p> <p>If you want to check file and download it only when it is damaged or incomplete, set this option to false. This option has effect only on BitTorrent download. Default: true</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_lpd_interface","title":"bt_lpd_interface  <code>property</code> <code>writable</code>","text":"<pre><code>bt_lpd_interface: str\n</code></pre> <p>Return the <code>bt-lpd-interface</code> option value.</p> <p>Use given interface for Local Peer Discovery.</p> <p>If this option is not specified, the default interface is chosen. You can specify interface name and IP address. Possible Values: interface, IP address.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_max_open_files","title":"bt_max_open_files  <code>property</code> <code>writable</code>","text":"<pre><code>bt_max_open_files: int\n</code></pre> <p>Return the <code>bt-max-open-files</code> option value.</p> <p>Specify maximum number of files to open in multi-file BitTorrent/Metalink download globally.</p> <p>Default: 100.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_max_peers","title":"bt_max_peers  <code>property</code> <code>writable</code>","text":"<pre><code>bt_max_peers: int\n</code></pre> <p>Return the <code>bt-max-peers</code> option value.</p> <p>Specify the maximum number of peers per torrent. 0 means unlimited.</p> <p>See also --bt-request-peer-speed-limit option. Default: 55.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_metadata_only","title":"bt_metadata_only  <code>property</code> <code>writable</code>","text":"<pre><code>bt_metadata_only: bool\n</code></pre> <p>Return the <code>bt-metadata-only</code> option value.</p> <p>Download meta data only.</p> <p>The file(s) described in meta data will not be downloaded. This option has effect only when BitTorrent Magnet URI is used. See also --bt-save-metadata option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_min_crypto_level","title":"bt_min_crypto_level  <code>property</code> <code>writable</code>","text":"<pre><code>bt_min_crypto_level: str\n</code></pre> <p>Return the <code>bt-min-crypto-level</code> option value.</p> <p>Set minimum level of encryption method (plain/arc4).</p> <p>If several encryption methods are provided by a peer, aria2 chooses the lowest one which satisfies the given level. Default: plain.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_prioritize_piece","title":"bt_prioritize_piece  <code>property</code> <code>writable</code>","text":"<pre><code>bt_prioritize_piece: str\n</code></pre> <p>Return the <code>bt-prioritize-piece</code> option value.</p> <p>Try to download first and last pieces of each file first (head[=<code>&lt;SIZE&gt;</code>],tail[=<code>&lt;SIZE&gt;</code>]).</p> <p>This is useful for previewing files. The argument can contain 2 keywords: head and tail. To include both keywords, they must be separated by comma. These keywords can take one parameter, SIZE. For example, if head=<code>&lt;SIZE&gt;</code> is specified, pieces in the range of first SIZE bytes of each file get higher priority. tail=<code>&lt;SIZE&gt;</code> means the range of last SIZE bytes of each file. SIZE can include K or M (1K = 1024, 1M = 1024K). If SIZE is omitted, SIZE=1M is used.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_remove_unselected_file","title":"bt_remove_unselected_file  <code>property</code> <code>writable</code>","text":"<pre><code>bt_remove_unselected_file: bool\n</code></pre> <p>Return the <code>bt-remove-unselected-file</code> option value.</p> <p>Removes the unselected files when download is completed in BitTorrent.</p> <p>To select files, use --select-file option. If it is not used, all files are assumed to be selected. Please use this option with care because it will actually remove files from your disk. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_request_peer_speed_limit","title":"bt_request_peer_speed_limit  <code>property</code> <code>writable</code>","text":"<pre><code>bt_request_peer_speed_limit: int\n</code></pre> <p>Return the <code>bt-request-peer-speed-limit</code> option value.</p> <p>If the whole download speed of every torrent is lower than SPEED, aria2 temporarily increases the number of peers to try for more download speed.</p> <p>Configuring this option with your preferred download speed can increase your download speed in some cases. You can append K or M (1K = 1024, 1M = 1024K). Default: 50K.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_require_crypto","title":"bt_require_crypto  <code>property</code> <code>writable</code>","text":"<pre><code>bt_require_crypto: bool\n</code></pre> <p>Return the <code>bt-require-crypto</code> option value.</p> <p>If true is given, aria2 doesn't accept and establish connection with legacy BitTorrent handshake (BitTorrent protocol).</p> <p>Thus aria2 always uses Obfuscation handshake. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_save_metadata","title":"bt_save_metadata  <code>property</code> <code>writable</code>","text":"<pre><code>bt_save_metadata: bool\n</code></pre> <p>Return the <code>bt-save-metadata</code> option value.</p> <p>Save meta data as \".torrent\" file.</p> <p>This option has effect only when BitTorrent Magnet URI is used. The file name is hex encoded info hash with suffix \".torrent\". The directory to be saved is the same directory where download file is saved. If the same file already exists, meta data is not saved. See also --bt-metadata-only option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_seed_unverified","title":"bt_seed_unverified  <code>property</code> <code>writable</code>","text":"<pre><code>bt_seed_unverified: bool\n</code></pre> <p>Return the <code>bt-seed-unverified</code> option value.</p> <p>Seed previously downloaded files without verifying piece hashes.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_stop_timeout","title":"bt_stop_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>bt_stop_timeout: int\n</code></pre> <p>Return the <code>bt-stop-timeout</code> option value.</p> <p>Stop BitTorrent download if download speed is 0 in consecutive SEC seconds.</p> <p>If 0 is given, this feature is disabled. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_tracker","title":"bt_tracker  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker: list[str]\n</code></pre> <p>Return the <code>bt-tracker</code> option value.</p> <p>Comma separated list of additional BitTorrent tracker's announce URI.</p> <p>These URIs are not affected by --bt-exclude-tracker option because they are added after URIs in --bt-exclude-tracker option are removed.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_tracker_connect_timeout","title":"bt_tracker_connect_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker_connect_timeout: int\n</code></pre> <p>Return the <code>bt-tracker-connect-timeout</code> option value.</p> <p>Set the connect timeout in seconds to establish connection to tracker.</p> <p>After the connection is established, this option makes no effect and --bt-tracker-timeout option is used instead. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_tracker_interval","title":"bt_tracker_interval  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker_interval: int\n</code></pre> <p>Return the <code>bt-tracker-interval</code> option value.</p> <p>Set the interval in seconds between tracker requests.</p> <p>This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker. If 0 is set, aria2 determines interval based on the response of tracker and the download progress. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.bt_tracker_timeout","title":"bt_tracker_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>bt_tracker_timeout: int\n</code></pre> <p>Return the <code>bt-tracker-timeout</code> option value.</p> <p>Set timeout in seconds.</p> <p>Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ca_certificate","title":"ca_certificate  <code>property</code> <code>writable</code>","text":"<pre><code>ca_certificate: str\n</code></pre> <p>Return the <code>ca-certificate</code> option value.</p> <p>Use the certificate authorities in FILE to verify the peers.</p> <p>The certificate file must be in PEM format and can contain multiple CA certificates. Use --check-certificate option to enable verification.</p> Note <p>If you build with OpenSSL or the recent version of GnuTLS which has gnutls_certificateset_x509_system_trust() function and the library is properly configured to locate the system-wide CA certificates store, aria2 will automatically load those certificates at the startup.</p> Note <p>WinTLS and AppleTLS do not support this option. Instead you will have to import the certificate into the OS trust store.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.certificate","title":"certificate  <code>property</code> <code>writable</code>","text":"<pre><code>certificate: str\n</code></pre> <p>Return the <code>certificate</code> option value.</p> <p>Use the client certificate in FILE.</p> <p>The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format.</p> <p>PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened!</p> <p>When using PEM, you have to specify the private key via --private-key as well.</p> Note <p>WinTLS does not support PEM files at the moment. Users have to use PKCS12 files.</p> Note <p>AppleTLS users should use the KeyChain Access utility to import the client certificate and get the SHA-1 fingerprint from the Information dialog corresponding to that certificate. To start aria2c use --certificate=<code>&lt;SHA-1&gt;</code>. Alternatively PKCS12 files are also supported. PEM files, however, are not supported.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.check_certificate","title":"check_certificate  <code>property</code> <code>writable</code>","text":"<pre><code>check_certificate: bool\n</code></pre> <p>Return the <code>check-certificate</code> option value.</p> <p>Verify the peer using certificates specified in --ca-certificate option.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.check_integrity","title":"check_integrity  <code>property</code> <code>writable</code>","text":"<pre><code>check_integrity: bool\n</code></pre> <p>Return the <code>check-integrity</code> option value.</p> <p>Check file integrity by validating piece hashes or a hash of entire file.</p> <p>This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with --checksum option. If piece hashes are provided, this option can detect damaged portions of a file and re-download them. If a hash of entire file is provided, hash check is only done when file has been already downloaded. This is determined by file length. If hash check fails, file is re-downloaded from scratch. If both piece hashes and a hash of entire file are provided, only piece hashes are used. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.checksum","title":"checksum  <code>property</code> <code>writable</code>","text":"<pre><code>checksum: str\n</code></pre> <p>Return the <code>checksum</code> option value.</p> <p>Set checksum (<code>&lt;TYPE&gt;=&lt;DIGEST&gt;</code>).</p> <p>TYPE is hash type. The supported hash type is listed in Hash Algorithms in aria2c -v. DIGEST is hex digest. For example, setting sha-1 digest looks like this: sha-1=0192ba11326fe2298c8cb4de616f4d4140213838 This option applies only to HTTP(S)/FTP downloads.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.conditional_get","title":"conditional_get  <code>property</code> <code>writable</code>","text":"<pre><code>conditional_get: bool\n</code></pre> <p>Return the <code>conditional-get</code> option value.</p> <p>Download file only when the local file is older than remote file.</p> <p>This function only works with HTTP(S) downloads only. It does not work if file size is specified in Metalink. It also ignores Content-Disposition header. If a control file exists, this option will be ignored. This function uses If-Modified-Since header to get only newer file conditionally. When getting modification time of local file, it uses user supplied file name (see --out option) or file name part in URI if --out is not specified. To overwrite existing file, --allow-overwrite is required. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.conf_path","title":"conf_path  <code>property</code> <code>writable</code>","text":"<pre><code>conf_path: str\n</code></pre> <p>Return the <code>conf-path</code> option value.</p> <p>Change the configuration file path to PATH.</p> <p>Default: $HOME/.aria2/aria2.conf if present, otherwise $XDG_CONFIG_HOME/aria2/aria2.conf.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.connect_timeout","title":"connect_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>connect_timeout: int\n</code></pre> <p>Return the <code>connect-timeout</code> option value.</p> <p>Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server.</p> <p>After the connection is established, this option makes no effect and --timeout option is used instead. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.console_log_level","title":"console_log_level  <code>property</code> <code>writable</code>","text":"<pre><code>console_log_level: str\n</code></pre> <p>Return the <code>console-log-level</code> option value.</p> <p>Set log level to output to console.</p> <p>LEVEL is either debug, info, notice, warn or error. Default: notice.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.continue_downloads","title":"continue_downloads  <code>property</code> <code>writable</code>","text":"<pre><code>continue_downloads: bool\n</code></pre> <p>Return the <code>continue-downloads</code> option value.</p> <p>Continue downloading a partially downloaded file.</p> <p>Use this option to resume a download started by a web browser or another program which downloads files sequentially from the beginning. Currently this option is only applicable to HTTP(S)/FTP downloads.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.daemon","title":"daemon  <code>property</code> <code>writable</code>","text":"<pre><code>daemon: bool\n</code></pre> <p>Return the <code>daemon</code> option value.</p> <p>Run as daemon.</p> <p>The current working directory will be changed to / and standard input, standard output and standard error will be redirected to /dev/null. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.deferred_input","title":"deferred_input  <code>property</code> <code>writable</code>","text":"<pre><code>deferred_input: bool\n</code></pre> <p>Return the <code>deferred-input</code> option value.</p> <p>If true is given, aria2 does not read all URIs and options from file specified by --input-file option at startup, but it reads one by one when it needs later.</p> <p>This may reduce memory usage if input file contains a lot of URIs to download. If false is given, aria2 reads all URIs and options at startup. Default: false.</p> Warning <p>--deferred-input option will be disabled when --save-session is used together.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dht_entry_point","title":"dht_entry_point  <code>property</code> <code>writable</code>","text":"<pre><code>dht_entry_point: str\n</code></pre> <p>Return the <code>dht-entry-point</code> option value.</p> <p>Set host and port as an entry point to IPv4 DHT network (<code>&lt;HOST&gt;</code>:<code>&lt;PORT&gt;</code>).</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dht_entry_point6","title":"dht_entry_point6  <code>property</code> <code>writable</code>","text":"<pre><code>dht_entry_point6: str\n</code></pre> <p>Return the <code>dht-entry-point6</code> option value.</p> <p>Set host and port as an entry point to IPv6 DHT network (<code>&lt;HOST&gt;</code>:<code>&lt;PORT&gt;</code>).</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dht_file_path","title":"dht_file_path  <code>property</code> <code>writable</code>","text":"<pre><code>dht_file_path: str\n</code></pre> <p>Return the <code>dht-file-path</code> option value.</p> <p>Change the IPv4 DHT routing table file to PATH.</p> <p>Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dht_file_path6","title":"dht_file_path6  <code>property</code> <code>writable</code>","text":"<pre><code>dht_file_path6: str\n</code></pre> <p>Return the <code>dht-file-path6</code> option value.</p> <p>Change the IPv6 DHT routing table file to PATH.</p> <p>Default: $HOME/.aria2/dht6.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht6.dat.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dht_listen_addr6","title":"dht_listen_addr6  <code>property</code> <code>writable</code>","text":"<pre><code>dht_listen_addr6: str\n</code></pre> <p>Return the <code>dht-listen-addr6</code> option value.</p> <p>Specify address to bind socket for IPv6 DHT.</p> <p>It should be a global unicast IPv6 address of the host.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dht_listen_port","title":"dht_listen_port  <code>property</code> <code>writable</code>","text":"<pre><code>dht_listen_port: str\n</code></pre> <p>Return the <code>dht-listen-port</code> option value.</p> <p>Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker.</p> <p>Multiple ports can be specified by using ,, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together. Default: 6881-6999.</p> Note <p>Make sure that the specified ports are open for incoming UDP traffic.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dht_message_timeout","title":"dht_message_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>dht_message_timeout: int\n</code></pre> <p>Return the <code>dht-message-timeout</code> option value.</p> <p>Set timeout in seconds.</p> <p>Default: 10.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dir","title":"dir  <code>property</code> <code>writable</code>","text":"<pre><code>dir: str\n</code></pre> <p>Return the <code>dir</code> option value.</p> <p>The directory to store the downloaded file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.disable_ipv6","title":"disable_ipv6  <code>property</code> <code>writable</code>","text":"<pre><code>disable_ipv6: bool\n</code></pre> <p>Return the <code>disable-ipv6</code> option value.</p> <p>Disable IPv6.</p> <p>This is useful if you have to use broken DNS and want to avoid terribly slow AAAA record lookup. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.disk_cache","title":"disk_cache  <code>property</code> <code>writable</code>","text":"<pre><code>disk_cache: int\n</code></pre> <p>Return the <code>disk-cache</code> option value.</p> <p>Enable disk cache.</p> <p>If SIZE is 0, the disk cache is disabled. This feature caches the downloaded data in memory, which grows to at most SIZE bytes. The cache storage is created for aria2 instance and shared by all downloads. The one advantage of the disk cache is reduce the disk I/O because the data are written in larger unit and it is reordered by the offset of the file. If hash checking is involved and the data are cached in memory, we don't need to read them from the disk. SIZE can include K or M (1K = 1024, 1M = 1024K). Default: 16M.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.download_result","title":"download_result  <code>property</code> <code>writable</code>","text":"<pre><code>download_result: str\n</code></pre> <p>Return the <code>download-result</code> option value.</p> <p>This option changes the way Download Results is formatted.</p> <p>If OPT is default, print GID, status, average download speed and path/URI. If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted. If OPT is full, print GID, status, average download speed, percentage of progress and path/URI. The percentage of progress and path/URI are printed for each requested file in each row. If OPT is hide, Download Results is hidden. Default: default.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dry_run","title":"dry_run  <code>property</code> <code>writable</code>","text":"<pre><code>dry_run: bool\n</code></pre> <p>Return the <code>dry-run</code> option value.</p> <p>If true is given, aria2 just checks whether the remote file is available and doesn't download data.</p> <p>This option has effect on HTTP/FTP download. BitTorrent downloads are canceled if true is specified. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.dscp","title":"dscp  <code>property</code> <code>writable</code>","text":"<pre><code>dscp: str\n</code></pre> <p>Return the <code>dscp</code> option value.</p> <p>Set DSCP value in outgoing IP packets of BitTorrent traffic for QoS.</p> <p>This parameter sets only DSCP bits in TOS field of IP packets, not the whole field. If you take values from /usr/include/netinet/ip.h divide them by 4 (otherwise values would be incorrect, e.g. your CS1 class would turn into CS4). If you take commonly used values from RFC, network vendors' documentation, Wikipedia or any other source, use them as they are.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_color","title":"enable_color  <code>property</code> <code>writable</code>","text":"<pre><code>enable_color: bool\n</code></pre> <p>Return the <code>enable-color</code> option value.</p> <p>Enable color output for a terminal.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_dht","title":"enable_dht  <code>property</code> <code>writable</code>","text":"<pre><code>enable_dht: bool\n</code></pre> <p>Return the <code>enable-dht</code> option value.</p> <p>Enable IPv4 DHT functionality.</p> <p>It also enables UDP tracker support. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_dht6","title":"enable_dht6  <code>property</code> <code>writable</code>","text":"<pre><code>enable_dht6: bool\n</code></pre> <p>Return the <code>enable-dht6</code> option value.</p> <p>Enable IPv6 DHT functionality.</p> <p>If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Use --dht-listen-port option to specify port number to listen on. See also --dht-listen-addr6 option.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_http_keep_alive","title":"enable_http_keep_alive  <code>property</code> <code>writable</code>","text":"<pre><code>enable_http_keep_alive: bool\n</code></pre> <p>Return the <code>enable-http-keep-alive</code> option value.</p> <p>Enable HTTP/1.1 persistent connection.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_http_pipelining","title":"enable_http_pipelining  <code>property</code> <code>writable</code>","text":"<pre><code>enable_http_pipelining: bool\n</code></pre> <p>Return the <code>enable-http-pipelining</code> option value.</p> <p>Enable HTTP/1.1 pipelining.</p> <p>Default: False.</p> Note <p>In performance perspective, there is usually no advantage to enable this option.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_mmap","title":"enable_mmap  <code>property</code> <code>writable</code>","text":"<pre><code>enable_mmap: bool\n</code></pre> <p>Return the <code>enable-mmap</code> option value.</p> <p>Map files into memory.</p> <p>This option may not work if the file space is not pre-allocated. See --file-allocation. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_peer_exchange","title":"enable_peer_exchange  <code>property</code> <code>writable</code>","text":"<pre><code>enable_peer_exchange: bool\n</code></pre> <p>Return the <code>enable-peer-exchange</code> option value.</p> <p>Enable Peer Exchange extension.</p> <p>If a private flag is set in a torrent, this feature is disabled for that download even if true is given. Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.enable_rpc","title":"enable_rpc  <code>property</code> <code>writable</code>","text":"<pre><code>enable_rpc: bool\n</code></pre> <p>Return the <code>enable-rpc</code> option value.</p> <p>Enable JSON-RPC/XML-RPC server.</p> <p>It is strongly recommended to set secret authorization token using --rpc-secret option. See also --rpc-listen-port option. Default: false</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.event_poll","title":"event_poll  <code>property</code> <code>writable</code>","text":"<pre><code>event_poll: str\n</code></pre> <p>Specify the method for polling events.</p> <p>The possible values are epoll, kqueue, port, poll and select. For each epoll, kqueue, port and poll, it is available if system supports it. epoll is available on recent Linux. kqueue is available on various *BSD systems including Mac OS X. port is available on Open Solaris. The default value may vary depending on the system you use.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.file_allocation","title":"file_allocation  <code>property</code> <code>writable</code>","text":"<pre><code>file_allocation: str\n</code></pre> <p>Return the <code>file-allocation</code> option value.</p> <p>Specify file allocation method.</p> <p>Possible Values: <code>none</code>, <code>prealloc</code>, <code>trunc</code>, <code>falloc</code>.</p> <ul> <li><code>none</code>: Doesn't pre-allocate file space.</li> <li> <p><code>prealloc</code>: Pre-allocates file space before download begins. This may take some time depending on the size of the file.</p> </li> <li> <p><code>falloc</code>: If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW   build only), falloc is your best choice. It allocates large(few GiB) files almost instantly. Don't use falloc   with legacy file systems such as ext3 and FAT32 because it takes almost same time as prealloc and it blocks   aria2 entirely until allocation finishes. falloc may not be available if your system doesn't have   posix_fallocate(3) function.</p> </li> <li><code>trunc</code>: Uses ftruncate(2) system call or platform-specific counterpart to truncate a file to a specified length.</li> </ul> <p>Default: <code>prealloc</code>.</p> Warning <p>Using trunc seemingly allocates disk space very quickly, but what it actually does is that it sets file length metadata in file system, and does not allocate disk space at all. This means that it does not help avoiding fragmentation.</p> Note <p>In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.follow_metalink","title":"follow_metalink  <code>property</code> <code>writable</code>","text":"<pre><code>follow_metalink: str\n</code></pre> <p>Return the <code>follow-metalink</code> option value.</p> <p>If true or mem is specified, when a file whose suffix is .meta4 or .metalink or content type of application/metalink4+xml or application/metalink+xml is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it.</p> <p>If mem is specified, a metalink file is not written to the disk, but is just kept in memory. If false is specified, the .metalink file is downloaded to the disk, but is not parsed as a metalink file and its contents are not downloaded. Default: true.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.follow_torrent","title":"follow_torrent  <code>property</code> <code>writable</code>","text":"<pre><code>follow_torrent: str\n</code></pre> <p>Return the <code>follow-torrent</code> option value.</p> <p>If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it.</p> <p>If mem is specified, a torrent file is not written to the disk, but is just kept in memory. If false is specified, the .torrent file is downloaded to the disk, but is not parsed as a torrent and its contents are not downloaded. Default: true.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.force_save","title":"force_save  <code>property</code> <code>writable</code>","text":"<pre><code>force_save: bool\n</code></pre> <p>Return the <code>force-save</code> option value.</p> <p>Save download with --save-session option even if the download is completed or removed.</p> <p>This option also saves control file in that situations. This may be useful to save BitTorrent seeding which is recognized as completed state. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.force_sequential","title":"force_sequential  <code>property</code> <code>writable</code>","text":"<pre><code>force_sequential: bool\n</code></pre> <p>Return the <code>force-sequential</code> option value.</p> <p>Fetch URIs in the command-line sequentially and download each URI in a separate session, like the usual command-line download utilities.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_passwd","title":"ftp_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_passwd: str\n</code></pre> <p>Return the <code>ftp-passwd</code> option value.</p> <p>Set FTP password. This affects all URIs.</p> <p>If user name is embedded but password is missing in URI, aria2 tries to resolve password using .netrc. If password is found in .netrc, then use it as password. If not, use the password specified in this option. Default: ARIA2USER@.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_pasv","title":"ftp_pasv  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_pasv: bool\n</code></pre> <p>Return the <code>ftp-pasv</code> option value.</p> <p>Use the passive mode in FTP.</p> <p>If false is given, the active mode will be used. Default: true.</p> Note <p>This option is ignored for SFTP transfer.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_proxy","title":"ftp_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_proxy: str\n</code></pre> <p>Return the <code>ftp-proxy</code> option value.</p> <p>Use a proxy server for FTP.</p> <p>To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all ftp downloads. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_proxy_passwd","title":"ftp_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_proxy_passwd: str\n</code></pre> <p>Return the <code>ftp-proxy-passwd</code> option value.</p> <p>Set password for --ftp-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_proxy_user","title":"ftp_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_proxy_user: str\n</code></pre> <p>Return the <code>ftp-proxy-user</code> option value.</p> <p>Set user for --ftp-proxy option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_reuse_connection","title":"ftp_reuse_connection  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_reuse_connection: bool\n</code></pre> <p>Return the <code>ftp-reuse-connection</code> option value.</p> <p>Reuse connection in FTP.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_type","title":"ftp_type  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_type: str\n</code></pre> <p>Return the <code>ftp-type</code> option value.</p> <p>Set FTP transfer type.</p> <p>TYPE is either binary or ascii. Default: binary.</p> Note <p>This option is ignored for SFTP transfer.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ftp_user","title":"ftp_user  <code>property</code> <code>writable</code>","text":"<pre><code>ftp_user: str\n</code></pre> <p>Return the <code>ftp-user</code> option value.</p> <p>Set FTP user. This affects all URIs.</p> <p>Default: anonymous.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.gid","title":"gid  <code>property</code> <code>writable</code>","text":"<pre><code>gid: str\n</code></pre> <p>Return the <code>gid</code> option value.</p> <p>Set GID manually.</p> <p>aria2 identifies each download by the ID called GID. The GID must be hex string of 16 characters, thus [0-9a-zA-Z] are allowed and leading zeros must not be stripped. The GID all 0 is reserved and must not be used. The GID must be unique, otherwise error is reported and the download is not added. This option is useful when restoring the sessions saved using --save-session option. If this option is not used, new GID is generated by aria2.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.hash_check_only","title":"hash_check_only  <code>property</code> <code>writable</code>","text":"<pre><code>hash_check_only: bool\n</code></pre> <p>Return the <code>hash-check-only</code> option value.</p> <p>If true is given, after hash check using --check-integrity option, abort download whether or not download is complete.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.header","title":"header  <code>property</code> <code>writable</code>","text":"<pre><code>header: str\n</code></pre> <p>Return the <code>header</code> option value.</p> <p>Append HEADER to HTTP request header.</p> <p>You can use this option repeatedly to specify more than one header:</p> <pre><code>$ aria2c --header=\"X-A: b78\" --header=\"X-B: 9J1\" \"http://host/file\"\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_accept_gzip","title":"http_accept_gzip  <code>property</code> <code>writable</code>","text":"<pre><code>http_accept_gzip: bool\n</code></pre> <p>Return the <code>http-accept-gzip</code> option value.</p> <p>Send Accept: deflate, gzip request header and inflate response if remote server responds with Content-Encoding:  gzip or Content-Encoding:  deflate.</p> <p>Default: False.</p> Note <p>Some server responds with Content-Encoding: gzip for files which itself is gzipped file. aria2 inflates them anyway because of the response header.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_auth_challenge","title":"http_auth_challenge  <code>property</code> <code>writable</code>","text":"<pre><code>http_auth_challenge: bool\n</code></pre> <p>Return the <code>http-auth-challenge</code> option value.</p> <p>Send HTTP authorization header only when it is requested by the server.</p> <p>If false is set, then authorization header is always sent to the server. There is an exception: if user name and password are embedded in URI, authorization header is always sent to the server regardless of this option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_no_cache","title":"http_no_cache  <code>property</code> <code>writable</code>","text":"<pre><code>http_no_cache: bool\n</code></pre> <p>Return the <code>http-no-cache</code> option value.</p> <p>Send Cache-Control:  no-cache and Pragma:  no-cache header to avoid cached content.</p> <p>If false is given, these headers are not sent and you can add Cache-Control header with a directive you like using --header option. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_passwd","title":"http_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>http_passwd: str\n</code></pre> <p>Return the <code>http-passwd</code> option value.</p> <p>Set HTTP password. This affects all URIs.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_proxy","title":"http_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>http_proxy: str\n</code></pre> <p>Return the <code>http-proxy</code> option value.</p> <p>Use a proxy server for HTTP.</p> <p>To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all http downloads. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_proxy_passwd","title":"http_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>http_proxy_passwd: str\n</code></pre> <p>Return the <code>http-proxy-passwd</code> option value.</p> <p>Set password for --http-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_proxy_user","title":"http_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>http_proxy_user: str\n</code></pre> <p>Return the <code>http-proxy-user</code> option value.</p> <p>Set user for --http-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.http_user","title":"http_user  <code>property</code> <code>writable</code>","text":"<pre><code>http_user: str\n</code></pre> <p>Return the <code>http-user</code> option value.</p> <p>Set HTTP user. This affects all URIs.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.https_proxy","title":"https_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>https_proxy: str\n</code></pre> <p>Return the <code>https-proxy</code> option value.</p> <p>Use a proxy server for HTTPS.</p> <p>To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all https download. The format of PROXY is <code>[http://][USER:PASSWORD@]HOST[:PORT]</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.https_proxy_passwd","title":"https_proxy_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>https_proxy_passwd: str\n</code></pre> <p>Return the <code>https-proxy-passwd</code> option value.</p> <p>Set password for --https-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.https_proxy_user","title":"https_proxy_user  <code>property</code> <code>writable</code>","text":"<pre><code>https_proxy_user: str\n</code></pre> <p>Return the <code>https-proxy-user</code> option value.</p> <p>Set user for --https-proxy.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.human_readable","title":"human_readable  <code>property</code> <code>writable</code>","text":"<pre><code>human_readable: bool\n</code></pre> <p>Return the <code>human-readable</code> option value.</p> <p>Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi) in the console readout.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.index_out","title":"index_out  <code>property</code> <code>writable</code>","text":"<pre><code>index_out: str\n</code></pre> <p>Return the <code>index-out</code> option value.</p> <p>Set file path for file with index=INDEX (<code>&lt;INDEX&gt;=&lt;PATH&gt;</code>).</p> <p>You can find the file index using the --show-files option. PATH is a relative path to the path specified in --dir option. You can use this option multiple times. Using this option, you can specify the output file names of BitTorrent downloads.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.input_file","title":"input_file  <code>property</code> <code>writable</code>","text":"<pre><code>input_file: str\n</code></pre> <p>Return the <code>input-file</code> option value.</p> <p>Downloads the URIs listed in FILE.</p> <p>You can specify multiple sources for a single entity by putting multiple URIs on a single line separated by the TAB character. Additionally, options can be specified after each URI line. Option lines must start with one or more white space characters (SPACE or TAB) and must only contain one option per line. Input files can use gzip compression. When FILE is specified as -, aria2 will read the input from stdin. See the Input File subsection for details. See also the --deferred-input option. See also the --save-session option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.interface","title":"interface  <code>property</code> <code>writable</code>","text":"<pre><code>interface: str\n</code></pre> <p>Return the <code>interface</code> option value.</p> <p>Bind sockets to given interface.</p> <p>You can specify interface name, IP address and host name. Possible Values: interface, IP address, host name.</p> Note <p>If an interface has multiple addresses, it is highly recommended to specify IP address explicitly. See also --disable-ipv6. If your system doesn't have getifaddrs(3), this option doesn't accept interface name.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.keep_unfinished_download_result","title":"keep_unfinished_download_result  <code>property</code> <code>writable</code>","text":"<pre><code>keep_unfinished_download_result: bool\n</code></pre> <p>Return the <code>keep-unfinished-download-result</code> option value.</p> <p>Keep unfinished download results even if doing so exceeds --max-download-result.</p> <p>This is useful if all unfinished downloads must be saved in session file (see --save-session option). Please keep in mind that there is no upper bound to the number of unfinished download result to keep. If that is undesirable, turn this option off. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.listen_port","title":"listen_port  <code>property</code> <code>writable</code>","text":"<pre><code>listen_port: str\n</code></pre> <p>Return the <code>listen-port</code> option value.</p> <p>Set TCP port number for BitTorrent downloads.</p> <p>Multiple ports can be specified by using, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together: 6881-6889, 6999. Default: 6881-6999</p> Note <p>Make sure that the specified ports are open for incoming TCP traffic.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.load_cookies","title":"load_cookies  <code>property</code> <code>writable</code>","text":"<pre><code>load_cookies: str\n</code></pre> <p>Return the <code>load-cookies</code> option value.</p> <p>Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1.x/2.x)/Netscape format.</p> Note <p>If aria2 is built without libsqlite3, then it doesn't support Firefox3 and Chromium/Google Chrome cookie format.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.log","title":"log  <code>property</code> <code>writable</code>","text":"<pre><code>log: str\n</code></pre> <p>Return the <code>log</code> option value.</p> <p>The file name of the log file.</p> <p>If - is specified, log is written to stdout. If empty string(\"\") is specified, or this option is omitted, no log is written to disk at all.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.log_level","title":"log_level  <code>property</code> <code>writable</code>","text":"<pre><code>log_level: str\n</code></pre> <p>Return the <code>log-level</code> option value.</p> <p>Set log level to output.</p> <p>LEVEL is either debug, info, notice, warn or error. Default: debug.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.lowest_speed_limit","title":"lowest_speed_limit  <code>property</code> <code>writable</code>","text":"<pre><code>lowest_speed_limit: int\n</code></pre> <p>Return the <code>lowest-speed-limit</code> option value.</p> <p>Close connection if download speed is lower than or equal to this value(bytes per sec).</p> <p>0 means aria2 does not have a lowest speed limit. You can append K or M (1K = 1024, 1M = 1024K). This option does not affect BitTorrent downloads. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_concurrent_downloads","title":"max_concurrent_downloads  <code>property</code> <code>writable</code>","text":"<pre><code>max_concurrent_downloads: int\n</code></pre> <p>Return the <code>max-concurrent-downloads</code> option value.</p> <p>Set the maximum number of parallel downloads for every queue item.</p> <p>See also the --split option. Default: 5.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_connection_per_server","title":"max_connection_per_server  <code>property</code> <code>writable</code>","text":"<pre><code>max_connection_per_server: int\n</code></pre> <p>Return the <code>max-connection-per-server</code> option value.</p> <p>The maximum number of connections to one server for each download.</p> <p>Default: 1.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_download_limit","title":"max_download_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_download_limit: int\n</code></pre> <p>Return the <code>max-download-limit</code> option value.</p> <p>Set max download speed per each download in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall download speed, use --max-overall-download-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_download_result","title":"max_download_result  <code>property</code> <code>writable</code>","text":"<pre><code>max_download_result: int\n</code></pre> <p>Return the <code>max-download-result</code> option value.</p> <p>Set maximum number of download result kept in memory.</p> <p>The download results are completed/error/removed downloads. The download results are stored in FIFO queue and it can store at most NUM download results. When queue is full and new download result is created, oldest download result is removed from the front of the queue and new one is pushed to the back. Setting big number in this option may result high memory consumption after thousands of downloads. Specifying 0 means no download result is kept. Note that unfinished downloads are kept in memory regardless of this option value. See --keep-unfinished-download-result option. Default: 1000.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_file_not_found","title":"max_file_not_found  <code>property</code> <code>writable</code>","text":"<pre><code>max_file_not_found: int\n</code></pre> <p>Return the <code>max-file-not-found</code> option value.</p> <p>If aria2 receives \"file not found\" status from the remote HTTP/FTP servers NUM times without getting a single byte, then force the download to fail.</p> <p>Specify 0 to disable this option. This options is effective only when using HTTP/FTP servers. The number of retry attempt is counted toward --max-tries, so it should be configured too.</p> <p>Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_mmap_limit","title":"max_mmap_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_mmap_limit: int\n</code></pre> <p>Return the <code>max-mmap-limit</code> option value.</p> <p>Set the maximum file size to enable mmap (see --enable-mmap option).</p> <p>The file size is determined by the sum of all files contained in one download. For example, if a download contains 5 files, then file size is the total size of those files. If file size is strictly greater than the size specified in this option, mmap will be disabled. Default: 9223372036854775807.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_overall_download_limit","title":"max_overall_download_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_overall_download_limit: int\n</code></pre> <p>Return the <code>max-overall-download-limit</code> option value.</p> <p>Set max overall download speed in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the download speed per download, use --max-download-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_overall_upload_limit","title":"max_overall_upload_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_overall_upload_limit: int\n</code></pre> <p>Return the <code>max-overall-upload-limit</code> option value.</p> <p>Set max overall upload speed in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the upload speed per torrent, use --max-upload-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_resume_failure_tries","title":"max_resume_failure_tries  <code>property</code> <code>writable</code>","text":"<pre><code>max_resume_failure_tries: int\n</code></pre> <p>Return the <code>max-resume-failure-tries</code> option value.</p> <p>When used with --always-resume=false, aria2 downloads file from scratch when aria2 detects N number of URIs that does not support resume.</p> <p>If N is 0, aria2 downloads file from scratch when all given URIs do not support resume. See --always-resume option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_tries","title":"max_tries  <code>property</code> <code>writable</code>","text":"<pre><code>max_tries: int\n</code></pre> <p>Return the <code>max-tries</code> option value.</p> <p>Set number of tries.</p> <p>0 means unlimited. See also --retry-wait. Default: 5.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.max_upload_limit","title":"max_upload_limit  <code>property</code> <code>writable</code>","text":"<pre><code>max_upload_limit: int\n</code></pre> <p>Return the <code>max-upload-limit</code> option value.</p> <p>Set max upload speed per each torrent in bytes/sec.</p> <p>0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall upload speed, use --max-overall-upload-limit option. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_base_uri","title":"metalink_base_uri  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_base_uri: str\n</code></pre> <p>Return the <code>metalink-base-uri</code> option value.</p> <p>Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk.</p> <p>If URI points to a directory, URI must end with /.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_enable_unique_protocol","title":"metalink_enable_unique_protocol  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_enable_unique_protocol: bool\n</code></pre> <p>Return the <code>metalink-enable-unique-protocol</code> option value.</p> <p>If true is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them.</p> <p>Use --metalink-preferred-protocol option to specify the preference of protocol. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_file","title":"metalink_file  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_file: str\n</code></pre> <p>Return the <code>metalink-file</code> option value.</p> <p>The file path to \".meta4\" and \".metalink\" file.</p> <p>Reads input from stdin when - is specified. You are not required to use this option because you can specify \".metalink\" files without --metalink-file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_language","title":"metalink_language  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_language: str\n</code></pre> <p>Return the <code>metalink-language</code> option value.</p> <p>The language of the file to download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_location","title":"metalink_location  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_location: list[str]\n</code></pre> <p>Return the <code>metalink-location</code> option value.</p> <p>The location of the preferred server.</p> <p>A comma-delimited list of locations is acceptable, for example, jp,us.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_os","title":"metalink_os  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_os: str\n</code></pre> <p>Return the <code>metalink-os</code> option value.</p> <p>The operating system of the file to download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_preferred_protocol","title":"metalink_preferred_protocol  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_preferred_protocol: str\n</code></pre> <p>Return the <code>metalink-preferred-protocol</code> option value.</p> <p>Specify preferred protocol.</p> <p>The possible values are http, https, ftp and none. Specify none to disable this feature. Default: none.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.metalink_version","title":"metalink_version  <code>property</code> <code>writable</code>","text":"<pre><code>metalink_version: str\n</code></pre> <p>Return the <code>metalink-version</code> option value.</p> <p>The version of the file to download.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.min_split_size","title":"min_split_size  <code>property</code> <code>writable</code>","text":"<pre><code>min_split_size: int\n</code></pre> <p>Return the <code>min-split-size</code> option value.</p> <p>aria2 does not split less than 2*SIZE byte range.</p> <p>For example, let's consider downloading 20MiB file. If SIZE is 10M, aria2 can split file into 2 range [ 0-10MiB)  and [10MiB-20MiB)  and download it using 2 sources(if --split &gt;<code>= 2, of course). If SIZE is 15M, since 2*15M &gt;</code> 20MiB, aria2 does not split file and download it using 1 source. You can append K or M (1K = 1024, 1M = 1024K). Possible Values: 1M -1024M Default: 20M</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.min_tls_version","title":"min_tls_version  <code>property</code> <code>writable</code>","text":"<pre><code>min_tls_version: str\n</code></pre> <p>Return the <code>min-tls-version</code> option value.</p> <p>Specify minimum SSL/TLS version to enable.</p> <p>Possible Values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. Default: TLSv1.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.multiple_interface","title":"multiple_interface  <code>property</code> <code>writable</code>","text":"<pre><code>multiple_interface: list[str]\n</code></pre> <p>Return the <code>multiple-interface</code> option value.</p> <p>Comma separated list of interfaces to bind sockets to.</p> <p>Requests will be split among the interfaces to achieve link aggregation. You can specify interface name, IP address and hostname. If --interface is used, this option will be ignored. Possible Values: interface, IP address, hostname.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list of str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.netrc_path","title":"netrc_path  <code>property</code> <code>writable</code>","text":"<pre><code>netrc_path: str\n</code></pre> <p>Return the <code>netrc-path</code> option value.</p> <p>Specify the path to the netrc file.</p> <p>Default: $(HOME)/.netrc.</p> Note <p>Permission of the .netrc file must be 600. Otherwise, the file will be ignored.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.no_conf","title":"no_conf  <code>property</code> <code>writable</code>","text":"<pre><code>no_conf: bool\n</code></pre> <p>Return the <code>no-conf</code> option value.</p> <p>Disable loading aria2.conf file.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.no_file_allocation_limit","title":"no_file_allocation_limit  <code>property</code> <code>writable</code>","text":"<pre><code>no_file_allocation_limit: int\n</code></pre> <p>Return the <code>no-file-allocation-limit</code> option value.</p> <p>No file allocation is made for files whose size is smaller than SIZE.</p> <p>You can append K or M (1K = 1024, 1M = 1024K). Default: 5M.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.no_netrc","title":"no_netrc  <code>property</code> <code>writable</code>","text":"<pre><code>no_netrc: bool\n</code></pre> <p>Return the <code>no-netrc</code> option value.</p> <p>Disable netrc support.</p> <p>netrc support is enabled by default.</p> Note <p>netrc file is only read at the startup if --no-netrc is false. So if --no-netrc is true at the startup, no netrc is available throughout the session. You cannot get netrc enabled even if you send --no-netrc=false using aria2.changeGlobalOption().</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.no_proxy","title":"no_proxy  <code>property</code> <code>writable</code>","text":"<pre><code>no_proxy: str\n</code></pre> <p>Return the <code>no-proxy</code> option value.</p> <p>Specify a comma separated list of host names, domains and network addresses with or without a subnet mask where no proxy should be used.</p> Note <p>For network addresses with a subnet mask, both IPv4 and IPv6 addresses work. The current implementation does not resolve the host name in an URI to compare network addresses specified in --no-proxy. So it is only effective if URI has numeric IP addresses.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.on_bt_download_complete","title":"on_bt_download_complete  <code>property</code> <code>writable</code>","text":"<pre><code>on_bt_download_complete: str\n</code></pre> <p>Return the <code>on-bt-download-complete</code> option value.</p> <p>For BitTorrent, a command specified in --on-download-complete is called after download completed and seeding is over.</p> <p>On the other hand, this option set the command to be executed after download completed but before seeding. See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.on_download_complete","title":"on_download_complete  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_complete: str\n</code></pre> <p>Return the <code>on-download-complete</code> option value.</p> <p>Set the command to be executed after download completed.</p> <p>See See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.on_download_error","title":"on_download_error  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_error: str\n</code></pre> <p>Return the <code>on-download-error</code> option value.</p> <p>Set the command to be executed after download aborted due to error.</p> <p>See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.on_download_pause","title":"on_download_pause  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_pause: str\n</code></pre> <p>Return the <code>on-download-pause</code> option value.</p> <p>Set the command to be executed after download was paused.</p> <p>See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.on_download_start","title":"on_download_start  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_start: str\n</code></pre> <p>Return the <code>on-download-start</code> option value.</p> <p>Set the command to be executed after download got started.</p> <p>See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.on_download_stop","title":"on_download_stop  <code>property</code> <code>writable</code>","text":"<pre><code>on_download_stop: str\n</code></pre> <p>Return the <code>on-download-stop</code> option value.</p> <p>Set the command to be executed after download stopped.</p> <p>You can override the command to be executed for particular download result using --on-download-complete and --on-download-error. If they are specified, command specified in this option is not executed. See Event Hook for more details about COMMAND. Possible Values: /path/to/command.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.optimize_concurrent_downloads","title":"optimize_concurrent_downloads  <code>property</code> <code>writable</code>","text":"<pre><code>optimize_concurrent_downloads: str\n</code></pre> <p>Return the <code>optimize-concurrent-downloads</code> option value.</p> <p>Optimizes the number of concurrent downloads according to the bandwidth available (<code>true|false|&lt;A&gt;:&lt;B&gt;</code>).</p> <p>aria2 uses the download speed observed in the previous downloads to adapt the number of downloads launched in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be customized in the option arguments with A and B separated by a colon. The default values (A=5, B=25) lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks. The number of parallel downloads remains constrained under the maximum defined by the --max-concurrent-downloads parameter. Default: false.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.out","title":"out  <code>property</code> <code>writable</code>","text":"<pre><code>out: str\n</code></pre> <p>Return the <code>out</code> option value.</p> <p>The file name of the downloaded file.</p> <p>It is always relative to the directory given in --dir option. When the --force-sequential option is used, this option is ignored.</p> Note <p>You cannot specify a file name for Metalink or BitTorrent downloads. The file name specified here is only used when the URIs fed to aria2 are given on the command line directly, but not when using --input-file, --force-sequential option.</p> <pre><code>aria2c -o myfile.zip \"http://mirror1/file.zip\" \"http://mirror2/file.zip\"\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.parameterized_uri","title":"parameterized_uri  <code>property</code> <code>writable</code>","text":"<pre><code>parameterized_uri: bool\n</code></pre> <p>Return the <code>parameterized-uri</code> option value.</p> <p>Enable parameterized URI support.</p> <p>You can specify set of parts: http://{sv1,sv2,sv3}/foo.iso. Also you can specify numeric sequences with step counter:  http://host/image[000-100:2].img. A step counter can be omitted. If all URIs do not point to the same file, such as the second example above, -Z option is required. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.pause","title":"pause  <code>property</code> <code>writable</code>","text":"<pre><code>pause: bool\n</code></pre> <p>Return the <code>pause</code> option value.</p> <p>Pause download after added.</p> <p>This option is effective only when --enable-rpc=true is given. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.pause_metadata","title":"pause_metadata  <code>property</code> <code>writable</code>","text":"<pre><code>pause_metadata: bool\n</code></pre> <p>Return the <code>pause-metadata</code> option value.</p> <p>Pause downloads created as a result of metadata download.</p> <p>There are 3 types of metadata downloads in aria2: (1) downloading .torrent file. (2) downloading torrent metadata using magnet link. (3) downloading metalink file. These metadata downloads will generate downloads using their metadata. This option pauses these subsequent downloads. This option is effective only when --enable-rpc=true is given. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.peer_id_prefix","title":"peer_id_prefix  <code>property</code> <code>writable</code>","text":"<pre><code>peer_id_prefix: str\n</code></pre> <p>Return the <code>peer-id-prefix</code> option value.</p> <p>Specify the prefix of peer ID.</p> <p>The peer ID in BitTorrent is 20 byte length. If more than 20 bytes are specified, only first 20 bytes are used. If less than 20 bytes are specified, random byte data are added to make its length 20 bytes.</p> <p>Default: A2-$MAJOR-$MINOR-$PATCH-, $MAJOR, $MINOR and $PATCH are replaced by major, minor and patch version number respectively. For instance, aria2 version 1.18.8 has prefix ID A2-1-18-8-.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.piece_length","title":"piece_length  <code>property</code> <code>writable</code>","text":"<pre><code>piece_length: str\n</code></pre> <p>Return the <code>piece-length</code> option value.</p> <p>Set a piece length for HTTP/FTP downloads.</p> <p>This is the boundary when aria2 splits a file. All splits occur at multiple of this length. This option will be ignored in BitTorrent downloads. It will be also ignored if Metalink file contains piece hashes. Default: 1M.</p> Note <p>The possible use case of --piece-length option is change the request range in one HTTP pipelined request. To enable HTTP pipelining use --enable-http-pipelining.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.private_key","title":"private_key  <code>property</code> <code>writable</code>","text":"<pre><code>private_key: str\n</code></pre> <p>Return the <code>private-key</code> option value.</p> <p>Use the private key in FILE.</p> <p>The private key must be decrypted and in PEM format. The behavior when encrypted one is given is undefined. See also --certificate option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.proxy_method","title":"proxy_method  <code>property</code> <code>writable</code>","text":"<pre><code>proxy_method: str\n</code></pre> <p>Return the <code>proxy-method</code> option value.</p> <p>Set the method to use in proxy request.</p> <p>METHOD is either get or tunnel. HTTPS downloads always use tunnel regardless of this option. Default: get</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.quiet","title":"quiet  <code>property</code> <code>writable</code>","text":"<pre><code>quiet: bool\n</code></pre> <p>Return the <code>quiet</code> option value.</p> <p>Make aria2 quiet (no console output).</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.realtime_chunk_checksum","title":"realtime_chunk_checksum  <code>property</code> <code>writable</code>","text":"<pre><code>realtime_chunk_checksum: bool\n</code></pre> <p>Return the <code>realtime-chunk-checksum</code> option value.</p> <p>Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.referer","title":"referer  <code>property</code> <code>writable</code>","text":"<pre><code>referer: str\n</code></pre> <p>Return the <code>referer</code> option value.</p> <p>Set an http referrer (Referer).</p> <p>This affects all http/https downloads. If * is given, the download URI is also used as the referrer. This may be useful when used together with the --parameterized-uri option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.remote_time","title":"remote_time  <code>property</code> <code>writable</code>","text":"<pre><code>remote_time: bool\n</code></pre> <p>Return the <code>remote-time</code> option value.</p> <p>Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.remove_control_file","title":"remove_control_file  <code>property</code> <code>writable</code>","text":"<pre><code>remove_control_file: bool\n</code></pre> <p>Return the <code>remove-control-file</code> option value.</p> <p>Remove control file before download.</p> <p>Using with --allow-overwrite=true, download always starts from scratch. This will be useful for users behind proxy server which disables resume.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.retry_wait","title":"retry_wait  <code>property</code> <code>writable</code>","text":"<pre><code>retry_wait: int\n</code></pre> <p>Return the <code>retry-wait</code> option value.</p> <p>Set the seconds to wait between retries.</p> <p>When SEC &gt;` 0, aria2 will retry downloads when the HTTP server returns a 503 response. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.reuse_uri","title":"reuse_uri  <code>property</code> <code>writable</code>","text":"<pre><code>reuse_uri: bool\n</code></pre> <p>Return the <code>reuse-uri</code> option value.</p> <p>Reuse already used URIs if no unused URIs are left.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rlimit_nofile","title":"rlimit_nofile  <code>property</code> <code>writable</code>","text":"<pre><code>rlimit_nofile: int\n</code></pre> <p>Return the <code>rlimit-nofile</code> option value.</p> <p>Set the soft limit of open file descriptors.</p> <p>This open will only have effect when:</p> <p>a. The system supports it (posix)</p> <p>b. The limit does not exceed the hard limit.</p> <p>c. The specified limit is larger than the current soft limit.</p> <p>This is equivalent to setting nofile via ulimit, except that it will never decrease the limit.</p> <p>This option is only available on systems supporting the rlimit API.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_allow_origin_all","title":"rpc_allow_origin_all  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_allow_origin_all: bool\n</code></pre> <p>Return the <code>rpc-allow-origin-all</code> option value.</p> <p>Add Access-Control-Allow-Origin header field with value * to the RPC response.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_certificate","title":"rpc_certificate  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_certificate: str\n</code></pre> <p>Return the <code>rpc-certificate</code> option value.</p> <p>Use the certificate in FILE for RPC server.</p> <p>The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format.</p> <p>PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened!</p> <p>When using PEM, you have to specify the private key via --rpc-private-key as well. Use --rpc-secure option to enable encryption.</p> Note <p>WinTLS does not support PEM files at the moment. Users have to use PKCS12 files.</p> Note <p>AppleTLS users should use the KeyChain Access utility to first generate a self-signed SSL-Server certificate, e.g. using the wizard, and get the SHA-1 fingerprint from the Information dialog corresponding to that new certificate. To start aria2c with --rpc-secure use --rpc-certificate=<code>&lt;SHA-1&gt;</code>. Alternatively PKCS12 files are also supported. PEM files, however, are not supported.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_listen_all","title":"rpc_listen_all  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_listen_all: bool\n</code></pre> <p>Return the <code>rpc-listen-all</code> option value.</p> <p>Listen incoming JSON-RPC/XML-RPC requests on all network interfaces.</p> <p>If false is given, listen only on local loopback interface. Default: false.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_listen_port","title":"rpc_listen_port  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_listen_port: int\n</code></pre> <p>Return the <code>rpc-listen-port</code> option value.</p> <p>Specify a port number for JSON-RPC/XML-RPC server to listen to.</p> <p>Possible Values: 1024-65535. Default: 6800.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_max_request_size","title":"rpc_max_request_size  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_max_request_size: str\n</code></pre> <p>Return the <code>rpc-max-request-size</code> option value.</p> <p>Set max size of JSON-RPC/XML-RPC request in bytes.</p> <p>If aria2 detects the request is more than SIZE bytes, it drops connection. Default: 2M.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_passwd","title":"rpc_passwd  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_passwd: str\n</code></pre> <p>Return the <code>rpc-passwd</code> option value.</p> <p>Set JSON-RPC/XML-RPC password.</p> Warning <p>--rpc-passwd option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_private_key","title":"rpc_private_key  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_private_key: str\n</code></pre> <p>Return the <code>rpc-private-key</code> option value.</p> <p>Use the private key in FILE for RPC server.</p> <p>The private key must be decrypted and in PEM format. Use --rpc-secure option to enable encryption. See also --rpc-certificate option.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_save_upload_metadata","title":"rpc_save_upload_metadata  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_save_upload_metadata: bool\n</code></pre> <p>Return the <code>rpc-save-upload-metadata</code> option value.</p> <p>Save the uploaded torrent or metalink meta data in the directory specified by --dir option.</p> <p>The file name consists of SHA-1 hash hex string of meta data plus extension. For torrent, the extension is '.torrent'. For metalink, it is '.meta4'. If false is given to this option, the downloads added by aria2.addTorrent() or aria2.addMetalink() will not be saved by --save-session option. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_secret","title":"rpc_secret  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_secret: str\n</code></pre> <p>Return the <code>rpc-secret</code> option value.</p> <p>Set RPC secret authorization token.</p> <p>Read RPC authorization secret token to know how this option value is used.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_secure","title":"rpc_secure  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_secure: bool\n</code></pre> <p>Return the <code>rpc-secure</code> option value.</p> <p>RPC transport will be encrypted by SSL/TLS.</p> <p>The RPC clients must use https scheme to access the server. For WebSocket client, use wss scheme. Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.rpc_user","title":"rpc_user  <code>property</code> <code>writable</code>","text":"<pre><code>rpc_user: str\n</code></pre> <p>Return the <code>rpc-user</code> option value.</p> <p>Set JSON-RPC/XML-RPC user.</p> Warning <p>--rpc-user option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.save_cookies","title":"save_cookies  <code>property</code> <code>writable</code>","text":"<pre><code>save_cookies: str\n</code></pre> <p>Return the <code>save-cookies</code> option value.</p> <p>Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/ Netscape format.</p> <p>If FILE already exists, it is overwritten. Session Cookies are also saved and their expiry values are treated as 0. Possible Values: /path/to/file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.save_not_found","title":"save_not_found  <code>property</code> <code>writable</code>","text":"<pre><code>save_not_found: bool\n</code></pre> <p>Return the <code>save-not-found</code> option value.</p> <p>Save download with --save-session option even if the file was not found on the server.</p> <p>This option also saves control file in that situations. Default: true.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.save_session","title":"save_session  <code>property</code> <code>writable</code>","text":"<pre><code>save_session: str\n</code></pre> <p>Return the <code>save-session</code> option value.</p> <p>Save error/unfinished downloads to FILE on exit.</p> <p>You can pass this output file to aria2c with --input-file option on restart. If you like the output to be gzipped append a .gz extension to the file name. Please note that downloads added by aria2.addTorrent() and aria2.addMetalink() RPC method and whose meta data could not be saved as a file are not saved. Downloads removed using aria2.remove() and aria2.forceRemove() will not be saved. GID is also saved with gid, but there are some restrictions, see below.</p> Note <p>Normally, GID of the download itself is saved. But some downloads use meta data (e.g., BitTorrent and Metalink). In this case, there are some restrictions.</p> <p>magnet URI, and followed by torrent download:     GID of BitTorrent meta data download is saved.</p> <p>URI to torrent file, and followed by torrent download:     GID of torrent file download is saved.</p> <p>URI to metalink file, and followed by file downloads described in metalink file:     GID of metalink file download is saved.</p> <p>local torrent file:     GID of torrent download is saved.</p> <p>local metalink file:     Any meaningful GID is not saved.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.save_session_interval","title":"save_session_interval  <code>property</code> <code>writable</code>","text":"<pre><code>save_session_interval: int\n</code></pre> <p>Return the <code>save-session-interval</code> option value.</p> <p>Save error/unfinished downloads to a file specified by --save-session option every SEC seconds.</p> <p>If 0 is given, file will be saved only when aria2 exits. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.seed_ratio","title":"seed_ratio  <code>property</code> <code>writable</code>","text":"<pre><code>seed_ratio: float\n</code></pre> <p>Return the <code>seed-ratio</code> option value.</p> <p>Specify share ratio.</p> <p>Seed completed torrents until share ratio reaches RATIO. You are strongly encouraged to specify equals or more than 1.0 here. Specify 0.0 if you intend to do seeding regardless of share ratio. If --seed-time option is specified along with this option, seeding ends when at least one of the conditions is satisfied. Default: 1.0.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>float</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.seed_time","title":"seed_time  <code>property</code> <code>writable</code>","text":"<pre><code>seed_time: float\n</code></pre> <p>Return the <code>seed-time</code> option value.</p> <p>Specify seeding time in (fractional) minutes.</p> <p>Also see the --seed-ratio option.</p> Note <p>Specifying --seed-time=0 disables seeding after download completed.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>float</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.select_file","title":"select_file  <code>property</code> <code>writable</code>","text":"<pre><code>select_file: str\n</code></pre> <p>Return the <code>select-file</code> option value.</p> <p>Set file to download by specifying its index.</p> <p>You can find the file index using the --show-files option. Multiple indexes can be specified by using ,, for example: 3,6. You can also use - to specify a range: 1-5. , and - can be used together: 1-5,8, 9. When used with the -M option, index may vary depending on the query (see --metalink-* options).</p> Note <p>In multi file torrent, the adjacent files specified by this option may also be downloaded. This is by design, not a bug. A single piece may include several files or part of files, and aria2 writes the piece to the appropriate files.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.server_stat_if","title":"server_stat_if  <code>property</code> <code>writable</code>","text":"<pre><code>server_stat_if: str\n</code></pre> <p>Return the <code>server-stat-if</code> option value.</p> <p>Specify the file name to load performance profile of the servers.</p> <p>The loaded data will be used in some URI selector such as feedback. See also --uri-selector option. See Server Performance Profile subsection below for file format.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.server_stat_of","title":"server_stat_of  <code>property</code> <code>writable</code>","text":"<pre><code>server_stat_of: str\n</code></pre> <p>Return the <code>server-stat-of</code> option value.</p> <p>Specify the file name to which performance profile of the servers is saved.</p> <p>You can load saved data using --server-stat-if option. See Server Performance Profile subsection below for file format.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.server_stat_timeout","title":"server_stat_timeout  <code>property</code> <code>writable</code>","text":"<pre><code>server_stat_timeout: int\n</code></pre> <p>Return the <code>server-stat-timeout</code> option value.</p> <p>Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them.</p> <p>Default: 86400 (24hours).</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.show_console_readout","title":"show_console_readout  <code>property</code> <code>writable</code>","text":"<pre><code>show_console_readout: bool\n</code></pre> <p>Return the <code>show-console-readout</code> option value.</p> <p>Show console readout.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.show_files","title":"show_files  <code>property</code> <code>writable</code>","text":"<pre><code>show_files: bool\n</code></pre> <p>Return the <code>show-files</code> option value.</p> <p>Print file listing of \".torrent\", \".meta4\" and \".metalink\" file and exit.</p> <p>In case of \".torrent\" file, additional information (infohash, piece length, etc) is also printed.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.socket_recv_buffer_size","title":"socket_recv_buffer_size  <code>property</code> <code>writable</code>","text":"<pre><code>socket_recv_buffer_size: int\n</code></pre> <p>Return the <code>socket-recv-buffer-size</code> option value.</p> <p>Set the maximum socket receive buffer in bytes.</p> <p>Specifying 0 will disable this option. This value will be set to socket file descriptor using SO_RCVBUF socket option with setsockopt() call. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.split","title":"split  <code>property</code> <code>writable</code>","text":"<pre><code>split: int\n</code></pre> <p>Return the <code>split</code> option value.</p> <p>Download a file using N connections.</p> <p>If more than N URIs are given, first N URIs are used and remaining URIs are used for backup. If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously. The number of connections to the same host is restricted by the --max-connection-per-server option. See also the --min-split-size option. Default: 5</p> Note <p>Some Metalinks regulate the number of servers to connect. aria2 strictly respects them. This means that if Metalink defines the maxconnections attribute lower than N, then aria2 uses the value of this lower value instead of N.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.ssh_host_key_md","title":"ssh_host_key_md  <code>property</code> <code>writable</code>","text":"<pre><code>ssh_host_key_md: str\n</code></pre> <p>Return the <code>ssh-host-key-md</code> option value.</p> <p>Set checksum for SSH host public key (<code>&lt;TYPE&gt;=&lt;DIGEST&gt;</code>).</p> <p>TYPE is hash type. The supported hash type is sha-1 or md5. DIGEST is hex digest. For example: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. This option can be used to validate server's public key when SFTP is used. If this option is not set, which is default, no validation takes place.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.stderr","title":"stderr  <code>property</code> <code>writable</code>","text":"<pre><code>stderr: bool\n</code></pre> <p>Return the <code>stderr</code> option value.</p> <p>Redirect all console output that would be otherwise printed in stdout to stderr.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.stop","title":"stop  <code>property</code> <code>writable</code>","text":"<pre><code>stop: int\n</code></pre> <p>Return the <code>stop</code> option value.</p> <p>Stop application after SEC seconds has passed.</p> <p>If 0 is given, this feature is disabled. Default: 0.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.stop_with_process","title":"stop_with_process  <code>property</code> <code>writable</code>","text":"<pre><code>stop_with_process: int\n</code></pre> <p>Return the <code>stop-with-process</code> option value.</p> <p>Stop application when process PID is not running.</p> <p>This is useful if aria2 process is forked from a parent process. The parent process can fork aria2 with its own pid and when parent process exits for some reason, aria2 can detect it and shutdown itself.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.stream_piece_selector","title":"stream_piece_selector  <code>property</code> <code>writable</code>","text":"<pre><code>stream_piece_selector: str\n</code></pre> <p>Return the <code>stream-piece-selector</code> option value.</p> <p>Specify piece selection algorithm used in HTTP/FTP download.</p> <p>Piece means fixed length segment which is downloaded in parallel in segmented download. If default is given, aria2 selects piece so that it reduces the number of establishing connection. This is reasonable default behavior because establishing connection is an expensive operation. If inorder is given, aria2 selects piece which has minimum index. Index=0 means first of the file. This will be useful to view movie while downloading it. --enable-http-pipelining option may be useful to reduce re-connection overhead. Please note that aria2 honors --min-split-size option, so it will be necessary to specify a reasonable value to --min-split-size option. If random is given, aria2 selects piece randomly. Like inorder, --min-split-size option is honored. If geom is given, at the beginning aria2 selects piece which has minimum index like inorder, but it exponentially increasingly keeps space from previously selected piece. This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first. This will be useful to view movie while downloading it. Default: default.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.summary_interval","title":"summary_interval  <code>property</code> <code>writable</code>","text":"<pre><code>summary_interval: int\n</code></pre> <p>Return the <code>summary-interval</code> option value.</p> <p>Set interval in seconds to output download progress summary.</p> <p>Setting 0 suppresses the output. Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout: int\n</code></pre> <p>Return the <code>timeout</code> option value.</p> <p>Set timeout in seconds.</p> <p>Default: 60.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>int</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.torrent_file","title":"torrent_file  <code>property</code> <code>writable</code>","text":"<pre><code>torrent_file: str\n</code></pre> <p>Return the <code>torrent-file</code> option value.</p> <p>The path to the \".torrent\" file.</p> <p>You are not required to use this option because you can specify \".torrent\" files without --torrent-file.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.truncate_console_readout","title":"truncate_console_readout  <code>property</code> <code>writable</code>","text":"<pre><code>truncate_console_readout: bool\n</code></pre> <p>Return the <code>truncate-console-readout</code> option value.</p> <p>Truncate console readout to fit in a single line.</p> <p>Default: True.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.uri_selector","title":"uri_selector  <code>property</code> <code>writable</code>","text":"<pre><code>uri_selector: str\n</code></pre> <p>Return the <code>uri-selector</code> option value.</p> <p>Specify URI selection algorithm.</p> <p>The possible values are inorder, feedback and adaptive. If inorder is given, URI is tried in the order appeared in the URI list. If feedback is given, aria2 uses download speed observed in the previous downloads and choose fastest server in the URI list. This also effectively skips dead mirrors. The observed download speed is a part of performance profile of servers mentioned in --server-stat-of and --server-stat-if options. If adaptive is given, selects one of the best mirrors for the first and reserved connections. For supplementary ones, it returns mirrors which has not been tested yet, and if each of them has already been tested, returns mirrors which has to be tested again. Otherwise, it doesn't select anymore mirrors. Like feedback, it uses a performance profile of servers. Default: feedback.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.use_head","title":"use_head  <code>property</code> <code>writable</code>","text":"<pre><code>use_head: bool\n</code></pre> <p>Return the <code>use-head</code> option value.</p> <p>Use HEAD method for the first request to the HTTP server.</p> <p>Default: False.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>bool</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.user_agent","title":"user_agent  <code>property</code> <code>writable</code>","text":"<pre><code>user_agent: str\n</code></pre> <p>Return the <code>user-agent</code> option value.</p> <p>Set user agent for HTTP(S) downloads.</p> <p>Default: aria2/$VERSION, $VERSION is replaced by package version.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>str</p> </li> </ul>"},{"location":"reference/aria2p/options/#aria2p.options.Options.get","title":"get","text":"<pre><code>get(\n    item: str, class_: Callable | None = None\n) -&gt; OptionType\n</code></pre> <p>Get the value of an option given its name.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>str</code>)           \u2013            <p>The name of the option (example: \"input-file\").</p> </li> <li> <code>class_</code>               (<code>Callable | None</code>, default:                   <code>None</code> )           \u2013            <p>Pass the value through this class/function to change its type.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OptionType</code>           \u2013            <p>The option value.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def get(self, item: str, class_: Callable | None = None) -&gt; OptionType:\n    \"\"\"Get the value of an option given its name.\n\n    Parameters:\n        item: The name of the option (example: \"input-file\").\n        class_: Pass the value through this class/function to change its type.\n\n    Returns:\n        The option value.\n    \"\"\"\n    value = self._struct.get(item)\n    if class_ is not None and value is not None:\n        return class_(value)\n    return value\n</code></pre>"},{"location":"reference/aria2p/options/#aria2p.options.Options.get_struct","title":"get_struct","text":"<pre><code>get_struct() -&gt; dict\n</code></pre> <p>Return a copy of the struct dictionary of this Options object.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A copy of the struct dictionary.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def get_struct(self) -&gt; dict:\n    \"\"\"Return a copy of the struct dictionary of this Options object.\n\n    Returns:\n        A copy of the struct dictionary.\n    \"\"\"\n    return deepcopy(self._struct)\n</code></pre>"},{"location":"reference/aria2p/options/#aria2p.options.Options.set","title":"set","text":"<pre><code>set(\n    key: str, value: str | float | bool | list[str]\n) -&gt; bool\n</code></pre> <p>Set the value of an option given its name.</p> <p>Parameters:</p> <ul> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>The name of the option (example: \"input-file\").</p> </li> <li> <code>value</code>               (<code>str | float | bool | list[str]</code>)           \u2013            <p>The value to set.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the value was successfully set, False otherwise.</p> </li> </ul> Source code in <code>src/aria2p/options.py</code> <pre><code>def set(self, key: str, value: str | float | bool | list[str]) -&gt; bool:\n    \"\"\"Set the value of an option given its name.\n\n    Parameters:\n        key: The name of the option (example: \"input-file\").\n        value: The value to set.\n\n    Returns:\n        True if the value was successfully set, False otherwise.\n    \"\"\"\n    if not isinstance(value, str):\n        value = str(value)\n    if self.download:\n        success = self.api.set_options({key: value}, [self.download])[0]\n    else:\n        success = self.api.set_global_options({key: value})\n    if success:\n        self._struct[key] = value\n    return success\n</code></pre>"},{"location":"reference/aria2p/stats/","title":"aria2p.stats","text":""},{"location":"reference/aria2p/stats/#aria2p.stats","title":"stats","text":"<p>This module defines the Stats class.</p> <p>It holds information retrieved with the <code>get_global_stat</code> method of the client.</p> <p>Classes:</p> <ul> <li> <code>Stats</code>           \u2013            <p>This class holds information retrieved with the <code>get_global_stat</code> method of the client.</p> </li> </ul>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats","title":"Stats","text":"<pre><code>Stats(struct: dict)\n</code></pre> <p>This class holds information retrieved with the <code>get_global_stat</code> method of the client.</p> <p>Parameters:</p> <ul> <li> <code>struct</code>               (<code>dict</code>)           \u2013            <p>A dictionary Python object returned by the JSON-RPC client.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>download_speed_string</code>             \u2013              <p>Return the download speed as string.</p> </li> <li> <code>upload_speed_string</code>             \u2013              <p>Return the upload speed as string.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>download_speed</code>               (<code>int</code>)           \u2013            <p>Overall download speed (byte/sec).</p> </li> <li> <code>num_active</code>               (<code>int</code>)           \u2013            <p>Return the number of active downloads.</p> </li> <li> <code>num_stopped</code>               (<code>int</code>)           \u2013            <p>Return the number of stopped downloads in the current session.</p> </li> <li> <code>num_stopped_total</code>               (<code>int</code>)           \u2013            <p>Return the number of stopped downloads in the current session.</p> </li> <li> <code>num_waiting</code>               (<code>int</code>)           \u2013            <p>Return the number of waiting downloads.</p> </li> <li> <code>upload_speed</code>               (<code>int</code>)           \u2013            <p>Overall upload speed (byte/sec).</p> </li> </ul> Source code in <code>src/aria2p/stats.py</code> <pre><code>def __init__(self, struct: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        struct: A dictionary Python object returned by the JSON-RPC client.\n    \"\"\"\n    self._struct = struct or {}\n</code></pre>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.download_speed","title":"download_speed  <code>property</code>","text":"<pre><code>download_speed: int\n</code></pre> <p>Overall download speed (byte/sec).</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The overall download speed in bytes per second.</p> </li> </ul>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.num_active","title":"num_active  <code>property</code>","text":"<pre><code>num_active: int\n</code></pre> <p>Return the number of active downloads.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of active downloads.</p> </li> </ul>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.num_stopped","title":"num_stopped  <code>property</code>","text":"<pre><code>num_stopped: int\n</code></pre> <p>Return the number of stopped downloads in the current session.</p> <p>This value is capped by the <code>--max-download-result</code> option.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of stopped downloads in the current session (capped).</p> </li> </ul>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.num_stopped_total","title":"num_stopped_total  <code>property</code>","text":"<pre><code>num_stopped_total: int\n</code></pre> <p>Return the number of stopped downloads in the current session.</p> <p>This value is not capped by the <code>--max-download-result</code> option.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of stopped downloads in the current session (not capped).</p> </li> </ul>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.num_waiting","title":"num_waiting  <code>property</code>","text":"<pre><code>num_waiting: int\n</code></pre> <p>Return the number of waiting downloads.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The number of waiting downloads.</p> </li> </ul>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.upload_speed","title":"upload_speed  <code>property</code>","text":"<pre><code>upload_speed: int\n</code></pre> <p>Overall upload speed (byte/sec).</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The overall upload speed in bytes per second.</p> </li> </ul>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.download_speed_string","title":"download_speed_string","text":"<pre><code>download_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the download speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The download speed string.</p> </li> </ul> Source code in <code>src/aria2p/stats.py</code> <pre><code>def download_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the download speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The download speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.download_speed, delim=\" \", postfix=\"/s\")\n    return str(self.download_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/stats/#aria2p.stats.Stats.upload_speed_string","title":"upload_speed_string","text":"<pre><code>upload_speed_string(human_readable: bool = True) -&gt; str\n</code></pre> <p>Return the upload speed as string.</p> <p>Parameters:</p> <ul> <li> <code>human_readable</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return in human readable format or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The upload speed string.</p> </li> </ul> Source code in <code>src/aria2p/stats.py</code> <pre><code>def upload_speed_string(self, human_readable: bool = True) -&gt; str:  # noqa: FBT001,FBT002\n    \"\"\"Return the upload speed as string.\n\n    Parameters:\n        human_readable: Return in human readable format or not.\n\n    Returns:\n        The upload speed string.\n    \"\"\"\n    if human_readable:\n        return human_readable_bytes(self.upload_speed, delim=\" \", postfix=\"/s\")\n    return str(self.upload_speed) + \" B/s\"\n</code></pre>"},{"location":"reference/aria2p/utils/","title":"aria2p.utils","text":""},{"location":"reference/aria2p/utils/#aria2p.utils","title":"utils","text":"<p>Utils module.</p> <p>This module contains simple utility classes and functions.</p> <p>Classes:</p> <ul> <li> <code>SignalHandler</code>           \u2013            <p>A helper class to handle signals.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>bool_or_value</code>             \u2013              <p>Return <code>True</code> for <code>\"true\"</code>, <code>False</code> for <code>\"false\"</code>, original value otherwise.</p> </li> <li> <code>bool_to_str</code>             \u2013              <p>Return <code>\"true\"</code> for <code>True</code>, <code>\"false\"</code> for <code>False</code>, original value otherwise.</p> </li> <li> <code>get_version</code>             \u2013              <p>Return the current <code>aria2p</code> version.</p> </li> <li> <code>human_readable_bytes</code>             \u2013              <p>Return a human-readable bytes value as a string.</p> </li> <li> <code>human_readable_timedelta</code>             \u2013              <p>Return a human-readable time delta as a string.</p> </li> <li> <code>load_configuration</code>             \u2013              <p>Return dict from TOML formatted string or file.</p> </li> <li> <code>read_lines</code>             \u2013              <p>Read lines in a file.</p> </li> </ul>"},{"location":"reference/aria2p/utils/#aria2p.utils.SignalHandler","title":"SignalHandler","text":"<pre><code>SignalHandler(signals: list[str])\n</code></pre> <p>A helper class to handle signals.</p> <p>Parameters:</p> <ul> <li> <code>signals</code>               (<code>list[str]</code>)           \u2013            <p>List of signals names as found in the <code>signal</code> module (example: SIGTERM).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>trigger</code>             \u2013              <p>Mark this instance as 'triggered' (a specified signal was received).</p> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def __init__(self, signals: list[str]) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        signals: List of signals names as found in the `signal` module (example: SIGTERM).\n    \"\"\"\n    logger.debug(\"Signal handler: handling signals \" + \", \".join(signals))\n    self.triggered = False\n    for sig in signals:\n        try:\n            signal.signal(signal.Signals[sig], self.trigger)\n        except ValueError as error:\n            logger.error(f\"Failed to setup signal handler for {sig}: {error}\")\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.SignalHandler.trigger","title":"trigger","text":"<pre><code>trigger(signum: int, frame: FrameType | None) -&gt; None\n</code></pre> <p>Mark this instance as 'triggered' (a specified signal was received).</p> <p>Parameters:</p> <ul> <li> <code>signum</code>               (<code>int</code>)           \u2013            <p>The signal code.</p> </li> <li> <code>frame</code>               (<code>FrameType | None</code>)           \u2013            <p>The signal frame (unused).</p> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def trigger(self, signum: int, frame: FrameType | None) -&gt; None:  # noqa: ARG002\n    \"\"\"Mark this instance as 'triggered' (a specified signal was received).\n\n    Parameters:\n        signum: The signal code.\n        frame: The signal frame (unused).\n    \"\"\"\n    logger.debug(\n        f\"Signal handler: caught signal {signal.Signals(signum).name} ({signum})\",\n    )\n    self.triggered = True\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.bool_or_value","title":"bool_or_value","text":"<pre><code>bool_or_value(value: Any) -&gt; Any\n</code></pre> <p>Return <code>True</code> for <code>\"true\"</code>, <code>False</code> for <code>\"false\"</code>, original value otherwise.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>Any kind of value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>One of these values:</p> <ul> <li><code>True</code> for <code>\"true\"</code></li> <li><code>False</code> for <code>\"false\"</code></li> <li>Original value otherwise</li> </ul> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def bool_or_value(value: Any) -&gt; Any:\n    \"\"\"Return `True` for `\"true\"`, `False` for `\"false\"`, original value otherwise.\n\n    Parameters:\n        value: Any kind of value.\n\n    Returns:\n        One of these values:\n\n            - `True` for `\"true\"`\n            - `False` for `\"false\"`\n            - Original value otherwise\n    \"\"\"\n    if value == \"true\":\n        return True\n    if value == \"false\":\n        return False\n    return value\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.bool_to_str","title":"bool_to_str","text":"<pre><code>bool_to_str(value: Any) -&gt; Any\n</code></pre> <p>Return <code>\"true\"</code> for <code>True</code>, <code>\"false\"</code> for <code>False</code>, original value otherwise.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>Any kind of value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <ul> <li><code>\"true\"</code> for <code>True</code></li> </ul> </li> <li> <code>Any</code>           \u2013            <ul> <li><code>\"false\"</code> for <code>False</code></li> </ul> </li> <li> <code>Any</code>           \u2013            <ul> <li>Original value otherwise</li> </ul> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def bool_to_str(value: Any) -&gt; Any:\n    \"\"\"Return `\"true\"` for `True`, `\"false\"` for `False`, original value otherwise.\n\n    Parameters:\n        value: Any kind of value.\n\n    Returns:\n        - `\"true\"` for `True`\n        - `\"false\"` for `False`\n        - Original value otherwise\n    \"\"\"\n    if value is True:\n        return \"true\"\n    if value is False:\n        return \"false\"\n    return value\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return the current <code>aria2p</code> version.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The current <code>aria2p</code> version.</p> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Return the current `aria2p` version.\n\n    Returns:\n        The current `aria2p` version.\n    \"\"\"\n    try:\n        return metadata.version(\"aria2p\")\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.human_readable_bytes","title":"human_readable_bytes","text":"<pre><code>human_readable_bytes(\n    value: int,\n    digits: int = 2,\n    delim: str = \"\",\n    postfix: str = \"\",\n) -&gt; str\n</code></pre> <p>Return a human-readable bytes value as a string.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The bytes value.</p> </li> <li> <code>digits</code>               (<code>int</code>, default:                   <code>2</code> )           \u2013            <p>How many decimal digits to use.</p> </li> <li> <code>delim</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>String to add between value and unit.</p> </li> <li> <code>postfix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>String to add at the end.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The human-readable version of the bytes.</p> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def human_readable_bytes(value: int, digits: int = 2, delim: str = \"\", postfix: str = \"\") -&gt; str:\n    \"\"\"Return a human-readable bytes value as a string.\n\n    Parameters:\n        value: The bytes value.\n        digits: How many decimal digits to use.\n        delim: String to add between value and unit.\n        postfix: String to add at the end.\n\n    Returns:\n        The human-readable version of the bytes.\n    \"\"\"\n    hr_value: float = value\n    chosen_unit = \"B\"\n    for unit in (\"KiB\", \"MiB\", \"GiB\", \"TiB\"):\n        if hr_value &gt; 1000:  # noqa: PLR2004\n            hr_value /= 1024\n            chosen_unit = unit\n        else:\n            break\n    return f\"{hr_value:.{digits}f}\" + delim + chosen_unit + postfix\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.human_readable_timedelta","title":"human_readable_timedelta","text":"<pre><code>human_readable_timedelta(\n    value: timedelta, precision: int = 0\n) -&gt; str\n</code></pre> <p>Return a human-readable time delta as a string.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>timedelta</code>)           \u2013            <p>The timedelta.</p> </li> <li> <code>precision</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The precision to use:</p> <ul> <li><code>0</code> to display all units</li> <li><code>1</code> to display the biggest unit only</li> <li><code>2</code> to display the first two biggest units only</li> <li><code>n</code> for the first N biggest units, etc.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A string representing the time delta.</p> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def human_readable_timedelta(value: timedelta, precision: int = 0) -&gt; str:\n    \"\"\"Return a human-readable time delta as a string.\n\n    Parameters:\n        value: The timedelta.\n        precision: The precision to use:\n\n            - `0` to display all units\n            - `1` to display the biggest unit only\n            - `2` to display the first two biggest units only\n            - `n` for the first N biggest units, etc.\n\n    Returns:\n        A string representing the time delta.\n    \"\"\"\n    pieces = []\n\n    if value.days:\n        pieces.append(f\"{value.days}d\")\n\n    seconds = value.seconds\n\n    if seconds &gt;= 3600:  # noqa: PLR2004\n        hours = int(seconds / 3600)\n        pieces.append(f\"{hours}h\")\n        seconds -= hours * 3600\n\n    if seconds &gt;= 60:  # noqa: PLR2004\n        minutes = int(seconds / 60)\n        pieces.append(f\"{minutes}m\")\n        seconds -= minutes * 60\n\n    if seconds &gt; 0 or not pieces:\n        pieces.append(f\"{seconds}s\")\n\n    if precision == 0:\n        return \"\".join(pieces)\n\n    return \"\".join(pieces[:precision])\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.load_configuration","title":"load_configuration","text":"<pre><code>load_configuration() -&gt; dict[str, Any]\n</code></pre> <p>Return dict from TOML formatted string or file.</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>The dict configuration.</p> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def load_configuration() -&gt; dict[str, Any]:\n    \"\"\"Return dict from TOML formatted string or file.\n\n    Returns:\n        The dict configuration.\n    \"\"\"\n    default_config = \"\"\"\n        [key_bindings]\n        AUTOCLEAR = \"c\"\n        CANCEL = \"esc\"\n        ENTER = \"enter\"\n        FILTER = [\"F4\", \"\\\\\\\\\"]\n        FOLLOW_ROW = \"F\"\n        HELP = [\"F1\", \"?\"]\n        MOVE_DOWN = [\"down\", \"j\"]\n        MOVE_DOWN_STEP = \"J\"\n        MOVE_END = \"end\"\n        MOVE_HOME = \"home\"\n        MOVE_LEFT = [\"left\", \"h\"]\n        MOVE_RIGHT = [\"right\", \"l\"]\n        MOVE_UP = [\"up\", \"k\"]\n        MOVE_UP_STEP = \"K\"\n        NEXT_SORT = [\"p\", \"&gt;\"]\n        PREVIOUS_SORT = \"&lt;\"\n        PRIORITY_DOWN = [\"F8\", \"d\", \"]\"]\n        PRIORITY_UP = [\"F7\", \"u\", \"[\"]\n        QUIT = [\"F10\", \"q\"]\n        REMOVE_ASK = [\"del\", \"F9\"]\n        RETRY = \"r\"\n        RETRY_ALL = \"R\"\n        REVERSE_SORT = \"I\"\n        SEARCH = [\"F3\", \"/\"]\n        SELECT_SORT = \"F6\"\n        SETUP = \"F2\"\n        TOGGLE_EXPAND_COLLAPSE = \"x\"\n        TOGGLE_EXPAND_COLLAPSE_ALL = \"X\"\n        TOGGLE_RESUME_PAUSE = \"space\"\n        TOGGLE_RESUME_PAUSE_ALL = \"P\"\n        TOGGLE_SELECT = \"s\"\n        UN_SELECT_ALL = \"U\"\n        ADD_DOWNLOADS = \"a\"\n\n        [colors]\n        UI = \"WHITE BOLD DEFAULT\"\n        BRIGHT_HELP = \"CYAN BOLD DEFAULT\"\n        FOCUSED_HEADER = \"BLACK NORMAL CYAN\"\n        FOCUSED_ROW = \"BLACK NORMAL CYAN\"\n        HEADER = \"BLACK NORMAL GREEN\"\n        METADATA = \"WHITE UNDERLINE DEFAULT\"\n        SIDE_COLUMN_FOCUSED_ROW = \"DEFAULT NORMAL CYAN\"\n        SIDE_COLUMN_HEADER = \"BLACK NORMAL GREEN\"\n        SIDE_COLUMN_ROW = \"DEFAULT NORMAL DEFAULT\"\n        STATUS_ACTIVE = \"CYAN NORMAL DEFAULT\"\n        STATUS_COMPLETE = \"GREEN NORMAL DEFAULT\"\n        STATUS_ERROR = \"RED BOLD DEFAULT\"\n        STATUS_PAUSED = \"YELLOW NORMAL DEFAULT\"\n        STATUS_WAITING = \"WHITE BOLD DEFAULT\"\n    \"\"\"\n\n    config_dict = {}\n    config_dict[\"DEFAULT\"] = tomllib.loads(default_config)\n\n    # Check for configuration file\n    config_file_path = Path(user_config_dir(\"aria2p\")) / \"config.toml\"\n\n    if config_file_path.exists():\n        try:\n            with config_file_path.open(\"rb\") as config_file:\n                config_dict[\"USER\"] = tomllib.load(config_file)\n        except Exception as error:  # noqa: BLE001\n            logger.error(f\"Failed to load configuration file: {error}\")\n    else:\n        # Write initial configuration file if it does not exist\n        config_file_path.parent.mkdir(parents=True, exist_ok=True)\n        with config_file_path.open(\"w\") as fd:\n            fd.write(textwrap.dedent(default_config).lstrip(\"\\n\"))\n    return config_dict\n</code></pre>"},{"location":"reference/aria2p/utils/#aria2p.utils.read_lines","title":"read_lines","text":"<pre><code>read_lines(path: str | Path) -&gt; list[str]\n</code></pre> <p>Read lines in a file.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | Path</code>)           \u2013            <p>The file path.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The list of lines.</p> </li> </ul> Source code in <code>src/aria2p/utils.py</code> <pre><code>def read_lines(path: str | Path) -&gt; list[str]:\n    \"\"\"Read lines in a file.\n\n    Parameters:\n        path: The file path.\n\n    Returns:\n        The list of lines.\n    \"\"\"\n    return Path(path).read_text().splitlines()\n</code></pre>"},{"location":"reference/aria2p/cli/","title":"aria2p.cli","text":""},{"location":"reference/aria2p/cli/#aria2p.cli","title":"cli","text":"<p>The CLI submodule.</p> <p>Modules:</p> <ul> <li> <code>commands</code>           \u2013            <p>All the aria2p CLI commands.</p> </li> <li> <code>main</code>           \u2013            <p>The main CLI function.</p> </li> <li> <code>parser</code>           \u2013            <p>Module that contains the command line application.</p> </li> </ul>"},{"location":"reference/aria2p/cli/main/","title":"aria2p.cli.main","text":""},{"location":"reference/aria2p/cli/main/#aria2p.cli.main","title":"main","text":"<p>The main CLI function.</p> <p>Functions:</p> <ul> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> </ul>"},{"location":"reference/aria2p/cli/main/#aria2p.cli.main.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>aria2p</code> or <code>python -m aria2p</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Parameters passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An exit code.</p> </li> </ul> Source code in <code>src/aria2p/cli/main.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `aria2p` or `python -m aria2p`.\n\n    Parameters:\n        args: Parameters passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n    kwargs = opts.__dict__\n\n    log_level = kwargs.pop(\"log_level\")\n    log_path = kwargs.pop(\"log_path\")\n\n    if log_path:\n        log_path = Path(log_path)\n        if log_path.is_dir():\n            log_path = log_path / \"aria2p-{time}.log\"\n        enable_logger(sink=log_path, level=log_level or \"WARNING\")\n    elif log_level:\n        enable_logger(sink=sys.stderr, level=log_level)\n\n    logger.debug(\"Checking arguments\")\n    check_args(parser, opts)\n\n    logger.debug(\"Instantiating API\")\n    api = API(\n        Client(\n            host=kwargs.pop(\"host\"),\n            port=kwargs.pop(\"port\"),\n            secret=kwargs.pop(\"secret\"),\n            timeout=kwargs.pop(\"client_timeout\"),\n        ),\n    )\n\n    logger.info(f\"API instantiated: {api!r}\")\n\n    # Warn if no aria2 daemon process seems to be running\n    logger.debug(\"Testing connection\")\n    try:\n        api.client.get_version()\n    except requests.ConnectionError as error:\n        print(f\"[ERROR] {error}\", file=sys.stderr)\n        print(file=sys.stderr)\n        print(\"Please make sure that an instance of aria2c is running with RPC mode enabled,\", file=sys.stderr)\n        print(\"and that you have provided the right host, port and secret token.\", file=sys.stderr)\n        print(\"More information at https://pawamoy.github.io/aria2p.\", file=sys.stderr)\n        return 2\n\n    subcommand = kwargs.pop(\"subcommand\")\n    kwargs.pop(\"debug_info\")\n\n    if subcommand:\n        logger.debug(\"Running subcommand \" + subcommand)\n    try:\n        return commands[subcommand](api, **kwargs)  # type: ignore\n    except ClientException as error:\n        print(str(error), file=sys.stderr)\n        return error.code\n</code></pre>"},{"location":"reference/aria2p/cli/parser/","title":"aria2p.cli.parser","text":""},{"location":"reference/aria2p/cli/parser/#aria2p.cli.parser","title":"parser","text":"<p>Module that contains the command line application.</p> <p>Modules:</p> <ul> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>check_args</code>             \u2013              <p>Additional checks for command line arguments.</p> </li> <li> <code>get_parser</code>             \u2013              <p>Return a parser for the command-line options and arguments.</p> </li> <li> <code>parse_options_string</code>             \u2013              <p>Parse string of options.</p> </li> </ul>"},{"location":"reference/aria2p/cli/parser/#aria2p.cli.parser.check_args","title":"check_args","text":"<pre><code>check_args(parser: ArgumentParser, opts: Namespace) -&gt; None\n</code></pre> <p>Additional checks for command line arguments.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>               (<code>ArgumentParser</code>)           \u2013            <p>An argument parser.</p> </li> <li> <code>opts</code>               (<code>Namespace</code>)           \u2013            <p>Parsed options.</p> </li> </ul> Source code in <code>src/aria2p/cli/parser.py</code> <pre><code>def check_args(parser: argparse.ArgumentParser, opts: argparse.Namespace) -&gt; None:  # (complex)\n    \"\"\"Additional checks for command line arguments.\n\n    Parameters:\n        parser: An argument parser.\n        opts: Parsed options.\n    \"\"\"\n    subparsers = next(action for action in parser._actions if isinstance(action, argparse._SubParsersAction)).choices\n\n    gid_commands = (\n        \"pause\",\n        \"stop\",\n        \"remove\",\n        \"rm\",\n        \"del\",\n        \"delete\",\n        \"resume\",\n        \"start\",\n    )\n\n    if opts.subcommand in gid_commands:\n        if not opts.do_all and not opts.gids:\n            subparsers[opts.subcommand].error(\"the following arguments are required: gids or --all\")\n        elif opts.do_all and opts.gids:\n            subparsers[opts.subcommand].error(\"argument -a/--all: not allowed with arguments gids\")\n    elif opts.subcommand:\n        if opts.subcommand in {\"add\", \"add-magnet\", \"add-magnets\"} and not opts.uris and not opts.from_file:\n            subparsers[opts.subcommand].error(\"the following arguments are required: uris\")\n        elif opts.subcommand.startswith(\"add-torrent\") and not opts.torrent_files and not opts.from_file:\n            subparsers[opts.subcommand].error(\"the following arguments are required: torrent_files\")\n        elif opts.subcommand.startswith(\"add-metalink\") and not opts.metalink_files and not opts.from_file:\n            subparsers[opts.subcommand].error(\"the following arguments are required: metalink_files\")\n</code></pre>"},{"location":"reference/aria2p/cli/parser/#aria2p.cli.parser.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return a parser for the command-line options and arguments.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>           \u2013            <p>An argument parser.</p> </li> </ul> Source code in <code>src/aria2p/cli/parser.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return a parser for the command-line options and arguments.\n\n    Returns:\n        An argument parser.\n    \"\"\"\n    usage = \"%(prog)s [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...]\"\n    description = \"Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC.\"\n    parser = argparse.ArgumentParser(add_help=False, usage=usage, description=description, prog=\"aria2p\")\n\n    main_help = \"Show this help message and exit. Commands also accept the -h/--help option.\"\n    subcommand_help = \"Show this help message and exit.\"\n\n    global_options = parser.add_argument_group(title=\"Global options\")\n    global_options.add_argument(\"-h\", \"--help\", action=\"help\", help=main_help)\n    global_options.add_argument(\"-V\", \"--version\", action=\"version\", version=f\"%(prog)s {debug.get_version()}\")\n    global_options.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n\n    global_options.add_argument(\n        \"-p\",\n        \"--port\",\n        dest=\"port\",\n        default=DEFAULT_PORT,\n        type=int,\n        help=\"Port to use to connect to the remote server.\",\n    )\n    global_options.add_argument(\n        \"-H\",\n        \"--host\",\n        dest=\"host\",\n        default=DEFAULT_HOST,\n        help=\"Host address for the remote server.\",\n    )\n    global_options.add_argument(\n        \"-s\",\n        \"--secret\",\n        dest=\"secret\",\n        default=\"\",\n        help=\"Secret token to use to connect to the remote server.\",\n    )\n    global_options.add_argument(\n        \"-L\",\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"Log level to use\",\n        choices=(\"TRACE\", \"DEBUG\", \"INFO\", \"SUCCESS\", \"WARNING\", \"ERROR\", \"CRITICAL\"),\n        type=str.upper,\n    )\n    global_options.add_argument(\n        \"-P\",\n        \"--log-path\",\n        dest=\"log_path\",\n        default=None,\n        help=\"Log path to use. Can be a directory or a file.\",\n    )\n    global_options.add_argument(\n        \"-T\",\n        \"--client-timeout\",\n        dest=\"client_timeout\",\n        default=DEFAULT_TIMEOUT,\n        type=float,\n        help=f\"Timeout in seconds for requests to the remote server. Floats supported. Default: {DEFAULT_TIMEOUT}.\",\n    )\n\n    # ========= SUBPARSERS ========= #\n    subparsers = parser.add_subparsers(dest=\"subcommand\", title=\"Commands\", metavar=\"\", prog=\"aria2p\")\n\n    def subparser(command: str, text: str, **kwargs: Any) -&gt; argparse.ArgumentParser:\n        sub = subparsers.add_parser(command, add_help=False, help=text, description=text, **kwargs)\n        sub.add_argument(\"-h\", \"--help\", action=\"help\", help=subcommand_help)\n        return sub\n\n    add_parser = subparser(\"add\", \"Add downloads with URIs/Magnets/torrents/Metalinks.\")\n    add_magnets_parser = subparser(\"add-magnets\", \"Add downloads with Magnet URIs.\", aliases=[\"add-magnet\"])\n    add_metalinks_parser = subparser(\"add-metalinks\", \"Add downloads with Metalink files.\", aliases=[\"add-metalink\"])\n    add_torrents_parser = subparser(\"add-torrents\", \"Add downloads with torrent files.\", aliases=[\"add-torrent\"])\n    subparser(\n        \"purge\",\n        \"Automatically purge completed/removed/failed downloads.\",\n        aliases=[\"autoclear\", \"autopurge\", \"autoremove\"],\n    )\n    call_parser = subparser(\"call\", \"Call a remote method through the JSON-RPC client.\")\n    pause_parser = subparser(\"pause\", \"Pause downloads.\", aliases=[\"stop\"])\n    remove_parser = subparser(\"remove\", \"Remove downloads.\", aliases=[\"rm\", \"del\", \"delete\"])\n    resume_parser = subparser(\"resume\", \"Resume downloads.\", aliases=[\"start\"])\n    subparser(\"show\", \"Show the download progression.\")\n    subparser(\"top\", \"Launch the top-like interactive interface.\")\n    listen_parser = subparser(\"listen\", \"Listen to notifications.\")\n\n    # ========= REUSABLE OPTIONS ========= #\n    def add_options_argument(_parser: argparse.ArgumentParser) -&gt; None:\n        _parser.add_argument(\n            \"-o\",\n            \"--options\",\n            dest=\"options\",\n            type=parse_options_string,\n            help=\"Options for the new download(s), separated by semi-colons. \"\n            \"Example: 'dir=~/aria2_downloads;max-download-limit=100K'\",\n        )\n\n    def add_position_argument(_parser: argparse.ArgumentParser) -&gt; None:\n        _parser.add_argument(\n            \"-p\",\n            \"--position\",\n            dest=\"position\",\n            type=int,\n            help=\"Position at which to add the new download(s) in the queue. Starts at 0 (top).\",\n        )\n\n    # ========= CALL PARSER ========= #\n    call_parser.add_argument(\n        \"method\",\n        help=(\n            \"The method to call (case insensitive). \"\n            \"Dashes and underscores will be removed so you can use as many as you want, or none. \"\n            \"Prefixes like 'aria2.' or 'system.' are also optional.\"\n        ),\n    )\n    call_parser_mxg = call_parser.add_mutually_exclusive_group()\n    call_parser_mxg.add_argument(\n        \"-P\",\n        \"--params-list\",\n        dest=\"params\",\n        nargs=\"+\",\n        help=\"Parameters as a list of strings.\",\n    )\n    call_parser_mxg.add_argument(\n        \"-J\",\n        \"--json-params\",\n        dest=\"params\",\n        help=\"Parameters as a JSON string. You should always wrap it at least once in an array '[]'.\",\n    )\n\n    # ========= ADD PARSER ========= #\n    add_parser.add_argument(\"uris\", nargs=\"*\", help=\"The URIs/file-paths to add.\")\n    add_parser.add_argument(\"-f\", \"--from-file\", dest=\"from_file\", help=\"Load URIs from a file.\")\n    add_options_argument(add_parser)\n    add_position_argument(add_parser)\n\n    # ========= ADD MAGNET PARSER ========= #\n    add_magnets_parser.add_argument(\"uris\", nargs=\"*\", help=\"The magnet URIs to add.\")\n    add_magnets_parser.add_argument(\"-f\", \"--from-file\", dest=\"from_file\", help=\"Load URIs from a file.\")\n    add_options_argument(add_magnets_parser)\n    add_position_argument(add_magnets_parser)\n\n    # ========= ADD TORRENT PARSER ========= #\n    add_torrents_parser.add_argument(\"torrent_files\", nargs=\"*\", help=\"The paths to the torrent files.\")\n    add_torrents_parser.add_argument(\"-f\", \"--from-file\", dest=\"from_file\", help=\"Load file paths from a file.\")\n    add_options_argument(add_torrents_parser)\n    add_position_argument(add_torrents_parser)\n\n    # ========= ADD METALINK PARSER ========= #\n    add_metalinks_parser.add_argument(\"metalink_files\", nargs=\"*\", help=\"The paths to the metalink files.\")\n    add_metalinks_parser.add_argument(\"-f\", \"--from-file\", dest=\"from_file\", help=\"Load file paths from a file.\")\n    add_options_argument(add_metalinks_parser)\n    add_position_argument(add_metalinks_parser)\n\n    # ========= PAUSE PARSER ========= #\n    pause_parser.add_argument(\"gids\", nargs=\"*\", help=\"The GIDs of the downloads to pause.\")\n    pause_parser.add_argument(\"-a\", \"--all\", action=\"store_true\", dest=\"do_all\", help=\"Pause all the downloads.\")\n    pause_parser.add_argument(\n        \"-f\",\n        \"--force\",\n        dest=\"force\",\n        action=\"store_true\",\n        help=\"Pause without contacting servers first.\",\n    )\n\n    # ========= RESUME PARSER ========= #\n    resume_parser.add_argument(\"gids\", nargs=\"*\", help=\"The GIDs of the downloads to resume.\")\n    resume_parser.add_argument(\"-a\", \"--all\", action=\"store_true\", dest=\"do_all\", help=\"Resume all the downloads.\")\n\n    # ========= REMOVE PARSER ========= #\n    remove_parser.add_argument(\"gids\", nargs=\"*\", help=\"The GIDs of the downloads to remove.\")\n    remove_parser.add_argument(\"-a\", \"--all\", action=\"store_true\", dest=\"do_all\", help=\"Remove all the downloads.\")\n    remove_parser.add_argument(\n        \"-f\",\n        \"--force\",\n        dest=\"force\",\n        action=\"store_true\",\n        help=\"Remove without contacting servers first.\",\n    )\n\n    # ========= LISTEN PARSER ========= #\n    listen_parser.add_argument(\n        \"-c\",\n        \"--callbacks-module\",\n        dest=\"callbacks_module\",\n        help=\"Path to the Python module defining your notifications callbacks.\",\n    )\n    listen_parser.add_argument(\n        \"event_types\",\n        nargs=\"*\",\n        help=\"The types of notifications to process: \"\n        \"start, pause, stop, error, complete or btcomplete. \"\n        \"Example: aria2p listen error btcomplete. \"\n        \"Useful if you want to spawn multiple specialized aria2p listener, \"\n        \"for example one for each type of notification, \"\n        \"but still want to use only one callback file.\",\n    )\n    listen_parser.add_argument(\n        \"-t\",\n        \"--timeout\",\n        dest=\"timeout\",\n        type=float,\n        default=5,\n        help=\"Timeout in seconds to use when waiting for data over the WebSocket at each iteration. \"\n        \"Use small values for faster reactivity when stopping to listen.\",\n    )\n\n    return parser\n</code></pre>"},{"location":"reference/aria2p/cli/parser/#aria2p.cli.parser.parse_options_string","title":"parse_options_string","text":"<pre><code>parse_options_string(\n    options_string: str | None = None,\n) -&gt; dict\n</code></pre> <p>Parse string of options.</p> <p>Parameters:</p> <ul> <li> <code>options_string</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>String of aria2c options.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ArgumentTypeError</code>             \u2013            <p>When the options string is not correctly formatted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>Dictionary containing aria2c options.</p> </li> </ul> Source code in <code>src/aria2p/cli/parser.py</code> <pre><code>def parse_options_string(options_string: str | None = None) -&gt; dict:\n    \"\"\"Parse string of options.\n\n    Parameters:\n        options_string: String of aria2c options.\n\n    Raises:\n        ArgumentTypeError: When the options string is not correctly formatted.\n\n    Returns:\n        Dictionary containing aria2c options.\n    \"\"\"\n    options_string = options_string or \"\"\n    options = {}\n    for download_option in options_string.split(\";\"):\n        try:\n            opt, val = download_option.split(\"=\", 1)\n        except ValueError:\n            raise argparse.ArgumentTypeError(  # noqa: B904\n                \"Options strings must follow this format:\\nopt-name=opt-value;opt-name2=opt-value2\",\n            )\n        options[opt.strip()] = val.strip()\n    return options\n</code></pre>"},{"location":"reference/aria2p/cli/commands/","title":"aria2p.cli.commands","text":""},{"location":"reference/aria2p/cli/commands/#aria2p.cli.commands","title":"commands","text":"<p>All the aria2p CLI commands.</p> <p>Modules:</p> <ul> <li> <code>add</code>           \u2013            <p>Generic command to add downloads.</p> </li> <li> <code>add_magnet</code>           \u2013            <p>Command to add magnets.</p> </li> <li> <code>add_metalink</code>           \u2013            <p>Command to add metalinks.</p> </li> <li> <code>add_torrent</code>           \u2013            <p>Command to add torrents.</p> </li> <li> <code>call</code>           \u2013            <p>Command to call RPC methods.</p> </li> <li> <code>listen</code>           \u2013            <p>Command to listen to notifications from the server.</p> </li> <li> <code>pause</code>           \u2013            <p>Command to pause downloads.</p> </li> <li> <code>purge</code>           \u2013            <p>Command to purge downloads.</p> </li> <li> <code>remove</code>           \u2013            <p>Command to remove downloads.</p> </li> <li> <code>resume</code>           \u2013            <p>Command to resume downloads.</p> </li> <li> <code>show</code>           \u2013            <p>Command to show downloads.</p> </li> <li> <code>top</code>           \u2013            <p>Command to run the text user-interface.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/add/","title":"aria2p.cli.commands.add","text":""},{"location":"reference/aria2p/cli/commands/add/#aria2p.cli.commands.add","title":"add","text":"<p>Generic command to add downloads.</p> <p>Functions:</p> <ul> <li> <code>add</code>             \u2013              <p>Add magnet subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/add/#aria2p.cli.commands.add.add","title":"add","text":"<pre><code>add(\n    api: API,\n    uris: list[str] | None = None,\n    from_file: str | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int\n</code></pre> <p>Add magnet subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>uris</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The URIs or file-paths to add.</p> </li> <li> <code>from_file</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to the file to read uris from. Deprecated: Every URI that is a valid file-path and is not a torrent or a metalink is now read as an input file.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>String of aria2c options to add to download.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Position to add new download in the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>0 if OK else 1.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/add.py</code> <pre><code>def add(\n    api: API,\n    uris: list[str] | None = None,\n    from_file: str | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int:\n    \"\"\"Add magnet subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        uris: The URIs or file-paths to add.\n        from_file: Path to the file to read uris from.\n            Deprecated: Every URI that is a valid file-path\n            and is not a torrent or a metalink is now read as an input file.\n        options: String of aria2c options to add to download.\n        position: Position to add new download in the queue.\n\n    Returns:\n        int: 0 if OK else 1.\n    \"\"\"\n    uris = uris or []\n\n    if from_file:\n        logger.warning(\n            \"Deprecation warning: every URI that is a valid file-path \"\n            \"and is not a torrent or a metalink is now read as an input file.\",\n        )\n\n    new_downloads = []\n\n    for uri in uris:\n        created_downloads = api.add(uri, options=options, position=position)\n        new_downloads.extend(created_downloads)\n        if position is not None:\n            position += len(created_downloads)\n\n    if new_downloads:\n        for new_download in new_downloads:\n            print(f\"Created download {new_download.gid}\")\n        return 0\n\n    print(\"No new download was created\", file=sys.stderr)\n    return 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/add_magnet/","title":"aria2p.cli.commands.add_magnet","text":""},{"location":"reference/aria2p/cli/commands/add_magnet/#aria2p.cli.commands.add_magnet","title":"add_magnet","text":"<p>Command to add magnets.</p> <p>Functions:</p> <ul> <li> <code>add_magnets</code>             \u2013              <p>Add magnet subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/add_magnet/#aria2p.cli.commands.add_magnet.add_magnets","title":"add_magnets","text":"<pre><code>add_magnets(\n    api: API,\n    uris: list[str] | None = None,\n    from_file: str | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int\n</code></pre> <p>Add magnet subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>uris</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The URIs of the magnets.</p> </li> <li> <code>from_file</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to the file to read uris from.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>String of aria2c options to add to download.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Position to add new download in the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>Always 0.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/add_magnet.py</code> <pre><code>def add_magnets(\n    api: API,\n    uris: list[str] | None = None,\n    from_file: str | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int:\n    \"\"\"Add magnet subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        uris: The URIs of the magnets.\n        from_file: Path to the file to read uris from.\n        options: String of aria2c options to add to download.\n        position: Position to add new download in the queue.\n\n    Returns:\n        int: Always 0.\n    \"\"\"\n    ok = True\n\n    if not uris:\n        uris = []\n\n    if from_file:\n        try:\n            uris.extend(read_lines(from_file))\n        except OSError:\n            print(f\"Cannot open file: {from_file}\", file=sys.stderr)\n            ok = False\n\n    for uri in uris:\n        new_download = api.add_magnet(uri, options=options, position=position)\n        print(f\"Created download {new_download.gid}\")\n\n    return 0 if ok else 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/add_metalink/","title":"aria2p.cli.commands.add_metalink","text":""},{"location":"reference/aria2p/cli/commands/add_metalink/#aria2p.cli.commands.add_metalink","title":"add_metalink","text":"<p>Command to add metalinks.</p> <p>Functions:</p> <ul> <li> <code>add_metalinks</code>             \u2013              <p>Add metalink subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/add_metalink/#aria2p.cli.commands.add_metalink.add_metalinks","title":"add_metalinks","text":"<pre><code>add_metalinks(\n    api: API,\n    metalink_files: list[str | Path] | None = None,\n    from_file: str | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int\n</code></pre> <p>Add metalink subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>metalink_files</code>               (<code>list[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to the metalink files.</p> </li> <li> <code>from_file</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to the file to metalink files paths from.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>String of aria2c options to add to download.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Position to add new download in the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>0 if OK else 1.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/add_metalink.py</code> <pre><code>def add_metalinks(\n    api: API,\n    metalink_files: list[str | Path] | None = None,\n    from_file: str | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int:\n    \"\"\"Add metalink subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        metalink_files: The paths to the metalink files.\n        from_file: Path to the file to metalink files paths from.\n        options: String of aria2c options to add to download.\n        position: Position to add new download in the queue.\n\n    Returns:\n        int: 0 if OK else 1.\n    \"\"\"\n    ok = True\n\n    if not metalink_files:\n        metalink_files = []\n\n    if from_file:\n        try:\n            metalink_files.extend(read_lines(from_file))\n        except OSError:\n            print(f\"Cannot open file: {from_file}\", file=sys.stderr)\n            ok = False\n\n    for metalink_file in metalink_files:\n        new_downloads = api.add_metalink(metalink_file, options=options, position=position)\n        for download in new_downloads:\n            print(f\"Created download {download.gid}\")\n\n    return 0 if ok else 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/add_torrent/","title":"aria2p.cli.commands.add_torrent","text":""},{"location":"reference/aria2p/cli/commands/add_torrent/#aria2p.cli.commands.add_torrent","title":"add_torrent","text":"<p>Command to add torrents.</p> <p>Functions:</p> <ul> <li> <code>add_torrents</code>             \u2013              <p>Add torrent subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/add_torrent/#aria2p.cli.commands.add_torrent.add_torrents","title":"add_torrents","text":"<pre><code>add_torrents(\n    api: API,\n    torrent_files: list[str | Path] | None = None,\n    from_file: str | Path | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int\n</code></pre> <p>Add torrent subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>torrent_files</code>               (<code>list[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to the torrent files.</p> </li> <li> <code>from_file</code>               (<code>str | Path | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to the file to read torrent files paths from.</p> </li> <li> <code>options</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>String of aria2c options to add to download.</p> </li> <li> <code>position</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Position to add new download in the queue.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>Always 0.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/add_torrent.py</code> <pre><code>def add_torrents(\n    api: API,\n    torrent_files: list[str | Path] | None = None,\n    from_file: str | Path | None = None,\n    options: dict | None = None,\n    position: int | None = None,\n) -&gt; int:\n    \"\"\"Add torrent subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        torrent_files: The paths to the torrent files.\n        from_file: Path to the file to read torrent files paths from.\n        options: String of aria2c options to add to download.\n        position: Position to add new download in the queue.\n\n    Returns:\n        int: Always 0.\n    \"\"\"\n    ok = True\n\n    if not torrent_files:\n        torrent_files = []\n\n    if from_file:\n        try:\n            torrent_files.extend(read_lines(from_file))\n        except OSError:\n            print(f\"Cannot open file: {from_file}\", file=sys.stderr)\n            ok = False\n\n    for torrent_file in torrent_files:\n        new_download = api.add_torrent(torrent_file, options=options, position=position)\n        print(f\"Created download {new_download.gid}\")\n\n    return 0 if ok else 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/call/","title":"aria2p.cli.commands.call","text":""},{"location":"reference/aria2p/cli/commands/call/#aria2p.cli.commands.call","title":"call","text":"<p>Command to call RPC methods.</p> <p>Functions:</p> <ul> <li> <code>call</code>             \u2013              <p>Call subcommand.</p> </li> <li> <code>get_method</code>             \u2013              <p>Return the actual aria2 method name from a differently formatted name.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/call/#aria2p.cli.commands.call.call","title":"call","text":"<pre><code>call(api: API, method: str, params: str | list[str]) -&gt; int\n</code></pre> <p>Call subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>method</code>               (<code>str</code>)           \u2013            <p>Name of the method to call.</p> </li> <li> <code>params</code>               (<code>str | list[str]</code>)           \u2013            <p>Parameters to use when calling method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>Always 0.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/call.py</code> <pre><code>def call(api: API, method: str, params: str | list[str]) -&gt; int:\n    \"\"\"Call subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        method: Name of the method to call.\n        params: Parameters to use when calling method.\n\n    Returns:\n        int: Always 0.\n    \"\"\"\n    real_method = get_method(method)\n\n    if real_method is None:\n        print(f\"aria2p: call: Unknown method {method}.\", file=sys.stderr)\n        print(\"  Run 'aria2p call listmethods' to list the available methods.\", file=sys.stderr)\n        return 1\n\n    call_params: list[Any]\n    if isinstance(params, str):\n        call_params = json.loads(params)\n    elif params is None:\n        call_params = []\n    else:\n        call_params = params\n\n    response = api.client.call(real_method, call_params)\n    print(json.dumps(response))\n\n    return 0\n</code></pre>"},{"location":"reference/aria2p/cli/commands/call/#aria2p.cli.commands.call.get_method","title":"get_method","text":"<pre><code>get_method(name: str) -&gt; str | None\n</code></pre> <p>Return the actual aria2 method name from a differently formatted name.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>A method name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The real method name.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/call.py</code> <pre><code>def get_method(name: str) -&gt; str | None:\n    \"\"\"Return the actual aria2 method name from a differently formatted name.\n\n    Parameters:\n        name: A method name.\n\n    Returns:\n        The real method name.\n    \"\"\"\n    methods = {}\n\n    for method in Client.METHODS:\n        methods[method.lower()] = method\n        methods[method.split(\".\")[1].lower()] = method\n\n    name = name.lower()\n    name = name.replace(\"-\", \"\")\n    name = name.replace(\"_\", \"\")\n\n    return methods.get(name)\n</code></pre>"},{"location":"reference/aria2p/cli/commands/listen/","title":"aria2p.cli.commands.listen","text":""},{"location":"reference/aria2p/cli/commands/listen/#aria2p.cli.commands.listen","title":"listen","text":"<p>Command to listen to notifications from the server.</p> <p>Functions:</p> <ul> <li> <code>listen</code>             \u2013              <p>Listen subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/listen/#aria2p.cli.commands.listen.listen","title":"listen","text":"<pre><code>listen(\n    api: API,\n    callbacks_module: str | Path | None = None,\n    event_types: list[str] | None = None,\n    timeout: int = 5,\n) -&gt; int\n</code></pre> <p>Listen subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>callbacks_module</code>               (<code>str | Path | None</code>, default:                   <code>None</code> )           \u2013            <p>The path to the module to import, containing the callbacks as functions.</p> </li> <li> <code>event_types</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The event types to process.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>The timeout to pass to the WebSocket connection, in seconds.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>Always 0.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/listen.py</code> <pre><code>def listen(\n    api: API,\n    callbacks_module: str | Path | None = None,\n    event_types: list[str] | None = None,\n    timeout: int = 5,\n) -&gt; int:\n    \"\"\"Listen subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        callbacks_module: The path to the module to import, containing the callbacks as functions.\n        event_types: The event types to process.\n        timeout: The timeout to pass to the WebSocket connection, in seconds.\n\n    Returns:\n        int: Always 0.\n    \"\"\"\n    if not callbacks_module:\n        print(\"aria2p: listen: Please provide the callback module file path with -c option\", file=sys.stderr)\n        return 1\n\n    if isinstance(callbacks_module, Path):\n        callbacks_module = str(callbacks_module)\n\n    if not event_types:\n        event_types = [\"start\", \"pause\", \"stop\", \"error\", \"complete\", \"btcomplete\"]\n\n    spec = importlib_util.spec_from_file_location(\"aria2p_callbacks\", callbacks_module)\n\n    if spec is None:\n        print(f\"aria2p: Could not import module file {callbacks_module}\", file=sys.stderr)\n        return 1\n\n    callbacks = importlib_util.module_from_spec(spec)\n\n    if callbacks is None:\n        print(f\"aria2p: Could not import module file {callbacks_module}\", file=sys.stderr)\n        return 1\n\n    spec.loader.exec_module(callbacks)  # type: ignore\n\n    callbacks_kwargs = {}\n    for callback_name in (\n        \"on_download_start\",\n        \"on_download_pause\",\n        \"on_download_stop\",\n        \"on_download_error\",\n        \"on_download_complete\",\n        \"on_bt_download_complete\",\n    ):\n        if callback_name[3:].replace(\"download\", \"\").replace(\"_\", \"\") in event_types:\n            callback = getattr(callbacks, callback_name, None)\n            if callback:\n                callbacks_kwargs[callback_name] = callback\n\n    api.listen_to_notifications(timeout=timeout, handle_signals=True, threaded=False, **callbacks_kwargs)\n    return 0\n</code></pre>"},{"location":"reference/aria2p/cli/commands/pause/","title":"aria2p.cli.commands.pause","text":""},{"location":"reference/aria2p/cli/commands/pause/#aria2p.cli.commands.pause","title":"pause","text":"<p>Command to pause downloads.</p> <p>Functions:</p> <ul> <li> <code>pause</code>             \u2013              <p>Pause subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/pause/#aria2p.cli.commands.pause.pause","title":"pause","text":"<pre><code>pause(\n    api: API,\n    gids: list[str] | None = None,\n    do_all: bool = False,\n    force: bool = False,\n) -&gt; int\n</code></pre> <p>Pause subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>gids</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The GIDs of the downloads to pause.</p> </li> <li> <code>do_all</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pause all downloads if True.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Force pause or not (see API.pause).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>0 if all success, 1 if one failure.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/pause.py</code> <pre><code>def pause(\n    api: API,\n    gids: list[str] | None = None,\n    do_all: bool = False,  # noqa: FBT001,FBT002\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; int:\n    \"\"\"Pause subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        gids: The GIDs of the downloads to pause.\n        do_all: Pause all downloads if True.\n        force: Force pause or not (see API.pause).\n\n    Returns:\n        int: 0 if all success, 1 if one failure.\n    \"\"\"\n    if do_all:\n        if api.pause_all(force=force):\n            return 0\n        return 1\n\n    try:\n        downloads = api.get_downloads(gids)\n    except ClientException as error:\n        print(str(error), file=sys.stderr)\n        return 1\n\n    result = api.pause(downloads, force=force)\n\n    if all(result):\n        return 0\n\n    for item in result:\n        if isinstance(item, ClientException):\n            print(item, file=sys.stderr)\n\n    return 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/purge/","title":"aria2p.cli.commands.purge","text":""},{"location":"reference/aria2p/cli/commands/purge/#aria2p.cli.commands.purge","title":"purge","text":"<p>Command to purge downloads.</p> <p>Functions:</p> <ul> <li> <code>purge</code>             \u2013              <p>Purge subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/purge/#aria2p.cli.commands.purge.purge","title":"purge","text":"<pre><code>purge(api: API) -&gt; int\n</code></pre> <p>Purge subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>0 if all success, 1 if one failure.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/purge.py</code> <pre><code>def purge(api: API) -&gt; int:\n    \"\"\"Purge subcommand.\n\n    Parameters:\n        api: The API instance to use.\n\n    Returns:\n        int: 0 if all success, 1 if one failure.\n    \"\"\"\n    if api.autopurge():\n        return 0\n    return 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/remove/","title":"aria2p.cli.commands.remove","text":""},{"location":"reference/aria2p/cli/commands/remove/#aria2p.cli.commands.remove","title":"remove","text":"<p>Command to remove downloads.</p> <p>Functions:</p> <ul> <li> <code>remove</code>             \u2013              <p>Remove subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/remove/#aria2p.cli.commands.remove.remove","title":"remove","text":"<pre><code>remove(\n    api: API,\n    gids: list[str] | None = None,\n    do_all: bool = False,\n    force: bool = False,\n) -&gt; int\n</code></pre> <p>Remove subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>gids</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The GIDs of the downloads to remove.</p> </li> <li> <code>do_all</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pause all downloads if True.</p> </li> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Force pause or not (see API.remove).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>0 if all success, 1 if one failure.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/remove.py</code> <pre><code>def remove(\n    api: API,\n    gids: list[str] | None = None,\n    do_all: bool = False,  # noqa: FBT001,FBT002\n    force: bool = False,  # noqa: FBT001,FBT002\n) -&gt; int:\n    \"\"\"Remove subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        gids: The GIDs of the downloads to remove.\n        do_all: Pause all downloads if True.\n        force: Force pause or not (see API.remove).\n\n    Returns:\n        int: 0 if all success, 1 if one failure.\n    \"\"\"\n    if do_all:\n        if api.remove_all():\n            return 0\n        return 1\n\n    try:\n        downloads = api.get_downloads(gids)\n    except ClientException as error:\n        print(str(error), file=sys.stderr)\n        return 1\n\n    ok = True\n    result = api.remove(downloads, force=force)\n\n    if all(result):\n        return 0 if ok else 1\n\n    for item in result:\n        if isinstance(item, ClientException):\n            print(item, file=sys.stderr)\n\n    return 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/resume/","title":"aria2p.cli.commands.resume","text":""},{"location":"reference/aria2p/cli/commands/resume/#aria2p.cli.commands.resume","title":"resume","text":"<p>Command to resume downloads.</p> <p>Functions:</p> <ul> <li> <code>resume</code>             \u2013              <p>Resume subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/resume/#aria2p.cli.commands.resume.resume","title":"resume","text":"<pre><code>resume(\n    api: API,\n    gids: list[str] | None = None,\n    do_all: bool = False,\n) -&gt; int\n</code></pre> <p>Resume subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> <li> <code>gids</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The GIDs of the downloads to resume.</p> </li> <li> <code>do_all</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pause all downloads if True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>0 if all success, 1 if one failure.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/resume.py</code> <pre><code>def resume(api: API, gids: list[str] | None = None, do_all: bool = False) -&gt; int:  # noqa: FBT001,FBT002\n    \"\"\"Resume subcommand.\n\n    Parameters:\n        api: The API instance to use.\n        gids: The GIDs of the downloads to resume.\n        do_all: Pause all downloads if True.\n\n    Returns:\n        int: 0 if all success, 1 if one failure.\n    \"\"\"\n    if do_all:\n        if api.resume_all():\n            return 0\n        return 1\n\n    try:\n        downloads = api.get_downloads(gids)\n    except ClientException as error:\n        print(str(error), file=sys.stderr)\n        return 1\n\n    result = api.resume(downloads)\n\n    if all(result):\n        return 0\n\n    for item in result:\n        if isinstance(item, ClientException):\n            print(item, file=sys.stderr)\n\n    return 1\n</code></pre>"},{"location":"reference/aria2p/cli/commands/show/","title":"aria2p.cli.commands.show","text":""},{"location":"reference/aria2p/cli/commands/show/#aria2p.cli.commands.show","title":"show","text":"<p>Command to show downloads.</p> <p>Functions:</p> <ul> <li> <code>show</code>             \u2013              <p>Show subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/show/#aria2p.cli.commands.show.show","title":"show","text":"<pre><code>show(api: API) -&gt; int\n</code></pre> <p>Show subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>Always 0.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/show.py</code> <pre><code>def show(api: API) -&gt; int:\n    \"\"\"Show subcommand.\n\n    Parameters:\n        api: The API instance to use.\n\n    Returns:\n        int: Always 0.\n    \"\"\"\n    downloads = api.get_downloads()\n\n    def print_line(*args: Any) -&gt; None:\n        print(\"{:&lt;17} {:&lt;9} {:&gt;8} {:&gt;12} {:&gt;12} {:&gt;8}  {}\".format(*args))\n\n    print_line(\"GID\", \"STATUS\", \"PROGRESS\", \"DOWN_SPEED\", \"UP_SPEED\", \"ETA\", \"NAME\")\n\n    for download in downloads:\n        print_line(\n            download.gid,\n            download.status,\n            download.progress_string(),\n            download.download_speed_string(),\n            download.upload_speed_string(),\n            download.eta_string(),\n            download.name,\n        )\n\n    return 0\n</code></pre>"},{"location":"reference/aria2p/cli/commands/top/","title":"aria2p.cli.commands.top","text":""},{"location":"reference/aria2p/cli/commands/top/#aria2p.cli.commands.top","title":"top","text":"<p>Command to run the text user-interface.</p> <p>Functions:</p> <ul> <li> <code>top</code>             \u2013              <p>Top subcommand.</p> </li> </ul>"},{"location":"reference/aria2p/cli/commands/top/#aria2p.cli.commands.top.top","title":"top","text":"<pre><code>top(api: API) -&gt; int\n</code></pre> <p>Top subcommand.</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>API</code>)           \u2013            <p>The API instance to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>Always 0.</p> </li> </ul> Source code in <code>src/aria2p/cli/commands/top.py</code> <pre><code>def top(api: API) -&gt; int:\n    \"\"\"Top subcommand.\n\n    Parameters:\n        api: The API instance to use.\n\n    Returns:\n        int: Always 0.\n    \"\"\"\n    if Interface is None:\n        print(\n            \"The top-interface dependencies are not installed. Try running `pip install aria2p[tui]` to install them.\",\n            file=sys.stderr,\n        )\n        return 1\n\n    interface = Interface(api)\n    success = interface.run()\n    return 0 if success else 1\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}